<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>几种垂直居中的方法</title>
    <url>/2017/04/15/css/CSS%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%84%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<hr>
<span id="more"></span>
<h2 id="垂直居中主要分为了两种类型：居中元素宽高已知-和-居中元素宽高未知"><a href="#垂直居中主要分为了两种类型：居中元素宽高已知-和-居中元素宽高未知" class="headerlink" title="垂直居中主要分为了两种类型：居中元素宽高已知 和 居中元素宽高未知"></a>垂直居中主要分为了两种类型：居中元素宽高已知 和 居中元素宽高未知</h2><p> <img src="/images/centerVertical.jpg" alt="01"></p>
<p>以下的方法都围绕着该HTML展开</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div  <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;wrap&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>  <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="一、居中元素宽高元素未知"><a href="#一、居中元素宽高元素未知" class="headerlink" title="一、居中元素宽高元素未知"></a>一、居中元素宽高元素未知</h2><h3 id="1、（常用）：display：flex-（①）"><a href="#1、（常用）：display：flex-（①）" class="headerlink" title="1、（常用）：display：flex （①）"></a>1、（常用）：display：flex （①）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.wrap&#123;</span><br><span class="line">	<span class="attr">width</span>:300px;</span><br><span class="line">	height:300px;</span><br><span class="line">    border: 1px solid red;</span><br><span class="line">    <span class="comment">/* 核心代码 */</span></span><br><span class="line">    display:flex;</span><br><span class="line">    justify-content:center;</span><br><span class="line">    align-items:center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box&#123;<span class="comment">//子元素宽高可设可不设</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2、常用）：display：flex-margin-auto（②）"><a href="#2、常用）：display：flex-margin-auto（②）" class="headerlink" title="2、常用）：display：flex  + margin auto（②）"></a>2、常用）：display：flex  + margin auto（②）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.wrap&#123;</span><br><span class="line">	<span class="attr">width</span>:300px;</span><br><span class="line">	height:300px;</span><br><span class="line">    border: 1px solid red;</span><br><span class="line">    <span class="comment">/* 核心代码 */</span></span><br><span class="line">    display:flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box&#123;<span class="comment">//子元素宽高可设可不设</span></span><br><span class="line">    <span class="comment">/* 核心代码 */</span></span><br><span class="line">    <span class="attr">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3、absolute-transform"><a href="#3、absolute-transform" class="headerlink" title="3、absolute + transform"></a>3、absolute + transform</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.wrap &#123;</span><br><span class="line">    <span class="attr">width</span>: 300px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    position: relative;</span><br><span class="line">    background-color: plum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box &#123;<span class="comment">//子元素宽高可设可不设</span></span><br><span class="line">    <span class="comment">/* 核心代码 */</span></span><br><span class="line">    <span class="attr">position</span>: absolute;</span><br><span class="line">    left: <span class="number">50</span>%;</span><br><span class="line">    top: <span class="number">50</span>%;</span><br><span class="line">    transform: translate(-<span class="number">50</span>%,-<span class="number">50</span>%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4、table-cell"><a href="#4、table-cell" class="headerlink" title="4、table-cell"></a>4、table-cell</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.wrap&#123;</span><br><span class="line">    <span class="attr">width</span>: 300px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    border: 1px solid red;</span><br><span class="line">    <span class="comment">/* 核心代码 */</span></span><br><span class="line">    display: table-cell;</span><br><span class="line">    text-align: center;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box&#123; <span class="comment">//在子元素里加上display: inline-block;</span></span><br><span class="line">    <span class="comment">/* 核心代码 */</span></span><br><span class="line">    <span class="attr">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5、line-height-inline-block-vertical-aligin"><a href="#5、line-height-inline-block-vertical-aligin" class="headerlink" title="5、line-height + inline-block + vertical-aligin"></a>5、line-height + inline-block + vertical-aligin</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//把当前元素设置为行内元素，然后通过设置父元素的 text-align: center; 实现水平居中；</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//同时通过设置当前元素的 vertical-align: middle; 来实现垂直居中；</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//最后设置当前元素的 line-height: initial; 来继承父元素的line-height。</span></span><br><span class="line">.wrap &#123;</span><br><span class="line">    <span class="attr">width</span>: 300px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    background-color: pink;</span><br><span class="line">    <span class="comment">/* 核心代码 */</span></span><br><span class="line">    text-align: center;</span><br><span class="line">    line-height: 300px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box &#123;</span><br><span class="line">    <span class="comment">/* 核心代码 */</span></span><br><span class="line">    <span class="attr">display</span>: inline-block;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    line-height: initial;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6、grid-网格布局（①）-CSS-Grid-网格布局教程"><a href="#6、grid-网格布局（①）-CSS-Grid-网格布局教程" class="headerlink" title="6、grid 网格布局（①）  CSS Grid 网格布局教程"></a>6、grid 网格布局（①）  <a href="https://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html">CSS Grid 网格布局教程</a></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.wrap &#123;</span><br><span class="line">    <span class="attr">width</span>: 300px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    background-color: plum;</span><br><span class="line">    <span class="comment">/* 核心代码 */</span></span><br><span class="line">    display: grid;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">.box &#123;<span class="comment">//子元素宽高可设可不设</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="7、grid-网格布局（②）"><a href="#7、grid-网格布局（②）" class="headerlink" title="7、grid 网格布局（②）"></a>7、grid 网格布局（②）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.wrap &#123;</span><br><span class="line">    <span class="attr">width</span>: 300px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    background-color: plum;</span><br><span class="line">    <span class="comment">/* 核心代码 */</span></span><br><span class="line">    display: grid;</span><br><span class="line">&#125;</span><br><span class="line">.box &#123;<span class="comment">//子元素宽高可设可不设</span></span><br><span class="line">    <span class="comment">/* 核心代码 */</span></span><br><span class="line">    align-self: center;</span><br><span class="line">    justify-self: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二、居中元素宽高元素已知"><a href="#二、居中元素宽高元素已知" class="headerlink" title="二、居中元素宽高元素已知"></a>二、居中元素宽高元素已知</h2><h3 id="1、absolute-margin-auto"><a href="#1、absolute-margin-auto" class="headerlink" title="1、absolute + margin:auto"></a>1、absolute + margin:auto</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.wrap&#123;</span><br><span class="line">    <span class="attr">width</span>: 300px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    position: relative;</span><br><span class="line">    background-color: plum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box&#123;<span class="comment">//子元素设置宽高</span></span><br><span class="line">    <span class="attr">width</span>: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color: powderblue;</span><br><span class="line">    <span class="comment">/* 核心代码 */</span></span><br><span class="line">    position: absolute;</span><br><span class="line">    left: <span class="number">0</span>;</span><br><span class="line">    top: <span class="number">0</span>;</span><br><span class="line">    bottom:<span class="number">0</span>;</span><br><span class="line">    right:<span class="number">0</span>;</span><br><span class="line">    margin:auto; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2、absolute-负margin"><a href="#2、absolute-负margin" class="headerlink" title="2、absolute + 负margin"></a>2、absolute + 负margin</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.wrap&#123;</span><br><span class="line">    <span class="attr">width</span>: 300px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    position: relative;</span><br><span class="line">    background-color: plum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box&#123;<span class="comment">//子元素设置宽高</span></span><br><span class="line">    <span class="attr">width</span>: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color: powderblue;</span><br><span class="line">    <span class="comment">/* 核心代码 */</span></span><br><span class="line">    position: absolute;</span><br><span class="line">    left: <span class="number">50</span>%;</span><br><span class="line">    top: <span class="number">50</span>%;</span><br><span class="line">    <span class="comment">/*宽高的一半*/</span></span><br><span class="line">    margin-left: -50px;</span><br><span class="line">    margin-top: -50px; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3、absolute-calc-用CSS3的一个计算函数来进行计算，方法与上面类似"><a href="#3、absolute-calc-用CSS3的一个计算函数来进行计算，方法与上面类似" class="headerlink" title="3、absolute + calc, 用CSS3的一个计算函数来进行计算，方法与上面类似"></a>3、absolute + calc, 用CSS3的一个计算函数来进行计算，方法与上面类似</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.wrap&#123;</span><br><span class="line">    <span class="attr">width</span>: 300px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    position: relative;</span><br><span class="line">    background-color: plum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box&#123;<span class="comment">//子元素设置宽高</span></span><br><span class="line">    <span class="attr">width</span>: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color: powderblue;</span><br><span class="line">    <span class="comment">/* 核心代码 */</span></span><br><span class="line">    position: absolute;</span><br><span class="line">    <span class="comment">/*减掉宽高的一半，calc()减号前后要有空格*/</span></span><br><span class="line">    top: calc(<span class="number">50</span>% - 50px);</span><br><span class="line">    left: calc(<span class="number">50</span>% - 50px);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4、margin，transform配合"><a href="#4、margin，transform配合" class="headerlink" title="4、margin，transform配合"></a>4、margin，transform配合</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.wrap&#123;</span><br><span class="line">    <span class="attr">width</span>: 300px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    background-color: pink;</span><br><span class="line">    <span class="comment">/* 核心代码 */</span></span><br><span class="line">    <span class="comment">/*防止外边距塌陷。解决外边距塌陷的方法：</span></span><br><span class="line"><span class="comment">    父元素加overflow:hidden或加上边框*/</span></span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line">.box&#123; <span class="comment">//子元素设置宽高</span></span><br><span class="line">    <span class="attr">width</span>: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color: plum;</span><br><span class="line">    <span class="comment">/* 核心代码 */</span></span><br><span class="line">    margin:<span class="number">50</span>% auto;</span><br><span class="line">    transform: translateY(-<span class="number">50</span>%); </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>其实以上的是一种垂直居中方法，只是比较常见的，其实还有一些比较冷门的方式方法，例如 伪类元素、grid-container 的 grid-template-rows 等，大家下去可以自行尝试一下 ~</p>
</blockquote>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>垂直水平居中</tag>
      </tags>
  </entry>
  <entry>
    <title>谷歌浏览器插件下载</title>
    <url>/2018/05/25/chrome/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<hr>
<p>相信很多小伙伴都遇到过chrome浏览器商店打不开的情况，这里推荐一个网站<a href="https://www.extfans.com/">Extfans</a>，里面谷歌插件可以说很多</p>
<span id="more"></span>
<h3 id="首先说说mac下载"><a href="#首先说说mac下载" class="headerlink" title="首先说说mac下载"></a>首先说说mac下载</h3><blockquote>
<p>找到插件，下载流程按上面说的一步一步来即可，最后将crx文件拖到扩展程序页面</p>
</blockquote>
<h3 id="windows下载"><a href="#windows下载" class="headerlink" title="windows下载"></a>windows下载</h3><blockquote>
<p>先按步骤来，跟mac操作一样，如果没问题的话，那边不用看下面了</p>
</blockquote>
<blockquote>
<p>当出现你往扩展程序页面拖拽crx文件，拖不进来的时候:</p>
</blockquote>
<blockquote>
<p>windows谷歌浏览器无法安装crx插件 解决办法<br>1、扩展程序打开开发者模式<br>2、上述还不行就 修改参数(基本就可以了)<br>打开 chrome://flags/&gt;#extensions-on-chrome-urls<br>将 Extensions on chrome://urls     的&gt;disabled 改为enable 重启即可<br>记得装完插件再改回来</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">推荐几个好用的谷歌插件：</span><br><span class="line">* vue 开发调试工具-     Vue.js devtools</span><br><span class="line">* react 开发调试工具-     React Developer Tools</span><br><span class="line">* redux 开发调试工具-     Redux DevTools</span><br><span class="line">* 快捷预览 json 接口工具-     <span class="built_in">JSON</span>-handle</span><br><span class="line">* 谷歌翻译-      Google翻译 (不好用了)</span><br><span class="line">* 沙拉查词-     沙拉查词-聚合词典划词翻译(划词翻译)</span><br><span class="line">* 极速翻译-网页全文翻译      -网页全文翻译(可以替代谷歌翻译网页全文)</span><br><span class="line">* 广告拦截(包括百度搜索广告)-  Adblock Plus - 免费的广告拦截器(推荐，好用)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>chrome</category>
      </categories>
      <tags>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>before和after伪类实现四角边框</title>
    <url>/2017/03/10/css/before%E5%92%8Cafter%E4%BC%AA%E7%B1%BB%E5%AE%9E%E7%8E%B0%E5%9B%9B%E8%A7%92%E8%BE%B9%E6%A1%86/</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;mainbox&quot;</span>&gt;</span><br><span class="line">    &lt;!-- 伪元素绘制盒子上边角 --&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 图表放置盒子 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;chart&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 伪元素绘制盒子下边角 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.mainbox .panel &#123;</span><br><span class="line">    <span class="attr">position</span>: relative;</span><br><span class="line">    height: 200px;</span><br><span class="line">    width: 300px;</span><br><span class="line">    background-color: #abcdef;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.mainbox .panel::before &#123;</span><br><span class="line">    <span class="attr">position</span>: absolute;</span><br><span class="line">    top: <span class="number">0</span>;</span><br><span class="line">    left: <span class="number">0</span>;</span><br><span class="line">    width: 10px;</span><br><span class="line">    height: 10px;</span><br><span class="line">    border-left: 2px solid #02a6b5;</span><br><span class="line">    border-top: 2px solid #02a6b5;</span><br><span class="line">    content: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.mainbox .panel::after &#123;</span><br><span class="line">    <span class="attr">position</span>: absolute;</span><br><span class="line">    top: <span class="number">0</span>;</span><br><span class="line">    right: <span class="number">0</span>;</span><br><span class="line">    width: 10px;</span><br><span class="line">    height: 10px;</span><br><span class="line">    border-right: 2px solid #02a6b5;</span><br><span class="line">    border-top: 2px solid #02a6b5;</span><br><span class="line">    content: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.mainbox .panel .panel-footer &#123;</span><br><span class="line">    <span class="attr">position</span>: absolute;</span><br><span class="line">    bottom: <span class="number">0</span>;</span><br><span class="line">    left: <span class="number">0</span>;</span><br><span class="line">    width: <span class="number">100</span>%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.mainbox .panel .panel-footer::before &#123;</span><br><span class="line">    <span class="attr">position</span>: absolute;</span><br><span class="line">    bottom: <span class="number">0</span>;</span><br><span class="line">    left: <span class="number">0</span>;</span><br><span class="line">    width: 10px;</span><br><span class="line">    height: 10px;</span><br><span class="line">    border-left: 2px solid #02a6b5;</span><br><span class="line">    border-bottom: 2px solid #02a6b5;</span><br><span class="line">    content: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.mainbox .panel .panel-footer::after &#123;</span><br><span class="line">    <span class="attr">position</span>: absolute;</span><br><span class="line">    bottom: <span class="number">0</span>;</span><br><span class="line">    right: <span class="number">0</span>;</span><br><span class="line">    width: 10px;</span><br><span class="line">    height: 10px;</span><br><span class="line">    border-right: 2px solid #02a6b5;</span><br><span class="line">    border-bottom: 2px solid #02a6b5;</span><br><span class="line">    content: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>before和after伪类</category>
      </categories>
      <tags>
        <tag>before和after伪类</tag>
      </tags>
  </entry>
  <entry>
    <title>css清除默认样式和设置公共样式</title>
    <url>/2016/11/20/css/css%E6%B8%85%E9%99%A4%E9%BB%98%E8%AE%A4%E6%A0%B7%E5%BC%8F%E5%92%8C%E8%AE%BE%E7%BD%AE%E5%85%AC%E5%85%B1%E6%A0%B7%E5%BC%8F/</url>
    <content><![CDATA[<hr>
<span id="more"></span>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*公共样式--开始*/</span></span><br><span class="line">html, body, div, ul, li, h1, h2, h3, h4, h5, h6, p, dl, dt, dd, ol, form, input, textarea, th, td, select &#123;</span><br><span class="line">    <span class="attr">margin</span>: <span class="number">0</span>;</span><br><span class="line">    padding: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">*&#123;box-sizing: border-box;&#125;</span><br><span class="line">html, body &#123;</span><br><span class="line">    min-height: <span class="number">100</span>%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body &#123;</span><br><span class="line">    font-family: <span class="string">&quot;Microsoft YaHei&quot;</span>;</span><br><span class="line">    font-size:14px;</span><br><span class="line">    color:#<span class="number">333</span>;</span><br><span class="line">&#125;</span><br><span class="line">h1, h2, h3, h4, h5, h6&#123;font-weight:normal;&#125;</span><br><span class="line">ul,ol &#123;</span><br><span class="line">    list-style: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">img &#123;</span><br><span class="line">    <span class="attr">border</span>: none;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a &#123;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">    color: #<span class="number">232323</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">table &#123;</span><br><span class="line">    border-collapse: collapse;</span><br><span class="line">    table-layout: fixed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">input, textarea &#123;</span><br><span class="line">    <span class="attr">outline</span>: none;</span><br><span class="line">    border: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">textarea &#123;</span><br><span class="line">    <span class="attr">resize</span>: none;</span><br><span class="line">    overflow: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.clearfix &#123;</span><br><span class="line">    <span class="attr">zoom</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.clearfix:after &#123;</span><br><span class="line">    <span class="attr">content</span>: <span class="string">&quot;.&quot;</span>;</span><br><span class="line">    width: <span class="number">0</span>;</span><br><span class="line">    height: <span class="number">0</span>;</span><br><span class="line">    visibility: hidden;</span><br><span class="line">    display: block;</span><br><span class="line">    clear: both;</span><br><span class="line">    overflow:hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.fl &#123;</span><br><span class="line">    <span class="attr">float</span>: left</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.fr &#123;</span><br><span class="line">    <span class="attr">float</span>: right</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.tl &#123;</span><br><span class="line">    text-align: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.tc &#123;</span><br><span class="line">    text-align: center</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.tr &#123;</span><br><span class="line">    text-align: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.ellipse &#123;</span><br><span class="line">    <span class="attr">overflow</span>: hidden;</span><br><span class="line">    text-overflow: ellipsis;</span><br><span class="line">    white-space: nowrap;</span><br><span class="line">&#125;</span><br><span class="line">.inline&#123;</span><br><span class="line">    <span class="attr">display</span>: inline-block;</span><br><span class="line">    *display: inline;</span><br><span class="line">    *zoom: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>公共样式</tag>
      </tags>
  </entry>
  <entry>
    <title>关于meta</title>
    <url>/2016/11/21/css/%E5%85%B3%E4%BA%8Emeta/</url>
    <content><![CDATA[<hr>
<span id="more"></span>
<p>1、<a href="http://m.tmall.com/">天猫</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;title&gt;天猫触屏版&lt;/title&gt; </span><br><span class="line">&lt;meta content=&quot;text/html; charset=utf-8&quot; http-equiv=&quot;Content-Type&quot;&gt;     </span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;             </span><br><span class="line">&lt;meta content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot; name=&quot;viewport&quot;&gt;     </span><br><span class="line">&lt;meta content=&quot;yes&quot; name=&quot;apple-mobile-web-app-capable&quot;&gt;     </span><br><span class="line">&lt;meta content=&quot;black&quot; name=&quot;apple-mobile-web-app-status-bar-style&quot;&gt;     </span><br><span class="line">&lt;meta content=&quot;telephone=no&quot; name=&quot;format-detection&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>2、<a href="http://m.taobao.com/">淘宝</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;title&gt;淘宝网触屏版&lt;/title&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;meta content=&quot;yes&quot; name=&quot;apple-mobile-web-app-capable&quot;&gt;</span><br><span class="line">&lt;meta content=&quot;yes&quot; name=&quot;apple-touch-fullscreen&quot;&gt;</span><br><span class="line">&lt;meta content=&quot;telephone=no&quot; name=&quot;format-detection&quot;&gt;</span><br><span class="line">&lt;meta content=&quot;black&quot; name=&quot;apple-mobile-web-app-status-bar-style&quot;&gt;</span><br><span class="line">&lt;meta property=&quot;wb:webmaster&quot; content=&quot;c51923015ca19eb1&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;author&quot; content=&quot;m.taobao.com&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;copyright&quot; content=&quot;Copyright ©m.taobao.com 版权所有&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;revisit-after&quot; content=&quot;1 days&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;keywords&quot; content=&quot;&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;description&quot; content=&quot;&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>3、<a href="http://m.jd.com/">京东</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;title&gt; 京东 - 手机版 &lt;/title&gt;</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0;&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;Keywords&quot; content=&quot;手机购物,WAP商城,日用百货,3C家电,汽车用品&quot;&gt;&lt;meta name=&quot;description&quot; content=&quot;京东手机版提供了包括数码、家电、手机、电脑配件、网络产品、日用百货等数万种商品，手机快捷购物，就上京东手机版。&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>4、<a href="http://3g.163.com/">网易</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;title&gt;手机网易网&lt;/title&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;meta content=&quot;width=device-width,user-scalable=no&quot; name=&quot;viewport&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;apple-itunes-app&quot; content=&quot;app-id=425349261&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>5、<a href="http://m.baidu.com/">百度</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no&quot;&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>meta</tag>
      </tags>
  </entry>
  <entry>
    <title>使用CSS将图片转换成黑白(灰色、置灰)</title>
    <url>/2016/08/18/css/%E4%BD%BF%E7%94%A8CSS%E5%B0%86%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E6%88%90%E9%BB%91%E7%99%BD(%E7%81%B0%E8%89%B2%E3%80%81%E7%BD%AE%E7%81%B0)/</url>
    <content><![CDATA[<hr>
<span id="more"></span>
<h3 id="1、CSS3-greyscale-滤镜"><a href="#1、CSS3-greyscale-滤镜" class="headerlink" title="1、CSS3 greyscale 滤镜"></a>1、CSS3 greyscale 滤镜</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;mm1.jpg&quot;</span> /&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;mm1.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;gray&quot;</span> /&gt;</span></span></span><br><span class="line">.gray &#123; </span><br><span class="line">    -webkit-filter: grayscale(<span class="number">100</span>%);</span><br><span class="line">    -moz-filter: grayscale(<span class="number">100</span>%);</span><br><span class="line">    -ms-filter: grayscale(<span class="number">100</span>%);</span><br><span class="line">    -o-filter: grayscale(<span class="number">100</span>%);</span><br><span class="line">    filter: grayscale(<span class="number">100</span>%);</span><br><span class="line">    filter: gray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2、SVG滤镜"><a href="#2、SVG滤镜" class="headerlink" title="2、SVG滤镜"></a>2、SVG滤镜</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//新建一个gray.svg文件,拷贝进去如下的XML代码:</span></span><br><span class="line">&lt;svg version=<span class="string">&quot;1.1&quot;</span> xmlns=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">filter</span> <span class="attr">id</span>=<span class="string">&quot;grayscale&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">feColorMatrix</span> <span class="attr">type</span>=<span class="string">&quot;matrix&quot;</span> <span class="attr">values</span>=<span class="string">&quot;0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span></span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//CSS调用代码：</span></span><br><span class="line"><span class="attr">filter</span>: url(gray.svg#grayscale);</span><br></pre></td></tr></table></figure>
<h3 id="3、IE浏览器-IE7-9都是支持的"><a href="#3、IE浏览器-IE7-9都是支持的" class="headerlink" title="3、IE浏览器(IE7~9都是支持的)"></a>3、IE浏览器(IE7~9都是支持的)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">css   filter: gray;</span><br></pre></td></tr></table></figure>
<p>###4、一统江山（完全兼容）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引用</span></span><br><span class="line">&lt;script src=<span class="string">&quot;http://james.padolsey.com/demos/grayscale/grayscale.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">HTML代码：</span><br><span class="line">&lt;img src=<span class="string">&quot;/image/study/s/s256/mm1.jpg&quot;</span> /&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/image/study/s/s256/mm1.jpg&quot;</span> <span class="attr">id</span>=<span class="string">&quot;gray&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="comment">//JS代码：</span></span><br><span class="line">grayscale(<span class="built_in">document</span>.getElementById(<span class="string">&quot;gray&quot;</span>));</span><br><span class="line"><span class="comment">//jq代码：</span></span><br><span class="line">grayscale($(<span class="string">&quot;#thisImage&quot;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>图片转换</tag>
      </tags>
  </entry>
  <entry>
    <title>自己写的一些复用样式</title>
    <url>/2017/01/19/css/%E8%87%AA%E5%B7%B1%E5%86%99%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A4%8D%E7%94%A8%E6%A0%B7%E5%BC%8F/</url>
    <content><![CDATA[<hr>
<span id="more"></span>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;script src=&quot;js/rem.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script src=&quot;js/jquery-1.11.3.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;style&gt;</span><br><span class="line">            *&#123;padding:0;margin:0;&#125;</span><br><span class="line">            //1、确定取消</span><br><span class="line">            .delDiv&#123;width:11.52rem;height:4.48rem;text-align:center;color:#000;background:#F7F7F7;-moz-border-radius:0.555rem;-webkit-border-radius:0.555rem;border-radius:0.555rem;font-size:0.725rem;position: absolute;top:0;left:0;right:0;bottom:0;margin:auto;z-index:10000;&#125;</span><br><span class="line">            .delDiv .delDiv_tip&#123;width:100%;height:2.56rem;line-height:2.56rem;border-bottom:1px solid #e2e2e2;&#125;</span><br><span class="line">            .delDiv .delDiv_info&#123;width:100%;height:1.877rem;line-height:1.877rem;&#125;</span><br><span class="line">            .delDiv .delDiv_info .delDiv_info_left&#123;width:50%;height:1.877rem;text-align:center;float:left;border-right:1px solid #e2e2e2;box-sizing:border-box;&#125;</span><br><span class="line">            .delDiv .delDiv_info .delDiv_info_right&#123;width:50%;height:1.877rem;text-align:center;float:right;&#125;</span><br><span class="line">            .delDiv .delDiv_info .btn-green&#123;border:0;font-size:0.725rem;color:#3A79FF;background:none;outline:none;&#125;</span><br><span class="line">			</span><br><span class="line">            //.mask&#123;width:100%;height:100%;position:absolute;top:0;left:0;z-index:1000;background:#000;opacity:0.4;filter:alpha(opacity=40)&#125;</span><br><span class="line">			</span><br><span class="line">            .expurgate&#123;width:4.48rem;height:2.517rem;line-height:2.517rem;text-align:center;color:#fff;background:#000;opacity:0.8;filter:alpha(opacity=80);-moz-border-radius:0.427rem;-webkit-border-radius:0.427rem;border-radius:0.427rem;font-size:0.683rem;position: absolute;top:0;left:0;right:0;bottom:0;margin:auto;&#125;</span><br><span class="line">            </span><br><span class="line">            //2、确定</span><br><span class="line">            //弹出框</span><br><span class="line">            .popup&#123;width:11.52rem;height:4.48rem;text-align:center;color:#383838;background:#F7F7F7;-moz-border-radius: 0.555rem;-webkit-border-radius: 0.555rem;border-radius: 0.555rem;font-size:0.725rem;position: absolute;top:10rem;left:2.24rem;z-index:2000;&#125;</span><br><span class="line">            .popup .pop_pass&#123;display:table;width:11.52rem;height:2.56rem;border-bottom:1px solid #ccc;box-sizing:border-box;padding:0 1rem;&#125;</span><br><span class="line">            .popup .pop_pass .pass&#123;vertical-align:middle;display:table-cell;text-align:center;width:11.52rem;height:2.56rem;&#125;</span><br><span class="line">            .popup .ok&#123;height:1.92rem;line-height:1.92rem;color:#3A79FF;&#125;</span><br><span class="line">            //遮罩层</span><br><span class="line">            .mask&#123;width:100%;height:100%;position:absolute;top:0;left:0;z-index:1000;background:#000;opacity:0.4;filter:alpha(opacity=40);&#125;</span><br><span class="line">		</span><br><span class="line">            //3、提示框</span><br><span class="line">            .hint&#123;display:table;width:7rem;height:2rem;padding:0.6rem;color:#fff;background:#000;opacity:0.8;filter:alpha(opacity=80);-moz-border-radius:0.427rem;-webkit-border-radius:0.427rem;border-radius:0.427rem;font-size:0.683rem;position: absolute;top:0;left:0;right:0;bottom:0;margin:auto;z-index: 10000;&#125;</span><br><span class="line">            .hint_txt&#123;vertical-align:middle;display:table-cell;text-align:center;width:7rem;height:2rem;&#125;</span><br><span class="line">		</span><br><span class="line">            //4、圆角</span><br><span class="line">            div&#123;-moz-border-radius:0.256rem;-webkit-border-radius:0.256rem;border-radius:0.256rem;&#125;</span><br><span class="line">	</span><br><span class="line">            //5、透明度</span><br><span class="line">            div&#123;opacity:0.3;filter:alpha(opacity=30);&#125; </span><br><span class="line">		</span><br><span class="line">            //6、placeholder颜色改变，字体大小改变</span><br><span class="line">            input:-moz-placeholder,textarea:-moz-placeholder&#123;color:#B5B5B6;font-size:0.64rem;&#125;   </span><br><span class="line">            input:-ms-input-placeholder,textarea:-ms-input-placeholder&#123;color:#B5B5B6;font-size:0.64rem;&#125;   </span><br><span class="line">            input::-webkit-input-placeholder,textarea::-webkit-input-placeholder&#123;color:#B5B5B6;font-size:0.64rem;&#125;</span><br><span class="line">	</span><br><span class="line">            //7、滚动去除卡顿及滚动条</span><br><span class="line">            .wrap&#123;overflow-x:hidden;overflow-y:scroll;-webkit-overflow-scrolling:touch;&#125;</span><br><span class="line">            .wrap::-webkit-scrollbar&#123;display:none;&#125;</span><br><span class="line">	</span><br><span class="line">            //8、水平垂直居中</span><br><span class="line">            div&#123;position: absolute;top:0;left:0;right:0;bottom:0;margin:auto;&#125;</span><br><span class="line">		</span><br><span class="line">            //9、背景渐变效果</span><br><span class="line">            div&#123;</span><br><span class="line">                background:-webkit-linear-gradient(#ffbb18, #ff353f);</span><br><span class="line">                background:-moz-linear-gradient(#ffbb18, #ff353f);</span><br><span class="line">                background:-o-linear-gradient(#ffbb18, #ff353f);</span><br><span class="line">                background:-webkit-gradient(linear, from(#ffbb18), to(#ff353f));</span><br><span class="line">                background:#ffbb18;</span><br><span class="line">                background:linear-gradient(#ffbb18, #ff353f);</span><br><span class="line">            &#125;</span><br><span class="line">		</span><br><span class="line">            //10、引入字体</span><br><span class="line">            @font-face &#123;</span><br><span class="line">                font-family:&#x27;shuweishufa&#x27;;</span><br><span class="line">                src: url(&#x27;fonts/shuweishufa.ttf&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line">            div&#123;</span><br><span class="line">                font-family:&quot;shuweishufa&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            //11、弹性盒布局</span><br><span class="line">        </span><br><span class="line">            //12、swiper轮播图</span><br><span class="line">        </span><br><span class="line">            //13、input框记住账号后背景为白色*/</span><br><span class="line">            input:-webkit-autofill&#123;-webkit-box-shadow: 0 0 0px 1000px white inset;&#125;</span><br><span class="line">        </span><br><span class="line">            //14、selsect框设置下拉按钮</span><br><span class="line">            .sel&#123;width:9rem;height:1.579rem;border:0;outline:none;font-size:0.597rem;background: #fff url(../img/xiala.png) no-repeat right center;background-size:9% 50%;padding-right:0.8rem;&#125;</span><br><span class="line">            </span><br><span class="line">            //15、去除默认样式</span><br><span class="line">            input[type=&quot;button&quot;], </span><br><span class="line">            input[type=&quot;submit&quot;],</span><br><span class="line">            input[type=&quot;reset&quot;],</span><br><span class="line">            input[type=&quot;text&quot;],</span><br><span class="line">            input[type=&quot;tel&quot;],</span><br><span class="line">            select,textarea&#123;-webkit-appearance:none;&#125;</span><br><span class="line">        </span><br><span class="line">            //16、背景全屏显示	</span><br><span class="line">            &#123;margin: 0;padding: 0;&#125;</span><br><span class="line">            html, body &#123;width:100%;height: 100%;overflow: hidden;&#125;</span><br><span class="line">            .cont &#123;height: 100%;height: 100%;background-image:url(&quot;slider-2.jpg&quot;);background-size:cover;overflow:auto;&#125;</span><br><span class="line"></span><br><span class="line">            //17、禁止选中复制	</span><br><span class="line">            .nocopy &#123;-moz-user-select:none;-webkit-user-select:none&#125;</span><br><span class="line"></span><br><span class="line">            //18、文本溢出隐藏</span><br><span class="line">            div&#123;white-space:nowrap;overflow:hidden;text-overflow: ellipsis;&#125;</span><br><span class="line">            </span><br><span class="line">            //19、多行隐藏</span><br><span class="line">            div&#123;display: -webkit-box;-webkit-box-orient: vertical;-webkit-line-clamp: 3;overflow: hidden;&#125;		</span><br><span class="line">        &lt;/style&gt;</span><br><span class="line">	&lt;/head&gt;</span><br><span class="line">	&lt;body&gt;</span><br><span class="line">            &lt;div&gt;1234567890&lt;/div&gt;</span><br><span class="line">            &lt;!--1、确定取消--&gt;		</span><br><span class="line">        &lt;!--&lt;div class=&quot;delDiv&quot; style=&quot;display:block;&quot;&gt;</span><br><span class="line">	        &lt;div class=&quot;delDiv_tip&quot;&gt;确认删除该图片吗？&lt;/div&gt;        </span><br><span class="line">	        &lt;div class=&quot;delDiv_info&quot;&gt;</span><br><span class="line">	            &lt;span id=&quot;&quot; class=&quot;delDiv_info_left&quot;&gt;</span><br><span class="line">	                &lt;input id=&quot;btnCancel&quot; type=&quot;button&quot; value=&quot;取 消&quot; class=&quot;btn-green&quot; /&gt;</span><br><span class="line">	            &lt;/span&gt;</span><br><span class="line">	            &lt;span id=&quot;&quot; class=&quot;delDiv_info_right&quot;&gt;</span><br><span class="line">	                &lt;input id=&quot;btnDelTrue&quot; type=&quot;button&quot; value=&quot;确 认&quot; class=&quot;btn-green&quot; /&gt;</span><br><span class="line">	            &lt;/span&gt;             </span><br><span class="line">	        &lt;/div&gt;</span><br><span class="line">	    &lt;/div&gt;</span><br><span class="line">		&lt;div class=&quot;expurgate&quot; style=&quot;display: none;&quot;&gt;删除成功&lt;/div&gt;</span><br><span class="line">		&lt;div class=&quot;mask&quot; style=&quot;display:block;&quot;&gt;&lt;/div&gt;--&gt;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	&lt;!--2、确定,不管一行还是两行都是垂直居中--&gt;</span><br><span class="line">		&lt;!--&lt;div class=&quot;popup&quot; style=&quot;display:block;&quot;&gt;</span><br><span class="line">			&lt;div class=&quot;pop_pass&quot;&gt;&lt;p class=&quot;pass&quot;&gt;虚拟购买人数不能大于当前虚拟在线人数1000&lt;/p&gt;&lt;/div&gt;</span><br><span class="line">			&lt;p class=&quot;ok&quot;&gt;确定&lt;/p&gt;</span><br><span class="line">		&lt;/div&gt;</span><br><span class="line">		&lt;div class=&quot;mask&quot; style=&quot;display:block;&quot;&gt;&lt;/div&gt;--&gt;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	&lt;!--3、提示框 ，不管一行还是两行都是垂直居中--&gt;</span><br><span class="line">		&lt;div class=&quot;hint&quot; style=&quot;display: none;&quot;&gt;&lt;p class=&quot;hint_txt&quot;&gt;抢购尚未开始,请注意抢购时间&lt;/p&gt;&lt;/div&gt;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	&lt;!--13、PC端--&gt;</span><br><span class="line">		&lt;!--&lt;input class=&quot;inp&quot; type=&quot;text&quot; onkeyup=&quot;clearNoNum(this)&quot;&gt;--&gt;</span><br><span class="line">		&lt;!--&lt;script&gt;</span><br><span class="line">			function clearNoNum(obj)&#123;  </span><br><span class="line">				obj.value = obj.value.replace(/[^\d.]/g,&quot;&quot;);  //清除“数字”和“.”以外的字符     </span><br><span class="line">				obj.value = obj.value.replace(/\.&#123;2,&#125;/g,&quot;.&quot;); //只保留第一个. 清除多余的 			</span><br><span class="line">				obj.value = obj.value.replace(/^\./g,&quot;&quot;);   //必须保证第一个为数字而不是. 				</span><br><span class="line">				obj.value = obj.value.replace(&quot;.&quot;,&quot;$#$&quot;).replace(/\./g,&quot;&quot;).replace(&quot;$#$&quot;,&quot;.&quot;);  //保证.只出现一次，而不能出现两次以上		 </span><br><span class="line">				obj.value = obj.value.replace(/^(\-)*(\d+)\.(\d\d).*$/,&#x27;$1$2.$3&#x27;);//只能输入两个小数   </span><br><span class="line">				if(obj.value.indexOf(&quot;.&quot;)&lt; 0 &amp;&amp; obj.value !=&quot;&quot;)&#123;//以上已经过滤，此处控制的是如果没有小数点，首位不能为类似于 01、02的金额  </span><br><span class="line">				 	obj.value= parseFloat(obj.value);  </span><br><span class="line">				&#125;  </span><br><span class="line">			&#125; </span><br><span class="line">		&lt;/script&gt;--&gt;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	&lt;!--14、移动端--&gt;				</span><br><span class="line">		&lt;!--&lt;input type=&quot;text&quot; class=&quot;inp&quot; /&gt;	</span><br><span class="line">		&lt;script&gt;</span><br><span class="line">			$(&quot;.inp&quot;).bind(&quot;input&quot;,&quot;onpropertychange&quot;,function()&#123;</span><br><span class="line">				$(this).val($(this).val().replace(/[^\d.]/g,&quot;&quot;));</span><br><span class="line">				$(this).val($(this).val().replace(/\.&#123;2,&#125;/g,&quot;.&quot;));</span><br><span class="line">				</span><br><span class="line">				$(this).val($(this).val().replace(/^\./g,&quot;&quot;));</span><br><span class="line">				</span><br><span class="line">				$(this).val($(this).val().replace(&quot;.&quot;,&quot;$#$&quot;).replace(/\./g,&quot;&quot;).replace(&quot;$#$&quot;,&quot;.&quot;)); </span><br><span class="line">				$(this).val($(this).val().replace(/^(\-)*(\d+)\.(\d\d).*$/,&#x27;$1$2.$3&#x27;));</span><br><span class="line">				if($(this).val().indexOf(&quot;.&quot;)&lt; 0 &amp;&amp; $(this).val() !=&quot;&quot;)&#123;</span><br><span class="line">					$(this).val(parseFloat($(this).val()));</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)	</span><br><span class="line">		&lt;/script&gt;	--&gt;</span><br><span class="line">	</span><br><span class="line">	&lt;!--15、复制按钮，复制input内容--&gt;</span><br><span class="line">	&lt;!--&lt;input type=&quot;text&quot; readonly id=&quot;text&quot; value=&quot;1234566&quot; /&gt;</span><br><span class="line">	&lt;button onclick=&quot;myCopy()&quot;&gt;点击复制文本框内的内容&lt;/button&gt;&lt;br&gt;</span><br><span class="line">	&lt;script&gt;</span><br><span class="line">		function myCopy()&#123;</span><br><span class="line">			var ele = document.getElementById(&quot;text&quot;);</span><br><span class="line">			ele.select();</span><br><span class="line">			document.execCommand(&quot;Copy&quot;);</span><br><span class="line">			alert(&quot;复制成功&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">	&lt;/script&gt;	--&gt;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	&lt;/body&gt;</span><br><span class="line">	&lt;script&gt;</span><br><span class="line">	//1、确定取消	</span><br><span class="line">		$(&quot;#btnDelTrue&quot;).click(function()&#123;</span><br><span class="line">			$(&quot;.delDiv&quot;).hide();</span><br><span class="line">			$(&quot;.mask&quot;).hide();</span><br><span class="line">			/*删除图片*/</span><br><span class="line">			$(&quot;.expurgate&quot;).show(0).delay(1000).hide(0);				</span><br><span class="line">		&#125;)</span><br><span class="line">		$(&quot;#btnCancel&quot;).click(function()&#123;</span><br><span class="line">			$(&quot;.delDiv&quot;).hide();</span><br><span class="line">			$(&quot;.mask&quot;).hide();</span><br><span class="line">		&#125;)</span><br><span class="line">		</span><br><span class="line">	//2、确定</span><br><span class="line">	$(&quot;.ok&quot;).click(function()&#123;</span><br><span class="line">    	$(&quot;.popup&quot;).hide();</span><br><span class="line">        $(&quot;.mask&quot;).hide();</span><br><span class="line">    &#125;)</span><br><span class="line">	</span><br><span class="line">	//3、提示框</span><br><span class="line">	$(&quot;.hint&quot;).show(0).delay(1000).hide(0);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	//16、刷新当前页面</span><br><span class="line">	window.location.reload();</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	//17、判断是否在微信&amp;&amp;安卓上，是底部隐藏，否显示		</span><br><span class="line">//	function is_weixn(id)&#123;</span><br><span class="line">//		var u = navigator.userAgent;</span><br><span class="line">//	    var ua = navigator.userAgent.toLowerCase();    </span><br><span class="line">//	    if((ua.match(/MicroMessenger/i)==&quot;micromessenger&quot;)&amp;&amp;(u.indexOf(&#x27;Android&#x27;)&gt;-1)) &#123;//判断微信终端&amp;&amp;android终端</span><br><span class="line">//	    	var oHeight = $(document).height(); //浏览器当前的高度  </span><br><span class="line">//		    $(window).resize(function()&#123;</span><br><span class="line">//				if($(document).height() &lt; oHeight)&#123;</span><br><span class="line">//		        	$(id).hide();</span><br><span class="line">//				&#125;else&#123;		     </span><br><span class="line">//		    		$(id).show();</span><br><span class="line">//				&#125;</span><br><span class="line">//		    &#125;) </span><br><span class="line">//	    &#125;   </span><br><span class="line">//	&#125;</span><br><span class="line">//	is_weixn(&quot;.btn&quot;);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	//18、滚动条	</span><br><span class="line">//	function scroll()&#123;</span><br><span class="line">//		var myscroll;</span><br><span class="line">//		function loaded()&#123;</span><br><span class="line">//			setTimeout(function()&#123;</span><br><span class="line">//				myscroll=new IScroll(&quot;.wrap&quot;,&#123;</span><br><span class="line">//					click:true,</span><br><span class="line">//				&#125;)</span><br><span class="line">//			&#125;,100);</span><br><span class="line">//		&#125;		</span><br><span class="line">//		window.addEventListener(&quot;load&quot;,loaded,false);</span><br><span class="line">//	&#125;</span><br><span class="line">//	scroll();</span><br><span class="line"></span><br><span class="line">	//19、判断pc还是移动端，公安备号显示与隐藏</span><br><span class="line">//	function goPAGE() &#123;</span><br><span class="line">//	    if ((navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i))) &#123;</span><br><span class="line">//	        $(&quot;.police&quot;).hide(); //移动端</span><br><span class="line">//	    &#125;</span><br><span class="line">//	    else &#123;</span><br><span class="line">//	        $(&quot;.police&quot;).show();//pc端</span><br><span class="line">//	    &#125;</span><br><span class="line">//	&#125;</span><br><span class="line">//	goPAGE();</span><br><span class="line"></span><br><span class="line">	//20、倒计时加零</span><br><span class="line">//  function add_zero(n)&#123;</span><br><span class="line">//      return n &lt; 10 ? &#x27;0&#x27;+ n : n;</span><br><span class="line">//  &#125;</span><br><span class="line"></span><br><span class="line">	//21、on绑定click事件在苹果手机失效的问题</span><br><span class="line">	//方法:&#123;cursor:pointer&#125;苹果有这么个设置,鼠标放上去，能够出现“手”型的图标才被认作可以使用点击事件</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	//22、通过判断浏览器的userAgent，用正则来判断是否是ios和Android客户端	</span><br><span class="line">//	    var u = navigator.userAgent;</span><br><span class="line">//	    var isAndroid = u.indexOf(&#x27;Android&#x27;) &gt; -1 || u.indexOf(&#x27;Adr&#x27;) &gt; -1; //android终端</span><br><span class="line">//	    var isiOS = !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/); //ios终端</span><br><span class="line">//	    alert(&#x27;是否是Android：&#x27;+isAndroid);</span><br><span class="line">//	    alert(&#x27;是否是iOS：&#x27;+isiOS);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	//23、判断iPhone|iPad|iPod|iOS|Android客户端</span><br><span class="line">//		if (/(iPhone|iPad|iPod|iOS)/i.test(navigator.userAgent)) &#123;  //判断iPhone|iPad|iPod|iOS</span><br><span class="line">    		//alert(navigator.userAgent);  </span><br><span class="line">//   			 window.location.href =&quot;iPhone.html&quot;;</span><br><span class="line">//		&#125; else if (/(Android)/i.test(navigator.userAgent)) &#123;   //判断Android</span><br><span class="line">    		//alert(navigator.userAgent); </span><br><span class="line">//    		window.location.href =&quot;Android.html&quot;;</span><br><span class="line">//		&#125; else &#123;  //pc</span><br><span class="line">//    		window.location.href =&quot;pc.html&quot;;</span><br><span class="line">//		&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	//24、点击键盘backspace键清空验证码</span><br><span class="line">		//动态</span><br><span class="line">		$(document).on(&quot;keydown&quot;,&quot;.information_txt&quot;,function(event)&#123;</span><br><span class="line">			event=event||window.event;</span><br><span class="line">		    if (event.keyCode == 8) &#123;	    </span><br><span class="line">		        $(this).val(&quot;&quot;)</span><br><span class="line">		    &#125;</span><br><span class="line">		&#125;)</span><br><span class="line">		//不动态</span><br><span class="line">	//	$(&#x27;.information_txt&#x27;).keydown(function (event) &#123;</span><br><span class="line">	//	    event=event||window.event;</span><br><span class="line">	//	    if (event.keyCode == 8) &#123;	    </span><br><span class="line">	//	        $(this).val(&quot;&quot;)</span><br><span class="line">	//	    &#125;</span><br><span class="line">	//	&#125;);</span><br><span class="line">	</span><br><span class="line">	//25、复选框遍历选中的个数</span><br><span class="line">//	var n=0;</span><br><span class="line">//  for(var i=0; i&lt; $(&quot;.gou&quot;).length;i++)&#123;</span><br><span class="line">//      if($(&quot;.gou&quot;)[i].checked)&#123;</span><br><span class="line">//          n++;</span><br><span class="line">//      &#125;</span><br><span class="line">//  &#125;</span><br><span class="line"></span><br><span class="line">	//26、复选框遍历选中的个数的值</span><br><span class="line">//	for(var j=0; j&lt; $(&quot;.gou&quot;).length;j++)&#123;</span><br><span class="line">//      if($(&quot;.gou&quot;)[j].checked)&#123;</span><br><span class="line">//        var id=$(&quot;.gou&quot;)[j].value;</span><br><span class="line">//      &#125;</span><br><span class="line">//  &#125;</span><br><span class="line"></span><br><span class="line">	//27、复选框遍历选中的个数的值拼成字符串</span><br><span class="line">//	for(var j=0; j&lt; $(&quot;.gou&quot;).length;j++)&#123;</span><br><span class="line">//      if($(&quot;.gou&quot;)[j].checked)&#123;</span><br><span class="line">//          var id=$(&quot;.gou&quot;)[j].value;</span><br><span class="line">//          var s=s+id+&quot;,&quot;;</span><br><span class="line">//      &#125;</span><br><span class="line">//  &#125;</span><br><span class="line">//    var ID=s.substr(0, s.length - 1);//最后一个逗号删除</span><br><span class="line"></span><br><span class="line">	//28、json数据拿取</span><br><span class="line">//	info:&#123;1:&#123;name:&quot;生产管理&quot;,sm_id:[&quot;生产二维码&quot;,&quot;添加商品&quot;]&#125;&#125;</span><br><span class="line">//	 var obj=data.info;</span><br><span class="line">//	 for (i in obj)&#123;</span><br><span class="line">//      console.log(obj);</span><br><span class="line">//       console.log(obj[i]);</span><br><span class="line">//      console.log(obj[i].name);</span><br><span class="line">//      console.log(obj[i].sm_id);</span><br><span class="line">//      var s2=&#x27;&lt;div style=&quot;margin: 10px 0;color: #1aad1a&quot;&gt;&lt;label class=&quot;checkbox-inline&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled checked /&gt;&#x27;+obj[i].name+&#x27;&lt;/label&gt;&lt;/div&gt;&#x27;</span><br><span class="line">//      var arr=obj[i].sm_id;</span><br><span class="line">//      var s3=&#x27;&#x27;;</span><br><span class="line">//      for(var k=0;k&lt;arr.length;k++)&#123;</span><br><span class="line">//          var s3=s3+ &#x27;&lt;label class=&quot;checkbox-inline&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled checked /&gt;&#x27;+arr[k]+&#x27;&lt;/label&gt;&#x27;</span><br><span class="line">//      &#125;</span><br><span class="line">//      $(&quot;.main_ul&quot;).append(&quot;&lt;li class=&#x27;main_li&#x27;&gt;&quot;+s2+&quot;&lt;div style=&#x27;margin-left:40px&#x27;&gt;&quot;+s3+&quot;&lt;/div&gt;&lt;li&gt;&quot;);</span><br><span class="line">//  &#125;</span><br><span class="line">	//29、复选框</span><br><span class="line">//		$(&#x27;.all&#x27;).click(function () &#123;</span><br><span class="line">//	        var id = $(this).attr(&#x27;title&#x27;);</span><br><span class="line">//	        $(&#x27;input[abc=&#x27;+id+&#x27;]&#x27;).prop(&#x27;checked&#x27;,this.checked);</span><br><span class="line">//	    &#125;);</span><br><span class="line">//	    $(&#x27;.gou&#x27;).click(function () &#123;</span><br><span class="line">//	        var num = $(this).attr(&#x27;abc&#x27;);</span><br><span class="line">//	        var n=0;</span><br><span class="line">//	        for(var i=0; i&lt;$(&#x27;input[abc=&#x27;+num+&#x27;]&#x27;).length;i++)&#123;</span><br><span class="line">//	            if($(&#x27;input[abc=&#x27;+num+&#x27;]&#x27;)[i].checked)&#123;</span><br><span class="line">//	                n++;</span><br><span class="line">//	            &#125;</span><br><span class="line">//	        &#125;</span><br><span class="line">//	        if(n&gt;0)&#123;</span><br><span class="line">//	            $(&#x27;input[title=&#x27;+num+&#x27;]&#x27;).prop(&quot;checked&quot;, true);</span><br><span class="line">//	        &#125;else&#123;</span><br><span class="line">//	            $(&#x27;input[title=&#x27;+num+&#x27;]&#x27;).prop(&quot;checked&quot;, false);</span><br><span class="line">//	        &#125;</span><br><span class="line">//	    &#125;);</span><br><span class="line">		//30、每次绑定前先取消上次的绑定防止重复</span><br><span class="line">//		$(&#x27;#sub&#x27;).unbind(&#x27;click&#x27;).click(function () &#123;</span><br><span class="line">//  		...</span><br><span class="line">//		&#125;);</span><br><span class="line">		//31、map</span><br><span class="line">//		$(&quot;p&quot;).append( $(&quot;input&quot;).map(function()&#123;</span><br><span class="line">//    		return $(this).val();</span><br><span class="line">//  	&#125;).get().join(&quot;, &quot;) );</span><br><span class="line">	&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>css复用</tag>
        <tag>js复用</tag>
      </tags>
  </entry>
  <entry>
    <title>实战</title>
    <url>/2019/05/10/combat/combat/</url>
    <content><![CDATA[<hr>
<span id="more"></span>
<p>1、后台返回的数据是一维数组，而我们想要的是嵌套(二维以上)数组，协商不妥时😂</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// parentCode 对应父级 code</span></span><br><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">    &#123; <span class="attr">parentCode</span>: <span class="string">&#x27;-1&#x27;</span>, <span class="attr">code</span>: <span class="string">&#x27;0&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;父级1&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">parentCode</span>: <span class="string">&#x27;0&#x27;</span>, <span class="attr">code</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;父级1-1&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">parentCode</span>: <span class="string">&#x27;0&#x27;</span>, <span class="attr">code</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;父级1-2&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">parentCode</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">code</span>: <span class="string">&#x27;21&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;子级21&#x27;</span> &#125;,</span><br><span class="line">]</span><br><span class="line">		</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildTree</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> temp = &#123;&#125;</span><br><span class="line">    <span class="keyword">let</span> tree = &#123;&#125;</span><br><span class="line">    <span class="comment">// 数组转 键值对</span></span><br><span class="line">    arr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        temp[item.code] = item</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> tempKeys = <span class="built_in">Object</span>.keys(temp)</span><br><span class="line">    tempKeys.forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 获取当前项</span></span><br><span class="line">        <span class="keyword">let</span> item = temp[key]</span><br><span class="line">        <span class="comment">// 当前项 parentCode</span></span><br><span class="line">        <span class="keyword">let</span> _itemParentCode = item.parentCode</span><br><span class="line">        <span class="comment">// 获取父级项</span></span><br><span class="line">        <span class="keyword">let</span> parentItemByParentCode = temp[_itemParentCode]</span><br><span class="line">        <span class="keyword">if</span> (parentItemByParentCode) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!parentItemByParentCode.children) &#123;</span><br><span class="line">                parentItemByParentCode.children = []</span><br><span class="line">            &#125;</span><br><span class="line">            parentItemByParentCode.children.push(item)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tree[item.code] = item</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 对象转数组并返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(tree).map(<span class="function"><span class="params">key</span> =&gt;</span> tree[key])</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(buildTree (arr))</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         parentCode: &#x27;-1&#x27;, </span></span><br><span class="line"><span class="comment">//         code: &#x27;0&#x27;, </span></span><br><span class="line"><span class="comment">//         name: &#x27;父级1&#x27;, </span></span><br><span class="line"><span class="comment">//         children: [</span></span><br><span class="line"><span class="comment">//             &#123;</span></span><br><span class="line"><span class="comment">//                 parentCode: &#x27;0&#x27;, </span></span><br><span class="line"><span class="comment">//                 code: &#x27;1&#x27;, </span></span><br><span class="line"><span class="comment">//                 name: &#x27;父级1-1&#x27;,</span></span><br><span class="line"><span class="comment">//             &#125;,</span></span><br><span class="line"><span class="comment">//             &#123;</span></span><br><span class="line"><span class="comment">//                 parentCode: &#x27;0&#x27;, </span></span><br><span class="line"><span class="comment">//                 code: &#x27;2&#x27;, </span></span><br><span class="line"><span class="comment">//                 name: &#x27;父级1-2&#x27;, </span></span><br><span class="line"><span class="comment">//                 children: [</span></span><br><span class="line"><span class="comment">//                     parentCode: &#x27;2&#x27;, code: &#x27;21&#x27;, name: &#x27;子级21&#x27;</span></span><br><span class="line"><span class="comment">//                 ]</span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//         ],</span></span><br><span class="line"><span class="comment">//     &#125;,</span></span><br><span class="line"><span class="comment">// ]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//一级与二级相同的嵌套</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">     &#123; <span class="attr">date</span>: <span class="string">&#x27;2020-01-06&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;18&#x27;</span>&#125;,</span><br><span class="line">     &#123; <span class="attr">date</span>: <span class="string">&#x27;2020-01-06&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;25&#x27;</span>&#125;,</span><br><span class="line">     &#123; <span class="attr">date</span>: <span class="string">&#x27;2020-01-07&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;34&#x27;</span>&#125;,</span><br><span class="line">     &#123; <span class="attr">date</span>: <span class="string">&#x27;2020-01-07&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;18&#x27;</span>&#125;,</span><br><span class="line">     &#123; <span class="attr">date</span>: <span class="string">&#x27;2020-01-07&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;38&#x27;</span>&#125;,</span><br><span class="line">     &#123; <span class="attr">date</span>: <span class="string">&#x27;2020-01-08&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;26&#x27;</span>&#125;,</span><br><span class="line">     &#123; <span class="attr">date</span>: <span class="string">&#x27;2020-01-09&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;24&#x27;</span>&#125;</span><br><span class="line">   ]</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildNest</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">let</span> dataArr = [];</span><br><span class="line">	arr.map(<span class="function"><span class="params">mapItem</span> =&gt;</span> &#123;</span><br><span class="line">	  <span class="keyword">if</span> (dataArr.length == <span class="number">0</span>) &#123;</span><br><span class="line">		  dataArr.push(&#123; <span class="attr">date</span>: mapItem.date, <span class="attr">List</span>: [mapItem] &#125;)</span><br><span class="line">	  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		 <span class="keyword">let</span> res = dataArr.some(<span class="function"><span class="params">item</span>=&gt;</span> &#123;<span class="comment">//判断相同日期，有就添加到当前项</span></span><br><span class="line">		  <span class="keyword">if</span> (item.date == mapItem.date) &#123;</span><br><span class="line">			item.List.push(mapItem)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">		  &#125;</span><br><span class="line">		&#125;)</span><br><span class="line">		<span class="keyword">if</span> (!res) &#123;<span class="comment">//如果没找相同日期添加一个新对象</span></span><br><span class="line">			dataArr.push(&#123; <span class="attr">date</span>: mapItem.date, <span class="attr">List</span>: [mapItem] &#125;)</span><br><span class="line">		&#125;</span><br><span class="line">	  &#125;</span><br><span class="line">	&#125;) </span><br><span class="line">	<span class="keyword">return</span> dataArr</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         date:&#x27;2020-01-06&#x27;,</span></span><br><span class="line"><span class="comment">//         List: [</span></span><br><span class="line"><span class="comment">//             &#123; date: &#x27;2020-01-06&#x27;, age: &#x27;18&#x27;&#125;,</span></span><br><span class="line"><span class="comment">//             &#123; date: &#x27;2020-01-06&#x27;, age: &#x27;25&#x27;&#125;</span></span><br><span class="line"><span class="comment">//         ]</span></span><br><span class="line"><span class="comment">//     &#125;,</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         date:&#x27;2020-01-07&#x27;,</span></span><br><span class="line"><span class="comment">//         List: [</span></span><br><span class="line"><span class="comment">//             &#123; date: &#x27;2020-01-07&#x27;, age: &#x27;34&#x27;&#125;,</span></span><br><span class="line"><span class="comment">//             &#123; date: &#x27;2020-01-07&#x27;, age: &#x27;18&#x27;&#125;,</span></span><br><span class="line"><span class="comment">//             &#123; date: &#x27;2020-01-07&#x27;, age: &#x27;38&#x27;&#125;,</span></span><br><span class="line"><span class="comment">//         ]</span></span><br><span class="line"><span class="comment">//     &#125;,</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         date:&#x27;2020-01-08&#x27;,</span></span><br><span class="line"><span class="comment">//         List: [</span></span><br><span class="line"><span class="comment">//                 &#123; date: &#x27;2020-01-08&#x27;, age: &#x27;26&#x27;&#125;,</span></span><br><span class="line"><span class="comment">//         ]</span></span><br><span class="line"><span class="comment">//     &#125;,</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         date:&#x27;2020-01-09&#x27;,</span></span><br><span class="line"><span class="comment">//         List: [</span></span><br><span class="line"><span class="comment">//             &#123; date: &#x27;2020-01-09&#x27;, age: &#x27;24&#x27; &#125;</span></span><br><span class="line"><span class="comment">//         ]</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// ]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="在Element-ui的table表格中，如何让分页的序号延续上一页的序号"><a href="#在Element-ui的table表格中，如何让分页的序号延续上一页的序号" class="headerlink" title="在Element-ui的table表格中，如何让分页的序号延续上一页的序号"></a>在Element-ui的table表格中，如何让分页的序号延续上一页的序号</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">问题：在使用element-ui 的table表格时，会发现它每一页的序号都会从<span class="number">1</span>开始，那怎么才能让它延续上一页的序号呢？</span><br><span class="line"></span><br><span class="line">利用计算属性解决问题：</span><br><span class="line"></span><br><span class="line">&lt;el-table-column type=<span class="string">&quot;index&quot;</span> :index=<span class="string">&quot;hIndex&quot;</span> label=<span class="string">&quot;序号&quot;</span> width=<span class="string">&quot;120&quot;</span> /&gt;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">page</span>: <span class="number">1</span>, <span class="comment">//当前页数</span></span><br><span class="line">      <span class="attr">pagesize</span>: <span class="number">2</span>, <span class="comment">//每页两条数据</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 计算属性</span></span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">hIndex</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 当前页数 - 1 * 每页数据条数 + 1</span></span><br><span class="line">      <span class="keyword">return</span> (<span class="built_in">this</span>.page - <span class="number">1</span>) * <span class="built_in">this</span>.pagesize + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">利用函数方法解决问题</span><br><span class="line"></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="function"><span class="title">hIndex</span>(<span class="params">index</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 当前页数 - 1 * 每页数据条数 + index + 1 （ index 是索引值，从0开始）</span></span><br><span class="line">      <span class="keyword">return</span> (<span class="built_in">this</span>.page - <span class="number">1</span>) * <span class="built_in">this</span>.pagesize + index + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="element-tree添加图标"><a href="#element-tree添加图标" class="headerlink" title="element tree添加图标"></a>element tree添加图标</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;svg-icon icon-<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;tree&quot;</span> /&gt;  可换成对应的icon图标</span><br><span class="line"></span><br><span class="line">添加</span><br><span class="line">&lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;custom-tree-node&quot;</span> slot-scope=<span class="string">&quot;&#123; node &#125;&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">svg-icon</span> <span class="attr">icon-class</span>=<span class="string">&quot;tree&quot;</span> /&gt;</span>&#123;&#123; node.label &#125;&#125; <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">完整</span><br><span class="line">&lt;el-tree :data=<span class="string">&quot;deptOptions&quot;</span> :props=<span class="string">&quot;defaultProps&quot;</span> :expand-on-click-node=<span class="string">&quot;false&quot;</span> :filter-node-method=<span class="string">&quot;filterNode&quot;</span> ref=<span class="string">&quot;tree&quot;</span> <span class="keyword">default</span>-expand-all highlight-current @node-click=<span class="string">&quot;handleNodeClick&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;custom-tree-node&quot;</span> <span class="attr">slot-scope</span>=<span class="string">&quot;&#123; node &#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">svg-icon</span> <span class="attr">icon-class</span>=<span class="string">&quot;tree&quot;</span> /&gt;</span>&#123;&#123; node.label &#125;&#125; <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;/el-tree&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>combat</category>
      </categories>
      <tags>
        <tag>combat</tag>
      </tags>
  </entry>
  <entry>
    <title>echarts用法</title>
    <url>/2019/06/03/echarts/echarts/</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<h3 id="echarts用法"><a href="#echarts用法" class="headerlink" title="echarts用法"></a>echarts用法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//安装 </span></span><br><span class="line">npm install echarts --save</span><br><span class="line"></span><br><span class="line"><span class="comment">//引用</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> echarts <span class="keyword">from</span> <span class="string">&#x27;echarts&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="keyword">var</span> echart = echarts.init(dom节点,主题)</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化 指定图表的大小  </span></span><br><span class="line"><span class="keyword">var</span> myChart = echarts.init(dom节点, <span class="literal">null</span>, &#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">600</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">400</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//响应容器大小的变化  可以监听页面的 resize 事件获取浏览器大小改变的事件，然后调用 echartsInstance.resize</span></span><br><span class="line"><span class="keyword">var</span> myChart = echarts.init(dom节点);</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;resize&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    myChart.resize();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义选项option</span></span><br><span class="line"><span class="keyword">var</span> option = &#123;</span><br><span class="line">    <span class="comment">//标题</span></span><br><span class="line">    <span class="attr">title</span>: &#123;</span><br><span class="line">        <span class="attr">text</span>: <span class="string">&#x27;xx图表&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//工具箱</span></span><br><span class="line">    <span class="attr">toolbox</span>: &#123;</span><br><span class="line">        <span class="comment">// 显示工具箱</span></span><br><span class="line">        <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">feature</span>: &#123;</span><br><span class="line">            <span class="comment">// 数据缩放</span></span><br><span class="line">            <span class="attr">dataZoom</span>: &#123;</span><br><span class="line">                <span class="attr">yAxisIndex</span>: <span class="string">&#x27;none&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 数据视图只读</span></span><br><span class="line">            <span class="attr">dataView</span>: &#123; <span class="attr">readOnly</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">            <span class="comment">// 魔法类型</span></span><br><span class="line">            <span class="attr">magicType</span>: &#123; <span class="attr">type</span>: [<span class="string">&#x27;line&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>] &#125;,</span><br><span class="line">            <span class="comment">//  重置</span></span><br><span class="line">            <span class="attr">restore</span>: &#123;&#125;,</span><br><span class="line">            <span class="comment">// 保存图片</span></span><br><span class="line">            <span class="attr">saveAsImage</span>: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 提示 tooltip提示  trigger触发器 axis轴线触发，item 当前项触发</span></span><br><span class="line">    <span class="attr">tooltip</span>: &#123;</span><br><span class="line">        <span class="attr">trigger</span>:<span class="string">&quot;axis&quot;</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="comment">// 图例</span></span><br><span class="line">    <span class="attr">legend</span>: &#123;</span><br><span class="line">        <span class="attr">data</span>: [<span class="string">&#x27;...&#x27;</span>,...],</span><br><span class="line">        <span class="comment">//图例位置设置</span></span><br><span class="line">        <span class="comment">// Try &#x27;horizontal&#x27;</span></span><br><span class="line">        <span class="attr">orient</span>: <span class="string">&#x27;vertical&#x27;</span>,</span><br><span class="line">        <span class="attr">right</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">top</span>: <span class="string">&#x27;center&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//对于图例较多时，可以使用可滚动翻页的图例</span></span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;scroll&#x27;</span>,</span><br><span class="line">        <span class="attr">orient</span>: <span class="string">&#x27;vertical&#x27;</span>,</span><br><span class="line">        <span class="attr">right</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">top</span>: <span class="number">20</span>,</span><br><span class="line">        <span class="attr">bottom</span>: <span class="number">20</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">//图例设置背景色，字体颜色</span></span><br><span class="line">        <span class="attr">backgroundColor</span>: <span class="string">&#x27;#ccc&#x27;</span>,</span><br><span class="line">        <span class="attr">textStyle</span>: &#123;</span><br><span class="line">            <span class="attr">color</span>: <span class="string">&#x27;#ccc&#x27;</span></span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//图例的颜色标签rect/ circle / pin</span></span><br><span class="line">        <span class="attr">icon</span>: <span class="string">&#x27;rect&#x27;</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="comment">// x轴线</span></span><br><span class="line">	<span class="attr">xAxis</span>:&#123;</span><br><span class="line">        <span class="attr">data</span>:[<span class="string">&quot;周一&quot;</span>,<span class="string">&quot;周二&quot;</span>,<span class="string">&quot;周三&quot;</span>,<span class="string">&quot;周四&quot;</span>,...]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// y轴线</span></span><br><span class="line">	<span class="attr">yAxis</span>:&#123;&#125;,</span><br><span class="line">    <span class="comment">// 设置数据(系列数据)</span></span><br><span class="line">	<span class="attr">series</span>:[&#123;</span><br><span class="line">		<span class="comment">// 数据名称</span></span><br><span class="line">		<span class="attr">name</span>:<span class="string">&quot;睡眠时长&quot;</span>,</span><br><span class="line">		<span class="comment">// 类型为柱状图</span></span><br><span class="line">		<span class="attr">type</span>:<span class="string">&quot;bar&quot;</span>,</span><br><span class="line">		<span class="comment">// 数据data</span></span><br><span class="line">		<span class="attr">data</span>:[<span class="number">8</span>,<span class="number">10</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">8</span>]</span><br><span class="line">	&#125;,&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新选项</span></span><br><span class="line">echart.setOption(option)</span><br></pre></td></tr></table></figure>
<h3 id="图表的常用类型"><a href="#图表的常用类型" class="headerlink" title="图表的常用类型"></a>图表的常用类型</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//柱状图</span></span><br><span class="line"><span class="attr">type</span>: <span class="string">&quot;bar&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//折线图</span></span><br><span class="line"><span class="attr">type</span>: <span class="string">&quot;line&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//曲线图</span></span><br><span class="line"><span class="attr">type</span>: <span class="string">&quot;line&quot;</span></span><br><span class="line"><span class="attr">smooth</span>: <span class="literal">true</span> <span class="comment">//（ 折线图加上 smooth:true; 就会变成曲线图 ）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//面型图</span></span><br><span class="line"><span class="attr">type</span>: <span class="string">&quot;line&quot;</span>,</span><br><span class="line"><span class="attr">areaStyle</span>:&#123;<span class="attr">color</span>: <span class="string">&#x27;pink&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//饼形图</span></span><br><span class="line"><span class="attr">type</span>: <span class="string">&quot;pie&quot;</span>,</span><br><span class="line"><span class="comment">// radius:80,</span></span><br><span class="line"><span class="comment">// 半径</span></span><br><span class="line"><span class="attr">radius</span>:[<span class="number">80</span>,<span class="number">50</span>],</span><br><span class="line"><span class="comment">// 位移</span></span><br><span class="line"><span class="attr">left</span>:-<span class="number">80</span>,</span><br><span class="line"><span class="attr">top</span>:-<span class="number">270</span>,</span><br><span class="line"><span class="comment">//加上 radius:[80,50] 会变成环形图</span></span><br></pre></td></tr></table></figure>
<h3 id="颜色样式的控制"><a href="#颜色样式的控制" class="headerlink" title="颜色样式的控制"></a>颜色样式的控制</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//主题： light亮色 ，dark暗色</span></span><br><span class="line"><span class="keyword">var</span> echart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">&quot;container&quot;</span>),<span class="string">&quot;dark&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义主题</span></span><br><span class="line"><span class="keyword">var</span> echart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">&quot;container&quot;</span>),<span class="string">&quot;purple-passion&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//color调色盘</span></span><br><span class="line">在 option 中设置。可以设置全局的调色盘，也可以设置系列自己专属的调色盘。</span><br><span class="line"></span><br><span class="line">全局调色盘option.color</span><br><span class="line"></span><br><span class="line">option.color: color: [<span class="string">&quot;pink&quot;</span>, <span class="string">&quot;#ff0&quot;</span>, <span class="string">&quot;#f0f&quot;</span>, <span class="string">&quot;#0ff&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> option = &#123;</span><br><span class="line">    <span class="attr">color</span>: [<span class="string">&quot;#516b91&quot;</span>,<span class="string">&quot;#c24fa1&quot;</span>,<span class="string">&quot;#5af421&quot;</span>,<span class="string">&quot;#824d11&quot;</span>,<span class="string">&quot;#bac291&quot;</span>,<span class="string">&quot;#51a291&quot;</span>,<span class="string">&quot;#6b4f91&quot;</span>,<span class="string">&quot;#542211&quot;</span>,],</span><br><span class="line">    <span class="attr">titlet</span>: &#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">局部调色盘series.item.color</span><br><span class="line"></span><br><span class="line"><span class="attr">series</span>: [&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">    <span class="comment">// 此系列自己的调色盘。</span></span><br><span class="line">    <span class="attr">color</span>: [<span class="string">&#x27;#dd6b66&#x27;</span>, <span class="string">&#x27;#759aa0&#x27;</span>, <span class="string">&#x27;#e69d87&#x27;</span>, <span class="string">&#x27;#8dc1a9&#x27;</span>, <span class="string">&#x27;#ea7e53&#x27;</span>, <span class="string">&#x27;#eedd78&#x27;</span>]   </span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">itemStyle</span><br><span class="line"></span><br><span class="line"><span class="attr">itemStyle</span>:&#123;<span class="attr">color</span>:“#00f” &#125;</span><br><span class="line"></span><br><span class="line">高亮的样式emphasis</span><br><span class="line"><span class="comment">//在鼠标悬浮到图形元素上时，一般会出现高亮的样式。默认情况下，高亮的样式是根据普通样式自动生成的。但是高亮的样式也可以自己定义，主要是通过 emphasis 属性来定制。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//新版本写法</span></span><br><span class="line">option = &#123;</span><br><span class="line">  <span class="attr">series</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;scatter&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 普通样式。</span></span><br><span class="line">    <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">      <span class="comment">// 点的颜色。</span></span><br><span class="line">      <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">label</span>: &#123;</span><br><span class="line">      <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// 标签的文字。</span></span><br><span class="line">      <span class="attr">formatter</span>: <span class="string">&#x27;This is a normal label.&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 高亮样式。</span></span><br><span class="line">    <span class="attr">emphasis</span>: &#123;</span><br><span class="line">      <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">        <span class="comment">// 高亮时点的颜色。</span></span><br><span class="line">        <span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">label</span>: &#123;</span><br><span class="line">        <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 高亮时标签的文字。</span></span><br><span class="line">        <span class="attr">formatter</span>: <span class="string">&#x27;This is a emphasis label.&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ECharts4 以前写法 （官方说法：这种写法 仍然被兼容，但是，不再推荐）</span></span><br><span class="line">option = &#123;</span><br><span class="line">  <span class="attr">series</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;scatter&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">      <span class="comment">// 普通样式。</span></span><br><span class="line">      <span class="attr">normal</span>: &#123;</span><br><span class="line">        <span class="comment">// 点的颜色。</span></span><br><span class="line">        <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 高亮样式。</span></span><br><span class="line">      <span class="attr">emphasis</span>: &#123;</span><br><span class="line">        <span class="comment">// 高亮时点的颜色。</span></span><br><span class="line">        <span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">label</span>: &#123;</span><br><span class="line">      <span class="comment">// 普通样式。</span></span><br><span class="line">      <span class="attr">normal</span>: &#123;</span><br><span class="line">        <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 标签的文字。</span></span><br><span class="line">        <span class="attr">formatter</span>: <span class="string">&#x27;This is a normal label.&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 高亮样式。</span></span><br><span class="line">      <span class="attr">emphasis</span>: &#123;</span><br><span class="line">        <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 高亮时标签的文字。</span></span><br><span class="line">        <span class="attr">formatter</span>: <span class="string">&#x27;This is a emphasis label.&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体数据</span></span><br><span class="line">    data:[&#123;<span class="attr">value</span>:<span class="number">50</span>,<span class="attr">itemStyle</span>:样式&#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment">//系列数据</span></span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">&quot;分析表&quot;</span>,<span class="attr">data</span>:[],<span class="attr">itemStyle</span>:&#123;&#125;&#125;</span><br><span class="line">    <span class="attr">normal</span>:&#123;正常样式&#125;</span><br><span class="line">    <span class="attr">emphasis</span>:&#123;强调样式&#125;</span><br></pre></td></tr></table></figure>
<h3 id="特殊样式–-gt-渐变色"><a href="#特殊样式–-gt-渐变色" class="headerlink" title="特殊样式–&gt;渐变色"></a>特殊样式–&gt;渐变色</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义渐变</span></span><br><span class="line"><span class="keyword">var</span> linear = &#123;</span><br><span class="line">	<span class="attr">type</span>: <span class="string">&#x27;linear&#x27;</span>,</span><br><span class="line">	<span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="attr">x2</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="attr">y2</span>:<span class="number">1</span>,</span><br><span class="line">	<span class="attr">colorStops</span>: [&#123;</span><br><span class="line">		<span class="attr">offset</span>: <span class="number">0</span>, <span class="attr">color</span>: <span class="string">&#x27;#02bcff&#x27;</span> <span class="comment">// 0% 处的颜色</span></span><br><span class="line">	&#125;, </span><br><span class="line">    &#123;</span><br><span class="line">		<span class="attr">offset</span>: <span class="number">1</span>, <span class="attr">color</span>: <span class="string">&#x27;#5555ff&#x27;</span> <span class="comment">// 100% 处的颜色</span></span><br><span class="line">	&#125;],</span><br><span class="line">	<span class="attr">global</span>: <span class="literal">false</span> <span class="comment">// 缺省为 false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用渐变</span></span><br><span class="line"><span class="attr">itemStyle</span>:&#123;</span><br><span class="line">    <span class="attr">color</span>:linear,</span><br><span class="line">    <span class="attr">borderRadius</span>:[<span class="number">30</span>,<span class="number">30</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//例如：</span></span><br><span class="line"><span class="attr">series</span>:[&#123;</span><br><span class="line">    <span class="comment">// 数据名称</span></span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;睡眠时长&quot;</span>,</span><br><span class="line">    <span class="comment">// 类型为柱状图</span></span><br><span class="line">    <span class="attr">type</span>:<span class="string">&quot;bar&quot;</span>,</span><br><span class="line">    <span class="comment">// 数据data</span></span><br><span class="line">    <span class="attr">data</span>:[<span class="number">8</span>,<span class="number">10</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">8</span>],</span><br><span class="line">    <span class="comment">// color:[&quot;#ac4cff&quot;]</span></span><br><span class="line">    <span class="attr">itemStyle</span>:&#123;</span><br><span class="line">        <span class="attr">color</span>:linear,</span><br><span class="line">        <span class="attr">borderRadius</span>:[<span class="number">30</span>,<span class="number">30</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment">//或者</span></span><br><span class="line">        <span class="attr">normal</span>:&#123;<span class="attr">color</span>:<span class="string">&quot;#93da6c&quot;</span>&#125;,</span><br><span class="line">        <span class="attr">emphasis</span>:&#123;<span class="attr">color</span>:<span class="string">&quot;#bcff57&quot;</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>
<h3 id="label标签"><a href="#label标签" class="headerlink" title="label标签"></a>label标签</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">label</span>: &#123;</span><br><span class="line">    <span class="comment">//是否显示</span></span><br><span class="line">    <span class="attr">show</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="comment">//位置 inside内部，right右侧</span></span><br><span class="line">    <span class="attr">position</span>: <span class="string">&#x27;insideRight&#x27;</span>,</span><br><span class="line">    <span class="comment">//formatter格式</span></span><br><span class="line">    <span class="comment">//&#123;a&#125;系列名  &#123;b&#125;数据名  &#123;c&#125;数值  &#123;d&#125;百分百</span></span><br><span class="line">    <span class="attr">formatter</span>: <span class="string">&#x27;&#123;a&#125;\n&#123;c&#125;分&#x27;</span>,  </span><br><span class="line">    <span class="comment">// &#123;d&#125;百分比 &#123;big|内容&#125; 使用样式</span></span><br><span class="line">	<span class="attr">formatter</span>:<span class="string">&quot;&#123;big|&#123;d&#125;&#125;&#123;small|%&#125;\n&#123;b&#125;&quot;</span>,</span><br><span class="line">    <span class="comment">//富文本</span></span><br><span class="line">    <span class="attr">rich</span>: &#123;&#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//例句:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">series</span>:[&#123;</span><br><span class="line">    <span class="attr">type</span>:<span class="string">&quot;pie&quot;</span>,</span><br><span class="line">    <span class="attr">radius</span>:[<span class="number">200</span>,<span class="number">110</span>],</span><br><span class="line">    <span class="attr">data</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;百度&quot;</span>,</span><br><span class="line">        <span class="attr">value</span>:<span class="number">1200</span>,</span><br><span class="line">        <span class="attr">label</span>:&#123;</span><br><span class="line">            <span class="attr">show</span>:<span class="literal">true</span>,</span><br><span class="line">            <span class="attr">position</span>:<span class="string">&quot;center&quot;</span>,</span><br><span class="line">            <span class="comment">// &#123;d&#125;百分比 &#123;big|内容&#125; 使用样式</span></span><br><span class="line">            <span class="attr">formatter</span>:<span class="string">&quot;&#123;big|&#123;d&#125;&#125;&#123;small|%&#125;\n&#123;b&#125;&quot;</span>,</span><br><span class="line">            <span class="comment">// 定义样式（富文本）</span></span><br><span class="line">            <span class="attr">rich</span>:&#123;</span><br><span class="line">	            <span class="attr">big</span>:&#123;<span class="attr">color</span>:<span class="string">&quot;#f70&quot;</span>,<span class="attr">fontSize</span>:<span class="string">&quot;48px&quot;</span>,<span class="attr">fontWeight</span>:<span class="number">900</span>&#125;,</span><br><span class="line">	            <span class="attr">small</span>:&#123;<span class="attr">color</span>:<span class="string">&quot;#f70&quot;</span>&#125;</span><br><span class="line">		    &#125;</span><br><span class="line">		&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;其他&quot;</span>,</span><br><span class="line">        <span class="attr">value</span>:<span class="number">360</span>,</span><br><span class="line">        <span class="comment">// 样式灰色</span></span><br><span class="line">        <span class="attr">itemStyle</span>:&#123;<span class="attr">color</span>:<span class="string">&quot;#ccc&quot;</span>&#125;,</span><br><span class="line">        <span class="comment">// 标签不显示</span></span><br><span class="line">        <span class="attr">label</span>:&#123;<span class="attr">show</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">        <span class="comment">// 提示不显示</span></span><br><span class="line">        <span class="attr">tooltip</span>:&#123;<span class="attr">show</span>:<span class="literal">false</span>&#125;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>
<h3 id="缓动动画"><a href="#缓动动画" class="headerlink" title="缓动动画"></a>缓动动画</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">动画延迟 animationDelay</span><br><span class="line">动画时长 animationDuration</span><br><span class="line">动画缓动函数 animationEasing</span><br><span class="line"></span><br><span class="line"><span class="comment">//例如:</span></span><br><span class="line"><span class="attr">animationDelay</span>: <span class="function"><span class="keyword">function</span>(<span class="params">idx</span>) </span>&#123;</span><br><span class="line">	<span class="comment">// 越往后的数据延迟越大</span></span><br><span class="line">	<span class="keyword">return</span> idx * <span class="number">200</span>;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">animationDuration</span>: <span class="function"><span class="keyword">function</span>(<span class="params">idx</span>) </span>&#123;</span><br><span class="line">	<span class="comment">// 每小格动画的时候</span></span><br><span class="line">	<span class="keyword">return</span> idx * <span class="number">200</span>;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 弹性的方式出现动画</span></span><br><span class="line"><span class="attr">animationEasing</span>: <span class="string">&quot;bounceInOut&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//事件的监听</span></span><br><span class="line">echart.on（”事件名“，处理函数）</span><br><span class="line"></span><br><span class="line"><span class="comment">//例句：</span></span><br><span class="line"><span class="comment">// 每隔3秒执行一次move</span></span><br><span class="line"><span class="keyword">var</span> id = <span class="built_in">setInterval</span>(move,<span class="number">3000</span>);</span><br><span class="line">			</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 删除第一个</span></span><br><span class="line">    <span class="keyword">var</span> first = trends.shift();</span><br><span class="line">    <span class="comment">// 添加到最后</span></span><br><span class="line">    trends.push(first);</span><br><span class="line">    <span class="comment">// 更新option</span></span><br><span class="line">    option.xAxis.data = trends.slice(<span class="number">0</span>,<span class="number">20</span>).map(<span class="function"><span class="params">item</span>=&gt;</span><span class="built_in">String</span>(item.day).slice(-<span class="number">4</span>));</span><br><span class="line">    option.series[<span class="number">0</span>].data= trends.slice(<span class="number">0</span>,<span class="number">20</span>).map(<span class="function"><span class="params">item</span>=&gt;</span>item.sure_cnt);</span><br><span class="line">    <span class="comment">// 更新 图</span></span><br><span class="line">    echart.setOption(option);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 鼠标移入停止动画</span></span><br><span class="line">echart.on(<span class="string">&quot;mouseover&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(id)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 鼠标移出播放</span></span><br><span class="line">echart.on(<span class="string">&quot;mouseout&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    id = <span class="built_in">setInterval</span>(move,<span class="number">3000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//发送事件</span></span><br><span class="line">dispatchAction</span><br><span class="line"></span><br><span class="line">echart.dispatchAction(&#123;</span><br><span class="line">	<span class="attr">type</span>: <span class="string">&#x27;showTip&#x27;</span>,</span><br><span class="line">    <span class="comment">// 系列的 index，在 tooltip 的 trigger 为 axis 的时候可选。</span></span><br><span class="line">	<span class="attr">seriesIndex</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// 数据项的 index，如果不指定也可以通过 name 属性根据名称指定数据项</span></span><br><span class="line">	<span class="attr">dataIndex</span>: ind,</span><br><span class="line">    <span class="comment">// 可选，数据项名称，在有 dataIndex 的时候忽略				 </span></span><br><span class="line">	<span class="attr">position</span>:<span class="string">&quot;top&quot;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="基础柱状图"><a href="#基础柱状图" class="headerlink" title="基础柱状图"></a>基础柱状图</h3><p><img src="/images/bar001.png" alt="柱状图"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 01 导入js --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/echarts.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 03 设置容器的样式 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">			<span class="selector-id">#container</span>&#123;</span></span><br><span class="line"><span class="css">				<span class="attribute">width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">height</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="css">			&#125;</span></span><br><span class="line"><span class="css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 02 创建个容器 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">		<span class="comment">//04 实例化echarts</span></span></span><br><span class="line"><span class="javascript">		<span class="comment">// 4.1 创建一个实例</span></span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> echart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">&quot;container&quot;</span>))</span></span><br><span class="line"><span class="javascript">		<span class="comment">// 4.2 定义配置项</span></span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> option = &#123;</span></span><br><span class="line"><span class="javascript">			<span class="comment">// 图表的标题</span></span></span><br><span class="line"><span class="javascript">			<span class="attr">title</span>:&#123;</span></span><br><span class="line"><span class="javascript">				<span class="attr">text</span>:<span class="string">&quot;我的第一个图表&quot;</span></span></span><br><span class="line"><span class="javascript">			&#125;,</span></span><br><span class="line"><span class="javascript">			<span class="comment">// 图表的提示</span></span></span><br><span class="line"><span class="javascript">			<span class="attr">tooltip</span>:&#123;&#125;,</span></span><br><span class="line"><span class="javascript">			<span class="comment">// 图例</span></span></span><br><span class="line"><span class="javascript">			<span class="attr">legend</span>:&#123;<span class="attr">data</span>:[<span class="string">&quot;睡眠时长&quot;</span>]&#125;,</span></span><br><span class="line"><span class="javascript">			<span class="comment">// x轴线</span></span></span><br><span class="line"><span class="javascript">			<span class="attr">xAxis</span>:&#123;<span class="attr">data</span>:[<span class="string">&quot;周一&quot;</span>,<span class="string">&quot;周二&quot;</span>,<span class="string">&quot;周三&quot;</span>,<span class="string">&quot;周四&quot;</span>,<span class="string">&quot;周五&quot;</span>,<span class="string">&quot;周六&quot;</span>,<span class="string">&quot;周日&quot;</span>]&#125;,</span></span><br><span class="line"><span class="javascript">			<span class="comment">// y轴线</span></span></span><br><span class="line"><span class="javascript">			<span class="attr">yAxis</span>:&#123;&#125;,</span></span><br><span class="line"><span class="javascript">			<span class="comment">// 设置数据</span></span></span><br><span class="line"><span class="javascript">			<span class="attr">series</span>:[</span></span><br><span class="line"><span class="javascript">				&#123;</span></span><br><span class="line"><span class="javascript">					<span class="comment">// 数据名称</span></span></span><br><span class="line"><span class="javascript">					<span class="attr">name</span>:<span class="string">&quot;睡眠时长&quot;</span>,</span></span><br><span class="line"><span class="javascript">					<span class="comment">// 类型为柱状图</span></span></span><br><span class="line"><span class="javascript">					<span class="attr">type</span>:<span class="string">&quot;bar&quot;</span>,</span></span><br><span class="line"><span class="javascript">					<span class="comment">// 数据data</span></span></span><br><span class="line"><span class="javascript">					<span class="attr">data</span>:[<span class="number">8</span>,<span class="number">10</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">8</span>]</span></span><br><span class="line"><span class="javascript">					&#125;</span></span><br><span class="line"><span class="javascript">			]</span></span><br><span class="line"><span class="javascript">		&#125;</span></span><br><span class="line"><span class="javascript">		<span class="comment">// 4.3 更新配置</span></span></span><br><span class="line"><span class="javascript">		echart.setOption(option);</span></span><br><span class="line"><span class="javascript">		<span class="comment">// chart图表，set设置 Option选项  data数据 type类型 bar条（柱状条），series系列（数据） Axis轴线 xAxis水平轴线 </span></span></span><br><span class="line"><span class="javascript">		<span class="comment">// legend传奇（图例） tooltip 提示 init初始化 document文档 </span></span></span><br><span class="line"><span class="javascript">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="上述串联起来"><a href="#上述串联起来" class="headerlink" title="上述串联起来"></a>上述串联起来</h3><p><img src="/images/bar002.png" alt="疫情图"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/echarts.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"> </span></span><br><span class="line"><span class="css">		 <span class="selector-id">#container</span>&#123;</span></span><br><span class="line"><span class="css">			 <span class="attribute">width</span>: <span class="number">1200px</span>;</span></span><br><span class="line"><span class="css">			 <span class="attribute">height</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="css">		 &#125;</span></span><br><span class="line"><span class="css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./js/data.js&quot;</span>&gt;</span>			</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">			<span class="built_in">console</span>.log(data);</span></span><br><span class="line"><span class="javascript">			<span class="comment">// sort排序，map映射，slice(-4)切割后四位</span></span></span><br><span class="line"><span class="javascript">			<span class="keyword">var</span>  trends = data.data.trends.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a.day-b.day);</span></span><br><span class="line"><span class="javascript">			<span class="keyword">var</span> echart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">&quot;container&quot;</span>))</span></span><br><span class="line"><span class="javascript">			<span class="keyword">var</span> option = &#123;</span></span><br><span class="line"><span class="javascript">				<span class="attr">title</span>:&#123;<span class="attr">text</span>:<span class="string">&quot;新冠肺炎趋势&quot;</span>&#125;,</span></span><br><span class="line"><span class="javascript">				<span class="attr">legend</span>:&#123;<span class="attr">data</span>:[<span class="string">&quot;累计确诊&quot;</span>]&#125;,</span></span><br><span class="line"><span class="javascript">				<span class="attr">tooltip</span>:&#123;&#125;,</span></span><br><span class="line"><span class="javascript">				<span class="attr">yAxis</span>:&#123;&#125;,</span></span><br><span class="line"><span class="javascript">				<span class="comment">// slice(0,20),只显示前20条数据</span></span></span><br><span class="line"><span class="javascript">				<span class="attr">xAxis</span>:&#123;<span class="attr">data</span>:trends.slice(<span class="number">0</span>,<span class="number">20</span>).map(<span class="function"><span class="params">item</span>=&gt;</span><span class="built_in">String</span>(item.day).slice(-<span class="number">4</span>))&#125;,</span></span><br><span class="line"><span class="javascript">				<span class="attr">series</span>:[&#123;</span></span><br><span class="line"><span class="javascript">					<span class="attr">name</span>:<span class="string">&quot;累计确诊&quot;</span>,</span></span><br><span class="line"><span class="javascript">					<span class="attr">type</span>:<span class="string">&quot;bar&quot;</span>,</span></span><br><span class="line"><span class="javascript">					<span class="comment">// data:[&#123;name:&quot;&quot;,value:&quot;&quot;&#125;]</span></span></span><br><span class="line"><span class="javascript">					<span class="attr">data</span>:trends.slice(<span class="number">0</span>,<span class="number">20</span>).map(<span class="function"><span class="params">item</span>=&gt;</span>item.sure_cnt)</span></span><br><span class="line"><span class="javascript">				&#125;],</span></span><br><span class="line"><span class="javascript">				<span class="comment">// 每个执行延迟的时候（idx就是下标，随着下标的增大延迟会长）</span></span></span><br><span class="line"><span class="javascript">				<span class="attr">animationDelay</span>: <span class="function"><span class="keyword">function</span> (<span class="params">idx</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">				     <span class="comment">// 越往后的数据延迟越大</span></span></span><br><span class="line"><span class="javascript">				     <span class="keyword">return</span> idx * <span class="number">100</span>;</span></span><br><span class="line"><span class="javascript">				&#125;,</span></span><br><span class="line"><span class="javascript">				<span class="attr">animationDuration</span>:<span class="function"><span class="keyword">function</span>(<span class="params">idx</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="comment">// 每小格动画的时候</span></span></span><br><span class="line"><span class="javascript">					<span class="keyword">return</span> idx*<span class="number">100</span>;</span></span><br><span class="line"><span class="javascript">				&#125;,</span></span><br><span class="line"><span class="javascript">				<span class="comment">// 弹性的方式出现动画</span></span></span><br><span class="line"><span class="javascript">				<span class="attr">animationEasing</span>:<span class="string">&quot;bounceInOut&quot;</span></span></span><br><span class="line"><span class="javascript">			&#125;</span></span><br><span class="line"><span class="javascript">			<span class="comment">// 每隔3秒移动一个</span></span></span><br><span class="line"><span class="javascript">			<span class="comment">// 显示提示的下标</span></span></span><br><span class="line"><span class="javascript">			<span class="keyword">var</span> ind = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">			<span class="keyword">var</span> id = <span class="built_in">setInterval</span>(play,<span class="number">3000</span>);</span></span><br><span class="line"><span class="javascript">			<span class="comment">// 播放</span></span></span><br><span class="line"><span class="javascript">			<span class="function"><span class="keyword">function</span> <span class="title">play</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="comment">// 发送一个显示提示的动作</span></span></span><br><span class="line"><span class="javascript">				echart.dispatchAction(&#123;</span></span><br><span class="line"><span class="javascript">					<span class="attr">type</span>: <span class="string">&#x27;showTip&#x27;</span>,</span></span><br><span class="line"><span class="javascript">					<span class="comment">// 系列的 index，在 tooltip 的 trigger 为 axis 的时候可选。</span></span></span><br><span class="line"><span class="javascript">					<span class="attr">seriesIndex</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="javascript">					<span class="comment">// 数据项的 index，如果不指定也可以通过 name 属性根据名称指定数据项</span></span></span><br><span class="line"><span class="javascript">					<span class="attr">dataIndex</span>: ind,</span></span><br><span class="line"><span class="javascript">					<span class="comment">// 可选，数据项名称，在有 dataIndex 的时候忽略</span></span></span><br><span class="line"><span class="javascript">					 </span></span><br><span class="line"><span class="javascript">					<span class="attr">position</span>:<span class="string">&quot;top&quot;</span>,</span></span><br><span class="line"><span class="javascript">				&#125;)</span></span><br><span class="line"><span class="javascript">				<span class="comment">// 让ind加1</span></span></span><br><span class="line"><span class="javascript">				ind++;</span></span><br><span class="line"><span class="javascript">				<span class="comment">// 大于20就归0</span></span></span><br><span class="line"><span class="javascript">				<span class="keyword">if</span>(ind&gt;=<span class="number">20</span>)&#123;</span></span><br><span class="line"><span class="javascript">					ind=<span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">				&#125;</span></span><br><span class="line"><span class="javascript">			&#125;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 鼠标移入停止动画</span></span></span><br><span class="line"><span class="javascript">			echart.on(<span class="string">&quot;mouseover&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="built_in">clearInterval</span>(id)</span></span><br><span class="line"><span class="javascript">			&#125;)</span></span><br><span class="line"><span class="javascript">			<span class="comment">// 鼠标移出播放</span></span></span><br><span class="line"><span class="javascript">			echart.on(<span class="string">&quot;mouseout&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">				id = <span class="built_in">setInterval</span>(move, <span class="number">3000</span>);</span></span><br><span class="line"><span class="javascript">			&#125;)</span></span><br><span class="line"><span class="javascript">			<span class="comment">//更新选项</span></span></span><br><span class="line"><span class="javascript">			echart.setOption(option);</span></span><br><span class="line"><span class="javascript">		</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="气温和降水量间的趋势关系图"><a href="#气温和降水量间的趋势关系图" class="headerlink" title="气温和降水量间的趋势关系图"></a>气温和降水量间的趋势关系图</h3><p>图左侧的 y 轴代表东京月平均气温，右侧的 y 轴表示东京降水量，x 轴表示时间。两组 y 轴在一起，反映了平均气温和降水量间的趋势关系<br><img src="/images/bar003.jpg" alt="气温和降水"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">option = &#123;</span><br><span class="line">    <span class="comment">// 提示 tooltip提示  trigger触发器 axis轴线触发，item 当前项触发</span></span><br><span class="line">    <span class="attr">tooltip</span>: &#123;</span><br><span class="line">        <span class="attr">trigger</span>: <span class="string">&#x27;axis&#x27;</span>,</span><br><span class="line">        <span class="attr">axisPointer</span>: &#123; <span class="attr">type</span>: <span class="string">&#x27;cross&#x27;</span> &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 图例</span></span><br><span class="line">    <span class="attr">legend</span>: &#123;&#125;,</span><br><span class="line">    <span class="comment">// x轴线</span></span><br><span class="line">    <span class="attr">xAxis</span>: [&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">        <span class="comment">//刻度axisTick  -刻度线的长度，样式</span></span><br><span class="line">        <span class="attr">axisTick</span>: &#123;</span><br><span class="line">            <span class="attr">alignWithLabel</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">// length: 6,</span></span><br><span class="line">            <span class="comment">// lineStyle: &#123;</span></span><br><span class="line">            <span class="comment">//     type: &#x27;dashed&#x27;</span></span><br><span class="line">            <span class="comment">//     // ...</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">data</span>: [<span class="string">&#x27;1月&#x27;</span>,<span class="string">&#x27;2月&#x27;</span>,<span class="string">&#x27;3月&#x27;</span>,<span class="string">&#x27;4月&#x27;</span>,<span class="string">&#x27;5月&#x27;</span>,<span class="string">&#x27;6月&#x27;</span>,<span class="string">&#x27;7月&#x27;</span>,<span class="string">&#x27;8月&#x27;</span>,<span class="string">&#x27;9月&#x27;</span>,<span class="string">&#x27;10月&#x27;</span>,<span class="string">&#x27;11月&#x27;</span>,<span class="string">&#x27;12月&#x27;</span>]</span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="comment">// y轴线 --两个y轴</span></span><br><span class="line">    <span class="attr">yAxis</span>: [&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;降水量&#x27;</span>,</span><br><span class="line">        <span class="attr">min</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">max</span>: <span class="number">250</span>,</span><br><span class="line">        <span class="attr">position</span>: <span class="string">&#x27;right&#x27;</span>,</span><br><span class="line">        <span class="comment">// 刻度标签axisLabel -文字对齐方式，自定义刻度标签内容</span></span><br><span class="line">        <span class="attr">axisLabel</span>: &#123;</span><br><span class="line">            <span class="attr">formatter</span>: <span class="string">&#x27;&#123;value&#125; ml&#x27;</span>,</span><br><span class="line">            <span class="comment">// formatter: &#x27;&#123;value&#125; 元&#x27;,</span></span><br><span class="line">            <span class="comment">// align: &#x27;center&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//轴线axisLine -轴线两端的箭头，轴线的样式</span></span><br><span class="line">        <span class="comment">// axisLine: &#123;</span></span><br><span class="line">        <span class="comment">//     symbol: &#x27;arrow&#x27;,</span></span><br><span class="line">        <span class="comment">//     lineStyle: &#123;</span></span><br><span class="line">        <span class="comment">//         type: &#x27;dashed&#x27;</span></span><br><span class="line">        <span class="comment">//         // ...</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;温度&#x27;</span>,</span><br><span class="line">        <span class="attr">min</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">max</span>: <span class="number">25</span>,</span><br><span class="line">        <span class="attr">position</span>: <span class="string">&#x27;left&#x27;</span>,</span><br><span class="line">        <span class="attr">axisLabel</span>: &#123;</span><br><span class="line">            <span class="attr">formatter</span>: <span class="string">&#x27;&#123;value&#125; °C&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="attr">series</span>: [&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;降水量&#x27;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">        <span class="attr">yAxisIndex</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">data</span>: [<span class="number">6</span>, <span class="number">32</span>, <span class="number">70</span>, <span class="number">86</span>, <span class="number">68.7</span>, <span class="number">100.7</span>, <span class="number">125.6</span>, <span class="number">112.2</span>, <span class="number">78.7</span>, <span class="number">48.8</span>, <span class="number">36.0</span>, <span class="number">19.3</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;温度&#x27;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">        <span class="attr">smooth</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">yAxisIndex</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">data</span>: [<span class="number">6.0</span>,<span class="number">10.2</span>,<span class="number">10.3</span>,<span class="number">11.5</span>,<span class="number">10.3</span>,<span class="number">13.2</span>,<span class="number">14.3</span>,<span class="number">16.4</span>,<span class="number">18.0</span>,<span class="number">16.5</span>,<span class="number">12.0</span>,<span class="number">5.2</span>]</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="容器节点被销毁以及被重建时"><a href="#容器节点被销毁以及被重建时" class="headerlink" title="容器节点被销毁以及被重建时"></a>容器节点被销毁以及被重建时</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">假设页面中存在多个标签页，每个标签页都包含一些图表。当选中一个标签页的时候，其他标签页的内容在 DOM 中被移除了。这样，当用户再选中这些标签页的时候，就会发现图表“不见”了。</span><br><span class="line"></span><br><span class="line">本质上，这是由于图表的容器节点被移除导致的。即使之后该节点被重新添加，图表所在的节点也已经不存在了。</span><br><span class="line"></span><br><span class="line">正确的做法是，在图表容器被销毁之后，调用 echartsInstance.dispose 销毁实例，在图表容器重新被添加后再次调用 echarts.init 初始化。</span><br><span class="line"></span><br><span class="line">tips：在容器节点被销毁时，总是应调用 echartsInstance.dispose 以销毁实例释放资源，避免内存泄漏。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="地图"><a href="#地图" class="headerlink" title="地图"></a>地图</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>echarts</category>
      </categories>
      <tags>
        <tag>echarts</tag>
      </tags>
  </entry>
  <entry>
    <title>git的一些命令</title>
    <url>/2018/06/11/git/git%E7%9A%84%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<hr>
<p>git开发中必不可少的工具，下面看看都有哪些常用命令(仅供参考)</p>
<span id="more"></span>

<h3 id="git代码提交"><a href="#git代码提交" class="headerlink" title="git代码提交"></a>git代码提交</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git add .           <span class="comment">//注意add和.之间有个空格</span></span><br><span class="line">git commit -m “随便内容”</span><br><span class="line">git push            <span class="comment">//提交  /git push origin master    ——master分支</span></span><br></pre></td></tr></table></figure>

<h3 id="Git-git-add-添加错文件，如何撤销？"><a href="#Git-git-add-添加错文件，如何撤销？" class="headerlink" title="Git - git add 添加错文件，如何撤销？"></a>Git - git add 添加错文件，如何撤销？</h3><p>有时可能 git add .（空格 + 点）表示当前目录所有文件，不小心就会提交其他文件。git add 如果添加了错误的文件的话，撤销操作 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git status <span class="comment">// 先看一下add 中的文件 </span></span><br><span class="line"></span><br><span class="line">git reset HEAD <span class="comment">// 如果后面什么都不跟的话，就是上一次 add 里面的内容全部撤销</span></span><br><span class="line"></span><br><span class="line">git reset HEAD XXX/XXX/XXX.java <span class="comment">// 就是对某个文件进行撤销</span></span><br></pre></td></tr></table></figure>
<h3 id="Git-git-add和commit都操作完，如何撤销？"><a href="#Git-git-add和commit都操作完，如何撤销？" class="headerlink" title="Git- git add和commit都操作完，如何撤销？"></a>Git- git add和commit都操作完，如何撤销？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git reset --soft HEAD^  <span class="comment">//这样就成功撤销了commit</span></span><br><span class="line"></span><br><span class="line">git reset --hard HEAD^  <span class="comment">//这样连add也撤销了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//HEAD^ 表示上一个版本，即上一次的commit，几个^代表几次提交，如果回滚两次就是HEAD^^。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以写成HEAD~1，如果进行两次的commit，想要都撤回，可以使用HEAD~2。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//--soft 不删除工作空间的改动代码 ，撤销commit，不撤销add</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//--hard 删除工作空间的改动代码，撤销commit且撤销add</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果commit后面的注释写错了，先别急着撤销，可以运行git commit --amend </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//进入vim编辑模式，修改完保存即可</span></span><br></pre></td></tr></table></figure>
<h3 id="git-分支操作"><a href="#git-分支操作" class="headerlink" title="git 分支操作"></a>git 分支操作</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git pull   <span class="comment">//拉取分支</span></span><br><span class="line"></span><br><span class="line">git branch -l   <span class="comment">//查看本地的分支</span></span><br><span class="line"></span><br><span class="line">git checkout 分支名    <span class="comment">//切换分支</span></span><br><span class="line"></span><br><span class="line">git checkout -b dev  <span class="comment">//git从已有的分支创建新的分支(如从master分支),创建一个dev分支</span></span><br><span class="line">(分开就是：创建一个新分支 git branch dev  ,  切换到新的分支 git checkout dev)</span><br><span class="line"></span><br><span class="line">git branch   <span class="comment">//创建完可以查看一下,分支已经切换到dev</span></span><br><span class="line"></span><br><span class="line">git push origin dev  <span class="comment">//提交该分支到远程仓库</span></span><br><span class="line"></span><br><span class="line">git pull origin dev  <span class="comment">//测试从远程获取dev</span></span><br><span class="line"></span><br><span class="line">git branch -a   <span class="comment">//查看当前所有的分支</span></span><br><span class="line"></span><br><span class="line">git branch -r   <span class="comment">//使用如下Git命令查看所有远程分支</span></span><br></pre></td></tr></table></figure>
<h3 id="git克隆指定分支项目"><a href="#git克隆指定分支项目" class="headerlink" title="git克隆指定分支项目"></a>git克隆指定分支项目</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git clone -b 分支名 项目地址</span><br><span class="line"></span><br><span class="line"><span class="comment">//例如：git clone -b demo https://github.com/TaleLin/lin-cms-vue.git</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<h3 id="git代码合并冲突如何解决"><a href="#git代码合并冲突如何解决" class="headerlink" title="git代码合并冲突如何解决"></a>git代码合并冲突如何解决</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">一、暂存到暂存区，更新后，从暂存区取出合并解决冲突</span><br><span class="line"></span><br><span class="line">    <span class="number">1</span>、git pull 出现冲突后可以暂存本地修改git stash</span><br><span class="line"></span><br><span class="line">    <span class="number">2</span>、然后git pull 更新代码</span><br><span class="line"></span><br><span class="line">    <span class="number">3</span>、git stash list 可查看暂存记录列表</span><br><span class="line"></span><br><span class="line">    <span class="number">4</span>、释放本地暂存 git stash apply stash@&#123;<span class="number">0</span>&#125; 就是刚才保存的标记</span><br><span class="line"></span><br><span class="line">    <span class="number">5</span>、出现冲突文件，找到并解决</span><br><span class="line"></span><br><span class="line">    <span class="number">6</span>、然后可以提交git add . 加入索引库</span><br><span class="line"></span><br><span class="line">    <span class="number">7</span>、然后本地提交git commit -m <span class="string">&#x27;注释&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="number">8</span>、最后git push到远程</span><br><span class="line">二、更新发现冲突，提交本地，再更新，找到冲突地方解决后，再次提交推送远程</span><br><span class="line"></span><br><span class="line">    <span class="number">1</span>、git pull更新代码，发现error: Your local changes to the following files would be overwritten by merge:pom.xmlPlease commit your changes or stash them before you merge.这说明你的pom.xml与远程有冲突，你需要先提交本地的修改然后更新。</span><br><span class="line"></span><br><span class="line">    <span class="number">2</span>、git add pom.xml</span><br><span class="line"></span><br><span class="line">       git commit -m <span class="string">&#x27;冲突解决&#x27;</span></span><br><span class="line"></span><br><span class="line">       提交本地的pom.xml文件，不进行推送远程</span><br><span class="line"></span><br><span class="line">    <span class="number">3</span>、git pull</span><br><span class="line"></span><br><span class="line">        更新代码Auto-merging pom.xmlCONFLICT (content): Merge conflict <span class="keyword">in</span> pom.xmlAutomatic merge failed; fix conflicts and then commit the result.更新后你的本地分支上会出现 (develop|MERGING)类似这种标志。</span><br><span class="line"></span><br><span class="line">    <span class="number">4</span>、找到你本地的test.txt文件，并打开你会在文件中发现&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD ，======= ，&gt;&gt;&gt;&gt;&gt;&gt;&gt; ae24sgwmfp2m2ojr2jaagwhhfawe2类似这样的标记。</span><br><span class="line">    &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD和=======中间的是你自己的代码， ======= 和&gt;&gt;&gt;&gt;&gt;&gt;&gt;中间的是其他人修改的代码自己确定保留那一部分代码，最后删除&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD ，======= ，&gt;&gt;&gt;&gt;&gt;&gt;&gt;这种标志。</span><br><span class="line">    <span class="number">5</span>、git add test.txt &amp;&amp; git commit -m <span class="string">&#x27;冲突解决结束&#x27;</span>  再次将本地的test.txt文件提交。</span><br><span class="line"></span><br><span class="line">    <span class="number">6</span>、git push将解决冲突后的文件推送到远程。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>导出（export）和导入（import）</title>
    <url>/2012/10/25/exportAndimport/exportAndimport/</url>
    <content><![CDATA[<hr>
<span id="more"></span>
<p><a href="https://zh.javascript.info/js">参考</a></p>
<h3 id="导出（export）"><a href="#导出（export）" class="headerlink" title="导出（export）"></a>导出（export）</h3><h4 id="在声明前导出"><a href="#在声明前导出" class="headerlink" title="在声明前导出"></a>在声明前导出</h4><p>通过在声明之前放置 export 来标记任意声明为导出，无论声明的是变量，函数还是类都可以</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导出数组</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> months = [<span class="string">&#x27;Jan&#x27;</span>, <span class="string">&#x27;Feb&#x27;</span>, <span class="string">&#x27;Mar&#x27;</span>,<span class="string">&#x27;Apr&#x27;</span>, <span class="string">&#x27;Aug&#x27;</span>, <span class="string">&#x27;Sep&#x27;</span>, <span class="string">&#x27;Oct&#x27;</span>, <span class="string">&#x27;Nov&#x27;</span>, <span class="string">&#x27;Dec&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出 const 声明的变量</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> MODULES_BECAME_STANDARD_YEAR = <span class="number">2015</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出类</span></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attr">ps</span>: 导出 <span class="class"><span class="keyword">class</span>/<span class="title">function</span> 后没有分号</span></span><br><span class="line"><span class="class">    在类或者函数前的 <span class="title">export</span> 不会让它们变成 函数表达式。尽管被导出了，但它仍然是一个函数声明</span></span><br><span class="line"><span class="class">    大部分 <span class="title">JavaScript</span> 样式指南都不建议在函数和类声明后使用分号</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    <span class="title">export</span> <span class="title">function</span> <span class="title">sayHi</span>(<span class="title">user</span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">`Hello, <span class="subst">$&#123;user&#125;</span>!`</span>);</span><br><span class="line">    &#125;  <span class="comment">// 在这里没有分号 ;</span></span><br></pre></td></tr></table></figure>
<h4 id="导出与声明分开"><a href="#导出与声明分开" class="headerlink" title="导出与声明分开"></a>导出与声明分开</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 📁 say.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">`Hello, <span class="subst">$&#123;user&#125;</span>!`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayBye</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">`Bye, <span class="subst">$&#123;user&#125;</span>!`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;sayHi, sayBye&#125;; <span class="comment">// 导出变量列表</span></span><br><span class="line"></span><br><span class="line">……从技术上讲，我们也可以把 <span class="keyword">export</span> 放在函数上面。</span><br></pre></td></tr></table></figure>
<h4 id="Export-default"><a href="#Export-default" class="headerlink" title="Export default"></a>Export default</h4><p>在实际中，主要有两种模块。</p>
<p>包含库或函数包的模块，像上面的 say.js。</p>
<p>声明单个实体的模块，例如模块 user.js 仅导出 class User。</p>
<p>大部分情况下，开发者倾向于使用第二种方式，以便每个“东西”都存在于它自己的模块中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 📁 user.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123; <span class="comment">// 只需要添加 &quot;default&quot; 即可</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">每个文件应该只有一个 <span class="keyword">export</span> <span class="keyword">default</span>：</span><br><span class="line"></span><br><span class="line">……然后将其导入而不需要花括号：</span><br><span class="line"></span><br><span class="line"><span class="comment">// 📁 main.js</span></span><br><span class="line"><span class="keyword">import</span> User <span class="keyword">from</span> <span class="string">&#x27;./user.js&#x27;</span>; <span class="comment">// 不需要花括号 &#123;User&#125;，只需要写成 User 即可</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> User(<span class="string">&#x27;John&#x27;</span>);</span><br><span class="line"></span><br><span class="line">ps: 不用花括号的导入看起来很酷。刚开始使用模块时，一个常见的错误就是忘记写花括号。所以，请记住，<span class="keyword">import</span> 命名的导出时需要花括号，而 <span class="keyword">import</span> 默认的导出时不需要花括号</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">命名的导出导入                 |   	    默认的导出导入</span><br><span class="line">                             |</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;...&#125;	     |        <span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;...&#125;</span><br><span class="line">                             |</span><br><span class="line"><span class="keyword">import</span> &#123;User&#125; <span class="keyword">from</span> ...	     |        <span class="keyword">import</span> User <span class="keyword">from</span> ...</span><br><span class="line"></span><br><span class="line">从技术上讲，我们可以在一个模块中同时有默认的导出和命名的导出，但是实际上人们通常不会混合使用它们。模块要么是命名的导出要么是默认的导出。</span><br><span class="line"></span><br><span class="line">由于每个文件最多只能有一个默认的导出，因此导出的实体可能没有名称</span><br><span class="line"></span><br><span class="line">例如，下面这些都是完全有效的默认的导出</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> </span>&#123; <span class="comment">// 没有类名</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123; <span class="comment">// 没有函数名</span></span><br><span class="line">  alert(<span class="string">`Hello, <span class="subst">$&#123;user&#125;</span>!`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出单个值，而不使用变量</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [<span class="string">&#x27;Jan&#x27;</span>, <span class="string">&#x27;Feb&#x27;</span>, <span class="string">&#x27;Mar&#x27;</span>,<span class="string">&#x27;Apr&#x27;</span>, <span class="string">&#x27;Aug&#x27;</span>, <span class="string">&#x27;Sep&#x27;</span>, <span class="string">&#x27;Oct&#x27;</span>, <span class="string">&#x27;Nov&#x27;</span>, <span class="string">&#x27;Dec&#x27;</span>];</span><br><span class="line"></span><br><span class="line">不指定名称是可以的，因为每个文件只有一个 <span class="keyword">export</span> <span class="keyword">default</span>，因此不带花括号的 <span class="keyword">import</span> 知道要导入的内容是什么。</span><br><span class="line"></span><br><span class="line">如果没有 <span class="keyword">default</span>，这样的导出将会出错：</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> </span>&#123; <span class="comment">// Error!（非默认的导出需要名称）</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="“default”-名称"><a href="#“default”-名称" class="headerlink" title="“default” 名称"></a>“default” 名称</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">在某些情况下，<span class="keyword">default</span> 关键词被用于引用默认的导出。</span><br><span class="line"></span><br><span class="line">例如，要将函数与其定义分开导出：</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">`Hello, <span class="subst">$&#123;user&#125;</span>!`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 就像我们在函数之前添加了 &quot;export default&quot; 一样</span></span><br><span class="line"><span class="keyword">export</span> &#123;sayHi <span class="keyword">as</span> <span class="keyword">default</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">或者，另一种情况，假设模块 user.js 导出了一个主要的默认的导出和一些命名的导出（这种情况很少见，但确实会发生）：</span><br><span class="line"><span class="comment">// 📁 user.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">`Hello, <span class="subst">$&#123;user&#125;</span>!`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">这是导入默认的导出以及命名的导出的方法：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 📁 main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="keyword">default</span> <span class="keyword">as</span> User, sayHi&#125; <span class="keyword">from</span> <span class="string">&#x27;./user.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> User(<span class="string">&#x27;John&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如果我们将所有东西 * 作为一个对象导入，那么 <span class="keyword">default</span> 属性正是默认的导出：</span><br><span class="line"><span class="comment">// 📁 main.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> user <span class="keyword">from</span> <span class="string">&#x27;./user.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> User = user.default; <span class="comment">// 默认的导出</span></span><br><span class="line"><span class="keyword">new</span> User(<span class="string">&#x27;John&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="我应该使用默认的导出吗？"><a href="#我应该使用默认的导出吗？" class="headerlink" title="我应该使用默认的导出吗？"></a>我应该使用默认的导出吗？</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">命名的导出是明确的。它们确切地命名了它们要导出的内容，因此我们能从它们获得这些信息，这是一件好事。</span><br><span class="line"></span><br><span class="line">命名的导出会强制我们使用正确的名称进行导入：</span><br><span class="line"><span class="keyword">import</span> &#123;User&#125; <span class="keyword">from</span> <span class="string">&#x27;./user.js&#x27;</span>;</span><br><span class="line"><span class="comment">// 导入 &#123;MyUser&#125; 不起作用，导入名字必须为 &#123;User&#125;</span></span><br><span class="line"></span><br><span class="line">……对于默认的导出，我们总是在导入时选择名称：</span><br><span class="line"><span class="keyword">import</span> User <span class="keyword">from</span> <span class="string">&#x27;./user.js&#x27;</span>; <span class="comment">// 有效</span></span><br><span class="line"><span class="keyword">import</span> MyUser <span class="keyword">from</span> <span class="string">&#x27;./user.js&#x27;</span>; <span class="comment">// 也有效</span></span><br><span class="line"><span class="comment">// 使用任何名称导入都没有问题</span></span><br><span class="line"></span><br><span class="line">因此，团队成员可能会使用不同的名称来导入相同的内容，这不好。</span><br><span class="line"></span><br><span class="line">通常，为了避免这种情况并使代码保持一致，可以遵从这条规则，即导入的变量应与文件名相对应，例如：</span><br><span class="line"><span class="keyword">import</span> User <span class="keyword">from</span> <span class="string">&#x27;./user.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> LoginForm <span class="keyword">from</span> <span class="string">&#x27;./loginForm.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> func <span class="keyword">from</span> <span class="string">&#x27;/path/to/func.js&#x27;</span>;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">但是，一些团队仍然认为这是默认的导出的严重缺陷。因此，他们更倾向于始终使用命名的导出。即使只导出一个东西，也仍然使用命名的导出，而不是默认的导出。</span><br><span class="line"></span><br><span class="line">这也使得重新导出（见下文）更容易</span><br></pre></td></tr></table></figure>
<h4 id="重新导出-（Re-export）"><a href="#重新导出-（Re-export）" class="headerlink" title="重新导出 （Re-export）"></a>重新导出 （Re-export）</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">“重新导出（Re-<span class="keyword">export</span>）”语法 <span class="keyword">export</span> ... <span class="keyword">from</span> ... 允许导入内容，并立即将其导出（可能是用的是其他的名字），就像这样：</span><br><span class="line"><span class="keyword">export</span> &#123;sayHi&#125; <span class="keyword">from</span> <span class="string">&#x27;./say.js&#x27;</span>; <span class="comment">// 重新导出 sayHi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;<span class="keyword">default</span> <span class="keyword">as</span> User&#125; <span class="keyword">from</span> <span class="string">&#x27;./user.js&#x27;</span>; <span class="comment">// 重新导出 default</span></span><br><span class="line"></span><br><span class="line">为什么要这样做？我们看一个实际开发中的用例。</span><br><span class="line"></span><br><span class="line">想象一下，我们正在编写一个 “package”：一个包含大量模块的文件夹，其中一些功能是导出到外部的（像 NPM 这样的工具允许我们发布和分发这样的 package，但我们不是必须要去使用它们），并且其中一些模块仅仅是供其他 package 中的模块内部使用的 “helpers”。</span><br><span class="line"></span><br><span class="line">文件结构可能是这样的：</span><br><span class="line">auth/</span><br><span class="line">    index.js</span><br><span class="line">    user.js</span><br><span class="line">    helpers.js</span><br><span class="line">    tests/</span><br><span class="line">        login.js</span><br><span class="line">    providers/</span><br><span class="line">        github.js</span><br><span class="line">        facebook.js</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">我们希望通过单个入口暴露包的功能。</span><br><span class="line"></span><br><span class="line">换句话说，想要使用我们的包的人，应该只从“主文件” auth/index.js 导入。</span><br><span class="line"></span><br><span class="line">像这样：</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;login, logout&#125; <span class="keyword">from</span> <span class="string">&#x27;auth/index.js&#x27;</span></span><br><span class="line"></span><br><span class="line">“主文件”，auth/index.js 导出了我们希望在包中提供的所有功能。</span><br><span class="line"></span><br><span class="line">这样做是因为，其他使用我们包的开发者不应该干预其内部结构，不应该搜索我们包的文件夹中的文件。我们只在 auth/index.js 中导出必要的部分，并保持其他内容“不可见”。</span><br><span class="line"></span><br><span class="line">由于实际导出的功能分散在 package 中，所以我们可以将它们导入到 auth/index.js，然后再从中导出它们：</span><br><span class="line"><span class="comment">// 📁 auth/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入 login/logout 然后立即导出它们</span></span><br><span class="line"><span class="keyword">import</span> &#123;login, logout&#125; <span class="keyword">from</span> <span class="string">&#x27;./helpers.js&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;login, logout&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将默认导出导入为 User，然后导出它</span></span><br><span class="line"><span class="keyword">import</span> User <span class="keyword">from</span> <span class="string">&#x27;./user.js&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;User&#125;;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">现在使用我们 package 的人可以 <span class="keyword">import</span> &#123;login&#125; <span class="keyword">from</span> <span class="string">&quot;auth/index.js&quot;</span>。</span><br><span class="line"></span><br><span class="line">语法 <span class="keyword">export</span> ... <span class="keyword">from</span> ... 只是下面这种导入-导出的简写：</span><br><span class="line"><span class="comment">// 📁 auth/index.js</span></span><br><span class="line"><span class="comment">// 重新导出 login/logout</span></span><br><span class="line"><span class="keyword">export</span> &#123;login, logout&#125; <span class="keyword">from</span> <span class="string">&#x27;./helpers.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将默认导出重新导出为 User</span></span><br><span class="line"><span class="keyword">export</span> &#123;<span class="keyword">default</span> <span class="keyword">as</span> User&#125; <span class="keyword">from</span> <span class="string">&#x27;./user.js&#x27;</span>;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> ... <span class="keyword">from</span> 与 <span class="keyword">import</span>/<span class="keyword">export</span> 相比的显着区别是重新导出的模块在当前文件中不可用。所以在上面的 auth/index.js 示例中，我们不能使用重新导出的 login/logout 函数。</span><br><span class="line"></span><br><span class="line"><span class="attr">ps</span>: 尽管与 <span class="keyword">import</span> 等效，但以下语法在语法上无效：</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> DefaultExport <span class="keyword">from</span> <span class="string">&quot;bar.js&quot;</span>; <span class="comment">// 有效的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> DefaultExport <span class="keyword">from</span> <span class="string">&quot;bar.js&quot;</span>; <span class="comment">// 无效的</span></span><br><span class="line"></span><br><span class="line">这里正确的做法是重命名这个导出：</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> DefaultExport &#125; <span class="keyword">from</span> <span class="string">&quot;bar.js&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Export-“as”"><a href="#Export-“as”" class="headerlink" title="Export “as”"></a>Export “as”</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 📁 say.js</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">export</span> &#123;sayHi <span class="keyword">as</span> hi, sayBye <span class="keyword">as</span> bye&#125;;</span><br><span class="line"></span><br><span class="line">现在 hi 和 bye 是在外面使用时的正式名称</span><br><span class="line"></span><br><span class="line"><span class="comment">// 📁 main.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> say <span class="keyword">from</span> <span class="string">&#x27;./say.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line">say.hi(<span class="string">&#x27;John&#x27;</span>); <span class="comment">// Hello, John!</span></span><br><span class="line">say.bye(<span class="string">&#x27;John&#x27;</span>); <span class="comment">// Bye, John!</span></span><br></pre></td></tr></table></figure>




<h3 id="导入（import）"><a href="#导入（import）" class="headerlink" title="导入（import）"></a>导入（import）</h3><h4 id="Import"><a href="#Import" class="headerlink" title="Import *"></a>Import *</h4><p>通常，我们把要导入的东西列在花括号 import {…} 中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 📁 main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;sayHi, sayBye&#125; <span class="keyword">from</span> <span class="string">&#x27;./say.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line">sayHi(<span class="string">&#x27;John&#x27;</span>); <span class="comment">// Hello, John!</span></span><br><span class="line">sayBye(<span class="string">&#x27;John&#x27;</span>); <span class="comment">// Bye, John!</span></span><br></pre></td></tr></table></figure>
<p>但是如果有很多要导入的内容，我们可以使用 import * as <obj> 将所有内容导入为一个对象 ( 不建议使用,不方便webpack模块打包到一起并对其进行优化，以加快加载速度并删除未使用的代码)</obj></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 📁 main.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> say <span class="keyword">from</span> <span class="string">&#x27;./say.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line">say.sayHi(<span class="string">&#x27;John&#x27;</span>);</span><br><span class="line">say.sayBye(<span class="string">&#x27;John&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h4 id="Import-“as”"><a href="#Import-“as”" class="headerlink" title="Import “as”"></a>Import “as”</h4><p>使用 as 让导入具有不同的名字。<br>例如，简洁起见，我们将 sayHi 导入到局部变量 hi，将 sayBye 导入到 bye</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 📁 main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;sayHi <span class="keyword">as</span> hi, sayBye <span class="keyword">as</span> bye&#125; <span class="keyword">from</span> <span class="string">&#x27;./say.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line">hi(<span class="string">&#x27;John&#x27;</span>); <span class="comment">// Hello, John!</span></span><br><span class="line">bye(<span class="string">&#x27;John&#x27;</span>); <span class="comment">// Bye, John!</span></span><br></pre></td></tr></table></figure>


<h3 id="动态导入"><a href="#动态导入" class="headerlink" title="动态导入"></a>动态导入</h3><h4 id="import-表达式"><a href="#import-表达式" class="headerlink" title="import() 表达式"></a>import() 表达式</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">下面这样的 <span class="keyword">import</span> 行不通：</span><br><span class="line"><span class="keyword">import</span> ... <span class="keyword">from</span> getModuleName(); <span class="comment">// Error, only from &quot;string&quot; is allowed</span></span><br><span class="line"></span><br><span class="line">其次，我们无法根据条件或者在运行时导入：</span><br><span class="line"><span class="keyword">if</span>(...) &#123;</span><br><span class="line">  <span class="keyword">import</span> ...; <span class="comment">// Error, not allowed!</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">import</span> ...; <span class="comment">// Error, we can&#x27;t put import in any block</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如何才能动态地按需导入模块呢？</p>
<p>import(module) 表达式加载模块并返回一个 promise，该 promise resolve 为一个包含其所有导出的模块对象。我们可以在代码中的任意位置调用这个表达式。</p>
<p>我们可以在代码中的任意位置动态地使用它。例如</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> modulePath = prompt(<span class="string">&quot;Which module to load?&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>(modulePath)</span><br><span class="line">  .then(<span class="function"><span class="params">obj</span> =&gt;</span> &lt;module object&gt;)</span><br><span class="line">  .catch(err =&gt; &lt;loading error, e.g. if no such module&gt;)</span><br></pre></td></tr></table></figure>
<p>或者，如果在异步函数中，我们可以使用 let module = await import(modulePath)。<br>例如，如果我们有以下模块 say.js：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 📁 say.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">hi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">`Hello`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">bye</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">`Bye`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">……那么，可以像下面这样进行动态导入：</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;hi, bye&#125; = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">&#x27;./say.js&#x27;</span>);</span><br><span class="line">hi();</span><br><span class="line">bye();</span><br></pre></td></tr></table></figure>
<p>或者，如果 say.js 有默认的导出</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 📁 say.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;Module loaded (export default)!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">……那么，为了访问它，我们可以使用模块对象的 <span class="keyword">default</span> 属性：</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">&#x27;./say.js&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> say = obj.default;</span><br><span class="line"><span class="comment">// or, in one line: let &#123;default: say&#125; = await import(&#x27;./say.js&#x27;);</span></span><br><span class="line"></span><br><span class="line">say();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>完整的示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 📁 say.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">hi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">`Hello`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">bye</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">`Bye`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;Module loaded (export default)!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 📁 index.html</span></span><br><span class="line"></span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">let</span> say = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">&#x27;./say.js&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    say.hi(); <span class="comment">// Hello!</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    say.bye(); <span class="comment">// Bye!</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    say.default(); <span class="comment">// Module loaded (export default)!</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;load()&quot;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>export</tag>
        <tag>import</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown语法</title>
    <url>/2016/07/05/grammar/markdown%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<hr>
<span id="more"></span>
<h3 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure>
<h3 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">**加粗**</span><br><span class="line">*倾斜*</span><br><span class="line">***斜体加粗***</span><br><span class="line">~~加删除线~~</span><br></pre></td></tr></table></figure>
<h3 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&gt;引用</span><br></pre></td></tr></table></figure>
<p>效果如下:</p>
<blockquote>
<p>引用</p>
</blockquote>
<h3 id="四、分割线-三个或者三个以上的-或者-都可以"><a href="#四、分割线-三个或者三个以上的-或者-都可以" class="headerlink" title="四、分割线(三个或者三个以上的 - 或者 * 都可以)"></a>四、分割线(三个或者三个以上的 - 或者 * 都可以)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">----</span><br><span class="line">***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure>
<h3 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">![图片alt](图片地址 <span class="string">&#x27;&#x27;</span>图片title<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br></pre></td></tr></table></figure>
<h3 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[超链接名](超链接地址 <span class="string">&quot;超链接title&quot;</span>)title可加可不加   </span><br><span class="line">[百度](http:<span class="comment">//baidu.com)</span></span><br></pre></td></tr></table></figure>
<p>示例：<a href="http://baidu.com/">百度</a></p>
<h3 id="七、列表"><a href="#七、列表" class="headerlink" title="七、列表"></a>七、列表</h3><p>无序列表</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br><span class="line">注意：- + * 任何一种都可以,但是跟内容之间都要有一个空格  </span><br></pre></td></tr></table></figure>
<p>有序列表</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 列表内容</span><br><span class="line"><span class="number">2.</span> 列表内容</span><br><span class="line"><span class="number">3.</span> 列表内容</span><br><span class="line">注意：序号跟内容之间要有空格  </span><br></pre></td></tr></table></figure>
<p>列表嵌套</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">上一级和下一级之间敲三个空格即可 </span><br><span class="line">- 一级有序列表内容</span><br><span class="line">   - 二级无序列表内容 </span><br></pre></td></tr></table></figure>
<h3 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">使用<span class="string">`:---:`</span>居中</span><br><span class="line">使用<span class="string">`:----`</span>居左</span><br><span class="line">使用<span class="string">`----:`</span>居右</span><br><span class="line">注：原生的语法两边都要用 | 包起来。此处省略</span><br></pre></td></tr></table></figure>
<h3 id="九、代码"><a href="#九、代码" class="headerlink" title="九、代码"></a>九、代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">“   <span class="string">``</span><span class="string">`javascript</span></span><br><span class="line"><span class="string">        function fun()&#123;</span></span><br><span class="line"><span class="string">         echo &quot;1&quot;;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        fun(); </span></span><br><span class="line"><span class="string">    `</span><span class="string">``</span>    ”   </span><br></pre></td></tr></table></figure>
<h3 id="十、表格"><a href="#十、表格" class="headerlink" title="十、表格"></a>十、表格</h3><p>hexo,table表格显示异常，直接不显示表格<br>解决：表格和正文之间空两行</p>
<p><strong>编程操作(表格和正文之间空两行)</strong></p>
<table>
<thead>
<tr>
<th align="left">命令名</th>
<th align="left">功能描述</th>
<th align="left">使用举例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">make</td>
<td align="left">维护可执行程序的最新版本</td>
<td align="left">make</td>
</tr>
<tr>
<td align="left">touch</td>
<td align="left">更新文件的访问和修改时间</td>
<td align="left">touch -m 05202400 filename</td>
</tr>
<tr>
<td align="left">dbx</td>
<td align="left">命令行界面调试工具</td>
<td align="left">dbx a.out</td>
</tr>
<tr>
<td align="left">xde</td>
<td align="left">图形用户界面调试工具</td>
<td align="left">xde a.out</td>
</tr>
</tbody></table>
<h3 id="十一、流程图"><a href="#十一、流程图" class="headerlink" title="十一、流程图"></a>十一、流程图</h3><p>关于 <strong>甘特图</strong> 语法，参考 <a href="https://mermaidjs.github.io/">这儿</a>,<br>关于 <strong>Mermaid</strong> 语法，参考 <a href="https://mermaidjs.github.io/">这儿</a>,<br>关于 <strong>Flowchart流程图</strong> 语法，参考 <a href="http://adrai.github.io/flowchart.js/">这儿</a>.</p>
]]></content>
      <categories>
        <category>语法</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo美化</title>
    <url>/2016/07/16/hexo/Hexo%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<h2 id="下面是我比较喜欢的美化，亲测有效-根据next7-8"><a href="#下面是我比较喜欢的美化，亲测有效-根据next7-8" class="headerlink" title="下面是我比较喜欢的美化，亲测有效(根据next7.8)"></a>下面是我比较喜欢的美化，亲测有效(根据next7.8)</h2><h3 id="Next-7-x-8-x-自动添加可切换的暗黑模式"><a href="#Next-7-x-8-x-自动添加可切换的暗黑模式" class="headerlink" title="Next 7.x / 8.x 自动添加可切换的暗黑模式"></a>Next 7.x / 8.x 自动添加可切换的<a href="https://blog.csdn.net/rqh656418510/article/details/123676457">暗黑模式</a></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//安装 hexo-next-darkmode 插件</span></span><br><span class="line"></span><br><span class="line">npm install hexo-next-darkmode --save</span><br><span class="line"></span><br><span class="line"><span class="comment">//在 Next 主题的 _config.yml 配置文件里添加以下内容</span></span><br><span class="line"></span><br><span class="line"># Darkmode JS</span><br><span class="line"># For more information: https:<span class="comment">//github.com/rqh656418510/hexo-next-darkmode, https://github.com/sandoche/Darkmode.js</span></span><br><span class="line">darkmode_js:</span><br><span class="line">enable: <span class="literal">true</span></span><br><span class="line"><span class="attr">bottom</span>: <span class="string">&#x27;64px&#x27;</span> # <span class="keyword">default</span>: <span class="string">&#x27;32px&#x27;</span></span><br><span class="line"><span class="attr">right</span>: <span class="string">&#x27;unset&#x27;</span> # <span class="keyword">default</span>: <span class="string">&#x27;32px&#x27;</span></span><br><span class="line"><span class="attr">left</span>: <span class="string">&#x27;32px&#x27;</span> # <span class="keyword">default</span>: <span class="string">&#x27;unset&#x27;</span></span><br><span class="line"><span class="attr">time</span>: <span class="string">&#x27;0.5s&#x27;</span> # <span class="keyword">default</span>: <span class="string">&#x27;0.3s&#x27;</span></span><br><span class="line"><span class="attr">mixColor</span>: <span class="string">&#x27;transparent&#x27;</span> # <span class="keyword">default</span>: <span class="string">&#x27;#fff&#x27;</span></span><br><span class="line"><span class="attr">backgroundColor</span>: <span class="string">&#x27;transparent&#x27;</span> # <span class="keyword">default</span>: <span class="string">&#x27;#fff&#x27;</span></span><br><span class="line"><span class="attr">buttonColorDark</span>: <span class="string">&#x27;#100f2c&#x27;</span> # <span class="keyword">default</span>: <span class="string">&#x27;#100f2c&#x27;</span></span><br><span class="line"><span class="attr">buttonColorLight</span>: <span class="string">&#x27;#fff&#x27;</span> # <span class="keyword">default</span>: <span class="string">&#x27;#fff&#x27;</span></span><br><span class="line"><span class="attr">isActivated</span>: <span class="literal">false</span> # <span class="keyword">default</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">saveInCookies</span>: <span class="literal">true</span> # <span class="keyword">default</span>: <span class="literal">true</span></span><br><span class="line"><span class="attr">label</span>: <span class="string">&#x27;🌓&#x27;</span> # <span class="keyword">default</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">autoMatchOsTheme</span>: <span class="literal">true</span> # <span class="keyword">default</span>: <span class="literal">true</span></span><br><span class="line"><span class="attr">libUrl</span>: # <span class="built_in">Set</span> custom library cdn url <span class="keyword">for</span> Darkmode.js</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>isActivated: true：默认激活暗黑/夜间模式，请始终与 saveInCookies: false、autoMatchOsTheme: false 一起使用</p>
</blockquote>
<blockquote>
<p>关闭原生的暗黑模式<br>确保 Next 原生的 darkmode 选项设置为 false，在 Next 的 _config.yml 配置文件中更改 darkmode: false </p>
</blockquote>
<h3 id="添加鼠标点击显示字体效果"><a href="#添加鼠标点击显示字体效果" class="headerlink" title="添加鼠标点击显示字体效果"></a>添加鼠标点击显示字体效果</h3><p>在 /themes/next/source/js 下新建文件 click_show_text.js，添加以下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a_idx = <span class="number">0</span>;</span><br><span class="line">jQuery(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&quot;body&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span></span><br><span class="line">        (<span class="string">&quot;Js&quot;</span>, <span class="string">&quot;Css&quot;</span>, <span class="string">&quot;HTML&quot;</span>, <span class="string">&quot;Json&quot;</span>, <span class="string">&quot;Vue&quot;</span>, <span class="string">&quot;Node&quot;</span>, <span class="string">&quot;Webpack&quot;</span>, <span class="string">&quot;git&quot;</span>, <span class="string">&quot;Jquery&quot;</span>, <span class="string">&quot;Html5&quot;</span>, <span class="string">&quot;Css3&quot;</span>, <span class="string">&quot;react&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> $i = $(<span class="string">&quot;&lt;span/&gt;&quot;</span>).text(a[a_idx]);</span><br><span class="line">        a_idx = (a_idx + <span class="number">1</span>) % a.length;</span><br><span class="line">        <span class="keyword">var</span> x = e.pageX,</span><br><span class="line">        y = e.pageY;</span><br><span class="line">        $i.css(&#123;</span><br><span class="line">            <span class="string">&quot;z-index&quot;</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="string">&quot;top&quot;</span>: y - <span class="number">20</span>,</span><br><span class="line">            <span class="string">&quot;left&quot;</span>: x,</span><br><span class="line">            <span class="string">&quot;position&quot;</span>: <span class="string">&quot;absolute&quot;</span>,</span><br><span class="line">            <span class="string">&quot;font-weight&quot;</span>: <span class="string">&quot;bold&quot;</span>,</span><br><span class="line">            <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#FF0000&quot;</span></span><br><span class="line">        &#125;);</span><br><span class="line">        $(<span class="string">&quot;body&quot;</span>).append($i);</span><br><span class="line">        $i.animate(&#123;</span><br><span class="line">            <span class="string">&quot;top&quot;</span>: y - <span class="number">180</span>,</span><br><span class="line">            <span class="string">&quot;opacity&quot;</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">			<span class="number">3000</span>,</span><br><span class="line">			<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			    $i.remove();</span><br><span class="line">			&#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="string">&#x27;delay()&#x27;</span>, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delay</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&quot;.buryit&quot;</span>).removeAttr(<span class="string">&quot;onclick&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>想要每次点击显示的文字为不同颜色，可以将其中 color 值进行如下更改：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;color&quot;</span>: <span class="string">&quot;rgb(&quot;</span> + ~~(<span class="number">255</span> * <span class="built_in">Math</span>.random()) + <span class="string">&quot;,&quot;</span> + ~~(<span class="number">255</span> * <span class="built_in">Math</span>.random()) + <span class="string">&quot;,&quot;</span> + ~~(<span class="number">255</span> * <span class="built_in">Math</span>.random()) + <span class="string">&quot;)&quot;</span></span><br></pre></td></tr></table></figure>
<p>然后在 \themes\next\layout\layout.swig 文件<body></body>中添加以下代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;/js/click_show_text.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>最最最（重要的字说三遍）重要的来了，<br>可能你会报错JQ找不到，那是没引入JQ，在上面之前引入JQ即可，即：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;http://libs.baidu.com/jquery/1.8.3/jquery.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://libs.baidu.com/jquery/1.8.3/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/click_show_text.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="添加网站雪花飘落效果"><a href="#添加网站雪花飘落效果" class="headerlink" title="添加网站雪花飘落效果"></a>添加网站雪花飘落效果</h3><p>在 /themes/next/source/js 下新建文件 snow.js，添加以下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">	$.fn.snow = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> $flake = $(<span class="string">&#x27;&lt;div id=&quot;snowbox&quot; /&gt;&#x27;</span>).css(&#123;<span class="string">&#x27;position&#x27;</span>: <span class="string">&#x27;absolute&#x27;</span>,<span class="string">&#x27;z-index&#x27;</span>:<span class="string">&#x27;9999&#x27;</span>, <span class="string">&#x27;top&#x27;</span>: <span class="string">&#x27;-50px&#x27;</span>&#125;).html(<span class="string">&#x27;&amp;#10052;&#x27;</span>),</span><br><span class="line">	documentHeight 	= $(<span class="built_in">document</span>).height(),</span><br><span class="line">	documentWidth	= $(<span class="built_in">document</span>).width(),</span><br><span class="line">	defaults = &#123;</span><br><span class="line">		<span class="attr">minSize</span>		: <span class="number">10</span>,</span><br><span class="line">		<span class="attr">maxSize</span>		: <span class="number">20</span>,</span><br><span class="line">		<span class="attr">newOn</span>		: <span class="number">1000</span>,</span><br><span class="line">		<span class="attr">flakeColor</span>	: <span class="string">&quot;#AFDAEF&quot;</span> <span class="comment">/* 此处可以定义雪花颜色，若要白色可以改为#FFFFFF */</span></span><br><span class="line">	&#125;,</span><br><span class="line">	options	= $.extend(&#123;&#125;, defaults, options);</span><br><span class="line">	<span class="keyword">var</span> interval= <span class="built_in">setInterval</span>( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> startPositionLeft = <span class="built_in">Math</span>.random() * documentWidth - <span class="number">100</span>,</span><br><span class="line">	startOpacity = <span class="number">0.5</span> + <span class="built_in">Math</span>.random(),</span><br><span class="line">	sizeFlake = options.minSize + <span class="built_in">Math</span>.random() * options.maxSize,</span><br><span class="line">	endPositionTop = documentHeight - <span class="number">200</span>,</span><br><span class="line">	endPositionLeft = startPositionLeft - <span class="number">500</span> + <span class="built_in">Math</span>.random() * <span class="number">500</span>,</span><br><span class="line">	durationFall = documentHeight * <span class="number">10</span> + <span class="built_in">Math</span>.random() * <span class="number">5000</span>;</span><br><span class="line">	$flake.clone().appendTo(<span class="string">&#x27;body&#x27;</span>).css(&#123;</span><br><span class="line">		<span class="attr">left</span>: startPositionLeft,</span><br><span class="line">		<span class="attr">opacity</span>: startOpacity,</span><br><span class="line">		<span class="string">&#x27;font-size&#x27;</span>: sizeFlake,</span><br><span class="line">		<span class="attr">color</span>: options.flakeColor</span><br><span class="line">	&#125;).animate(&#123;</span><br><span class="line">		<span class="attr">top</span>: endPositionTop,</span><br><span class="line">		<span class="attr">left</span>: endPositionLeft,</span><br><span class="line">		<span class="attr">opacity</span>: <span class="number">0.2</span></span><br><span class="line">	&#125;,durationFall,<span class="string">&#x27;linear&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		$(<span class="built_in">this</span>).remove()</span><br><span class="line">	&#125;);</span><br><span class="line">	&#125;, options.newOn);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)(jQuery);</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $.fn.snow(&#123; </span><br><span class="line">	    <span class="attr">minSize</span>: <span class="number">5</span>, <span class="comment">/* 定义雪花最小尺寸 */</span></span><br><span class="line">	    <span class="attr">maxSize</span>: <span class="number">50</span>,<span class="comment">/* 定义雪花最大尺寸 */</span></span><br><span class="line">	    <span class="attr">newOn</span>: <span class="number">300</span>  <span class="comment">/* 定义密集程度，数字越小越密集 */</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>然后在 \themes\next\layout\layout.swig 文件<body></body>中添加以下代码<br>如遇到JQ找不到，参考第一种特效解决方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;\js\snow.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="在文章末尾添加“文章结束”标记"><a href="#在文章末尾添加“文章结束”标记" class="headerlink" title="在文章末尾添加“文章结束”标记"></a>在文章末尾添加“文章结束”标记</h3><p> 在主题/layout/_macro 下新建 passage-end-tag.swig 文件，并添加以下代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div style=<span class="string">&quot;text-align:center;color: #000;font-size:16px;&quot;</span>&gt;------ The End ------&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>打开 /themes/next/layout/_macro/post.swig 文件，在 END POST BODY 后面引入 passage-end-tag.swig，如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;#####################&#125;</span><br><span class="line">&#123;### END POST BODY ###&#125;</span><br><span class="line">&#123;#####################&#125;</span><br><span class="line">&#123;% <span class="keyword">if</span> theme.passage_end_tag.enable and not is_index %&#125;</span><br><span class="line">&#123;% include <span class="string">&#x27;passage-end-tag.swig&#x27;</span> %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
<p>在主题配置文件 _config.yml 的末尾添加以下配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">passage_end_tag:</span><br><span class="line">  enable: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="侧边栏背景设置"><a href="#侧边栏背景设置" class="headerlink" title="侧边栏背景设置"></a>侧边栏背景设置</h3><p>打开themes\next\source\css_partial\sidebar.styl<br>此配置文件中，可以找到 .sidebar(我的没有只有#sidebar,所以我f12查看了标签找到新的id,即如下)，修改其内部的属性参数即可实现设置侧边栏背景图片和字体颜色的功能</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.mdui-drawer &#123;</span><br><span class="line">    <span class="comment">//设置背景图片，图片放在Hexo\themes\theme-Meadow\source\images目录下</span></span><br><span class="line">    <span class="attr">background</span>:url(<span class="regexp">/images/</span>sidebar.jpg);	</span><br><span class="line">    background-size: cover;</span><br><span class="line">    background-position:center;</span><br><span class="line">    background-repeat:no-repeat;</span><br><span class="line">    bottom: <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (not hexo-config(<span class="string">&#x27;back2top.sidebar&#x27;</span>)) &#123;</span><br><span class="line">        box-shadow: inset <span class="number">0</span> 2px 6px black;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attr">position</span>: fixed;</span><br><span class="line">    top: <span class="number">0</span>;</span><br><span class="line">    transition: all $transition-ease-out;</span><br><span class="line">    width: $sidebar-desktop;</span><br><span class="line">    z-index: $zindex-<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    a &#123;</span><br><span class="line">        <span class="comment">//设置文字颜色</span></span><br><span class="line">        border-bottom-color: #FFFFFF;</span><br><span class="line">        color: #FFFFFF;</span><br><span class="line">        &amp;:hover &#123;</span><br><span class="line">            border-bottom-color: $FFFFFF;</span><br><span class="line">            color: #FFFFFF;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="更换背景"><a href="#更换背景" class="headerlink" title="更换背景"></a>更换背景</h3><p>在themes\next\source\css\main.styl文件最下面添加下面代码即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">    <span class="attr">background</span>:url(<span class="regexp">/images/</span>bg01.jpg);</span><br><span class="line">    background-repeat: no-repeat;</span><br><span class="line">    background-attachment:fixed;</span><br><span class="line">    background-position:<span class="number">50</span>% <span class="number">50</span>%;</span><br><span class="line">    color: <span class="keyword">var</span>(--text-color);</span><br><span class="line">    font-family: <span class="string">&#x27;Lato&#x27;</span>, <span class="string">&quot;PingFang SC&quot;</span>, <span class="string">&quot;Microsoft YaHei&quot;</span>, sans-serif;</span><br><span class="line">    font-size: 1em;</span><br><span class="line">    line-height: <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="设置透明度和中心文章栏加圆角"><a href="#设置透明度和中心文章栏加圆角" class="headerlink" title="设置透明度和中心文章栏加圆角"></a>设置透明度和中心文章栏加圆角</h3><p>单设置了背景图片还不是很完美，我们给所有的栏目设置一个小小的透明，会显得效果很好。<br>在themes\next\source\css\main.styl文件最下面添加下面代码即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 侧边标题栏更改透明度</span></span><br><span class="line">.header-inner &#123;</span><br><span class="line">    <span class="attr">opacity</span>: <span class="number">0.8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 侧边头像栏更改透明度</span></span><br><span class="line">.sidebar&#123;</span><br><span class="line">    transition-duration: <span class="number">0.</span>4s;  </span><br><span class="line">    opacity: <span class="number">0.8</span>;  <span class="comment">// 透明度</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中心文章栏更改透明度</span></span><br><span class="line">.content &#123;</span><br><span class="line">  padding-top: 15px;</span><br><span class="line">  opacity: <span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加圆角</span></span><br><span class="line"><span class="comment">//第一个文章</span></span><br><span class="line">.post-block &#123;</span><br><span class="line">  <span class="attr">background</span>: <span class="keyword">var</span>(--content-bg-color);</span><br><span class="line">  border-radius: 10px 10px 10px 10px; <span class="comment">//边框圆角</span></span><br><span class="line">  box-shadow: <span class="number">0</span> 2px 2px <span class="number">0</span> rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.12</span>), <span class="number">0</span> 3px 1px -2px rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.06</span>), <span class="number">0</span> 1px 5px <span class="number">0</span> rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.12</span>);</span><br><span class="line">  padding: 40px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//之后的所有文章</span></span><br><span class="line">.post-block + .post-block &#123;</span><br><span class="line">  border-radius: 10px 10px 10px 10px; <span class="comment">//边框圆角</span></span><br><span class="line">  box-shadow: <span class="number">0</span> 2px 2px <span class="number">0</span> rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.12</span>), <span class="number">0</span> 3px 1px -2px rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.06</span>), <span class="number">0</span> 1px 5px <span class="number">0</span> rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.12</span>), <span class="number">0</span> -1px <span class="number">0.</span>5px <span class="number">0</span> rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.09</span>);</span><br><span class="line">  margin-top: 12px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Read-More-按钮样式-黑底绿字"><a href="#Read-More-按钮样式-黑底绿字" class="headerlink" title="[Read More]按钮样式: 黑底绿字"></a>[Read More]按钮样式: 黑底绿字</h3><p>在themes\next\source\css\main.styl文件最下面添加如下代码即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.post-button .btn:hover &#123;</span><br><span class="line">  <span class="attr">color</span>: rgb(<span class="number">136</span>, <span class="number">255</span>, <span class="number">13</span>) !important;</span><br><span class="line">	background-color: rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.75</span>); <span class="comment">//black</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="页面底部页码样式"><a href="#页面底部页码样式" class="headerlink" title="页面底部页码样式"></a>页面底部页码样式</h3><p>在themes\next\source\css\main.styl文件最下面添加如下代码即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 页面底部页码</span></span><br><span class="line">.pagination .page-number.current &#123;</span><br><span class="line">    border-radius: <span class="number">100</span>%;</span><br><span class="line">    background-color: rgba(<span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">0.75</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 页面底部页码, 去除鼠标置于上方时，数字上方的线</span></span><br><span class="line">.pagination .prev, .pagination .next, .pagination .page-number &#123;</span><br><span class="line">    margin-bottom: 10px;</span><br><span class="line">    border: none;</span><br><span class="line">	color: rgb(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 页面底部页码，鼠标置于上方，黑底绿字</span></span><br><span class="line">.page-number:hover,.page-number:active&#123;</span><br><span class="line">	<span class="attr">color</span>: rgb(<span class="number">136</span>, <span class="number">255</span>, <span class="number">13</span>);</span><br><span class="line">  border-radius: <span class="number">100</span>%;</span><br><span class="line">	background-color: rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.75</span>); <span class="comment">//black</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="修改分类页的页面样式"><a href="#修改分类页的页面样式" class="headerlink" title="修改分类页的页面样式"></a>修改分类页的页面样式</h3><p>在themes\next\source\css\main.styl文件最下面添加如下代码即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 分类&amp;&amp;标签 页面样式</span></span><br><span class="line">.post-block.page &#123;</span><br><span class="line">    margin-top: 40px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 分类页面page</span></span><br><span class="line">.category-all-page &#123;</span><br><span class="line">    box-shadow: 0px 0px 10px 0px rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">    background-color: #797D7F;</span><br><span class="line">    padding: 20px 30px 60px 30px;</span><br><span class="line">    border-radius: 25px 25px 25px 25px;</span><br><span class="line">&#125;</span><br><span class="line">.category-all-title &#123;</span><br><span class="line">    font-family: Impact;</span><br><span class="line">    font-size: 24px;</span><br><span class="line">    color: aqua;</span><br><span class="line">&#125;</span><br><span class="line">.category-list &#123;</span><br><span class="line">    <span class="attr">overflow</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line">.category-list li &#123;</span><br><span class="line">    <span class="attr">height</span>: <span class="number">100</span>%;</span><br><span class="line">    float: left;</span><br><span class="line">    border-right: 3px solid #<span class="number">222</span>;</span><br><span class="line">    padding: <span class="number">0</span> 20px;</span><br><span class="line">&#125;</span><br><span class="line">.category-all ul li &#123;</span><br><span class="line">    list-style: none!important;</span><br><span class="line">&#125;</span><br><span class="line">.category-list li:last-child &#123;</span><br><span class="line">    border-right: none;</span><br><span class="line">&#125;</span><br><span class="line">.category-list li a &#123;</span><br><span class="line">    font-size: 16px;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">    color: chartreuse;</span><br><span class="line">    font-family: Helvetica, Verdana, sans-serif;</span><br><span class="line">    <span class="comment">// text-transform: uppercase;</span></span><br><span class="line">    -webkit-transition: all <span class="number">0.</span>5s ease;</span><br><span class="line">    -moz-transition: all <span class="number">0.</span>5s ease;</span><br><span class="line">    -o-transition: all <span class="number">0.</span>5s ease;</span><br><span class="line">    -ms-transition: all <span class="number">0.</span>5s ease;</span><br><span class="line">    transition: all <span class="number">0.</span>5s ease;</span><br><span class="line">&#125;</span><br><span class="line">.category-list li a:hover &#123;</span><br><span class="line">    <span class="attr">color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line">.category-list li.active a &#123;</span><br><span class="line">    font-weight: bold;</span><br><span class="line">    color: black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="修改彩色标签页的页面样式"><a href="#修改彩色标签页的页面样式" class="headerlink" title="修改彩色标签页的页面样式"></a>修改彩色标签页的页面样式</h3><p>在 /themes/next/layout/ 目录下，新增 tag-color.swig 文件，填入如下内容:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//直接覆盖掉源文件</span></span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">     <span class="keyword">var</span> alltags = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;tag-cloud-tags&#x27;</span>);</span><br><span class="line">     <span class="keyword">var</span> tags = alltags[<span class="number">0</span>].getElementsByTagName(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">var</span> i = tags.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">       <span class="keyword">var</span> r=<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">75</span>+<span class="number">130</span>);</span><br><span class="line">       <span class="keyword">var</span> g=<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">75</span>+<span class="number">100</span>);</span><br><span class="line">       <span class="keyword">var</span> b=<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">75</span>+<span class="number">80</span>);</span><br><span class="line">       tags[i].style.background = <span class="string">&quot;rgb(&quot;</span>+r+<span class="string">&quot;,&quot;</span>+g+<span class="string">&quot;,&quot;</span>+b+<span class="string">&quot;)&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="selector-class">.tag-cloud-tags</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="comment">/*font-family: Helvetica, Tahoma, Arial;*/</span></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="comment">/*font-weight: 100;*/</span></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">text-align</span>: center;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">counter-reset</span>: tags;</span></span></span><br><span class="line"><span class="css"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="selector-class">.tag-cloud-tags</span> <span class="selector-tag">a</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">padding-right</span>: <span class="number">5px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">padding-left</span>: <span class="number">5px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">margin</span>: <span class="number">8px</span> <span class="number">5px</span> <span class="number">0px</span> <span class="number">0px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="selector-class">.tag-cloud-tags</span> <span class="selector-tag">a</span>:before&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">    content: <span class="string">&quot;🔖&quot;</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="selector-class">.tag-cloud-tags</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">     <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">5px</span> <span class="number">15px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">4</span>);</span></span></span><br><span class="line"><span class="css"><span class="xml">     <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.1</span>);</span></span></span><br><span class="line"><span class="css"><span class="xml">     <span class="comment">/*box-shadow: 10px 10px 15px 2px rgba(0,0,0,.12), 0 0 6px 0 rgba(104, 104, 105, 0.1);*/</span></span></span></span><br><span class="line"><span class="css"><span class="xml">     <span class="attribute">transition-duration</span>: <span class="number">0.15s</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>在同级目录的 page.swig 中引入 tag-color.swig</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//找一下有没有相识的这一段，有的话覆盖掉，没有就粘贴上去  </span></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;tag-cloud&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 目前共计xxx个标签</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;tag-cloud-title&quot;</span>&gt;</span><br><span class="line">            &#123;&#123; _p(<span class="string">&#x27;counter.tag_cloud&#x27;</span>, site.tags.length) &#125;&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        --&gt;</span><br><span class="line">    </span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tag-cloud-tags&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          &#123;&#123; tagcloud(&#123;min_font: 10, max_font: 15, amount: 300, color: true, start_color: &#x27;#ccc&#x27;, end_color: &#x27;#111&#x27;&#125;) &#125;&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">+     &#123;% include <span class="string">&#x27;tag-color.swig&#x27;</span> %&#125;</span><br><span class="line">    </span><br><span class="line">    &#123;% elif page.type === <span class="string">&#x27;categories&#x27;</span> %&#125;</span><br><span class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;category-all-page&quot;</span>&gt;</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category-all-title&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#123;&#123; _p(&#x27;counter.categories&#x27;, site.categories.length) &#125;&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category-all&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          &#123;&#123; list_categories() &#125;&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      &lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="去掉博客顶部黑线"><a href="#去掉博客顶部黑线" class="headerlink" title="去掉博客顶部黑线"></a>去掉博客顶部黑线</h3><p>在themes\next\source\css\main.styl文件最下面添加如下代码即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//去掉博客顶部黑线</span></span><br><span class="line">.headband &#123;<span class="attr">display</span>:none;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="改掉题头颜色"><a href="#改掉题头颜色" class="headerlink" title="改掉题头颜色"></a>改掉题头颜色</h3><p>在themes\next\source\css\main.styl文件最下面添加如下代码即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//改掉题头颜色</span></span><br><span class="line">.site-brand-container &#123;</span><br><span class="line">  <span class="attr">background</span>: ; <span class="comment">//修改为自己喜欢的颜色</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="相册"><a href="#相册" class="headerlink" title="相册"></a>相册</h3><p>可以利用 next 的插件 group picture 来实现，他的原理很简单，就是利用 next 主题的 Tag Plugin 这种语法提供了一种展示图片的布局。</p>
<p>需要以下几步：</p>
<p>首先 hexo new page photos 新建一个名为 photos 的标签页，并且在 themes/next/languages/zh-CN.yml 中的 menu 一项下面添加 photos: 相册，这样在首页菜单栏才会显示中文相册。<br>其次，可以直接在 source/photos/index.md 写文章，并在需要插入图片的时候用以下方式来组织你的图片列表：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">## 某某地方玩</span><br><span class="line">&#123;% gp <span class="number">6</span>-<span class="number">3</span> %&#125;</span><br><span class="line">  ![](<span class="regexp">/images/</span>docs/github.png)</span><br><span class="line">  ![](<span class="regexp">/images/</span>docs/github.png)</span><br><span class="line">  ![](<span class="regexp">/images/</span>docs/github.png)</span><br><span class="line">  ![](<span class="regexp">/images/</span>docs/github.png)</span><br><span class="line">  ![](<span class="regexp">/images/</span>docs/github.png)</span><br><span class="line">  ![](<span class="regexp">/images/</span>docs/github.png)</span><br><span class="line">&#123;% endgp %&#125;</span><br><span class="line"></span><br><span class="line">其中 ‘<span class="number">6</span>-<span class="number">3</span>’ 的意思是改组一共有六张图片，每行排最多三张。除了图片之外其他的文字和章节标题都可以像往常一样加</span><br></pre></td></tr></table></figure>

<h3 id="为Next主题添加Valine评论系统，可参考这个"><a href="#为Next主题添加Valine评论系统，可参考这个" class="headerlink" title="为Next主题添加Valine评论系统，可参考这个"></a>为Next主题添加Valine评论系统，<a href="https://blog.csdn.net/jiunian_2761/article/details/97388997">可参考这个</a></h3><p>….后续更新</p>
]]></content>
      <categories>
        <category>搭建</category>
      </categories>
      <tags>
        <tag>next7.8</tag>
        <tag>主题</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo搭建github博客</title>
    <url>/2016/07/04/hexo/hexo%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<hr>
<span id="more"></span>
<p><a href="https://hexo.io/zh-cn">hexo官网</a></p>
<h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装<a href="https://git-scm.com/">git</a></h3><p>安装成功后将你的Git与GitHub帐号绑定</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git config --<span class="built_in">global</span> user.name <span class="string">&quot;你的GitHub用户名&quot;</span></span><br><span class="line">git config --<span class="built_in">global</span> user.email <span class="string">&quot;你的GitHub注册邮箱&quot;</span></span><br></pre></td></tr></table></figure>
<p>生成ssh密钥文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;你的GitHub注册邮箱&quot;</span></span><br></pre></td></tr></table></figure>
<p>然后直接三个回车即可，默认不需要设置密码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取公钥</span></span><br><span class="line">cat ~<span class="regexp">/.ssh/i</span>d_rsa.pub</span><br></pre></td></tr></table></figure>
<p>打开gitHub右上角 =&gt; Settings =&gt; SHH and GPG keys，新建new SSH Key，将id_rsa.pub密钥内容全部复制</p>
<h3 id="安装node（推荐nvm安装node）-Hexo基于Node-js"><a href="#安装node（推荐nvm安装node）-Hexo基于Node-js" class="headerlink" title="安装node（推荐nvm安装node）,Hexo基于Node.js"></a>安装node（推荐nvm安装node）,Hexo基于Node.js</h3><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>github上新建一个名为你的用户名.github.io的仓库，比如你的github用户名是test，那么你就新建test.github.io的仓库网站访问地址就是 <a href="http://test.github.io/">http://test.github.io</a> </p>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>新建一个名为hexo的文件夹（名字可以随便取），例如：Desktop\Blog，这个文件夹作为你存放代码的地方，所以最好不要随便放。</p>
<p>使用npm命令安装Hexo,并初始化</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cd Desktop/Blog</span><br><span class="line"></span><br><span class="line">npm install -g hexo</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<p>hexo会自动下载一些文件到这个目录</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//hexo init 可能会报错，如下</span></span><br><span class="line">~<span class="regexp">/Desktop/</span>Blog not empty, please run <span class="string">`hexo init`</span> on an empty folder and then copy your files into it</span><br><span class="line"><span class="comment">//方法：删除文件Blog,然后用命令创建Blog文件（mkdir Blog），然后再Blog init可以正常运行</span></span><br></pre></td></tr></table></figure>
<p>执行以上命令之后，hexo就会在public文件夹生成相关html文件，这些文件将来都是要提交到github去的：<br>hexo s是开启本地预览服务，打开浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a> 即可看到内容，很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故，因为4000这个端口太常见了，解决端口冲突问题请参考这篇文章：<a href="http://blog.liuxianan.com/windows-port-bind.html">端口冲突</a><br>第一次初始化的时候hexo已经帮我们写了一篇名为 Hello World 的文章，默认的主题比较丑</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo命令简写</span><br><span class="line">hexo n <span class="string">&quot;文章名&quot;</span> == hexo <span class="keyword">new</span> <span class="string">&quot;文章名&quot;</span> <span class="comment">// 新建文章</span></span><br><span class="line"></span><br><span class="line">hexo g == hexo generate <span class="comment">// 生成</span></span><br><span class="line"></span><br><span class="line">hexo s == hexo server <span class="comment">// 启动服务预览</span></span><br><span class="line"></span><br><span class="line">hexo d == hexo deploy <span class="comment">// 部署到github上</span></span><br><span class="line"></span><br><span class="line">hexo clean <span class="comment">// 清除缓存</span></span><br><span class="line"></span><br><span class="line">hexo g -d <span class="comment">// 生成并部署到github上</span></span><br></pre></td></tr></table></figure>

<h3 id="推送网站"><a href="#推送网站" class="headerlink" title="推送网站"></a>推送网站</h3><p>上面只是在本地预览，接下来要做的就是就是推送网站，也就是发布网站，让我们的网站可以被更多的人访问。在设置之前，需要解释一个概念：</p>
<pre><code>1）、在blog根目录里的_config.yml文件称为`站点配置文件`

2）、根目录里的themes文件夹，里面也有个_config.yml文件，这个称为`主题配置文件`
</code></pre>
<p>下一步将我们的Hexo与GitHub关联起来，打开<code>站点的配置文件</code>_config.yml，翻到最后修改为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line"><span class="attr">repo</span>: 这里填入你之前在GitHub上创建仓库的完整路径，记得加上 .git</span><br><span class="line"><span class="comment">// 例如 git@github.com:xx/xx.github.io.git</span></span><br><span class="line"><span class="attr">branch</span>: master</span><br><span class="line"></span><br><span class="line">其实就是给hexo d 这个命令做相应的配置,让hexo知道你要把blog部署在哪里</span><br></pre></td></tr></table></figure>
<p>最后安装Git部署插件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"><span class="comment">//如果没安装第一次hexo d时是会报错的 ERROR Deployer not found: git</span></span><br></pre></td></tr></table></figure>
<p>然后执行上面说的命令就可以推送网站了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo clean <span class="comment">// 清除缓存</span></span><br><span class="line"></span><br><span class="line">hexo g -d <span class="comment">// 生成并部署到github上</span></span><br></pre></td></tr></table></figure>
<p>打开浏览器，在地址栏输入你的放置个人网站的仓库路径，即 xxxx.github.io就可以访问了</p>
<h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p>不绑定域名肯定也是可以的，用默认的 xxx.github.io 来访问，</p>
<p>如果想拥有自己的域名，要注册一个，<a href="https://wanwang.aliyun.com/domain/1yuan">阿里的1元购</a>,其实也不是1元，就是一年十几到几十块钱不等。</p>
<blockquote>
<p>建议：如果你买到了喜欢的域名，请尽可能买的长一点。否则到续费的时候你可能追悔莫及，而且如果你需要备案更换域名也会很麻烦(这里github不用备案)</p>
</blockquote>
<p>域名绑定与解析</p>
<p>1）在你购买后打开域名控制台 =&gt; 点开解析添加如下两条记录</p>
<table>
<thead>
<tr>
<th align="left">主机记录</th>
<th align="left">记录类型</th>
<th align="left">解析请求来源</th>
<th align="left">记录值</th>
<th align="left">TTL</th>
</tr>
</thead>
<tbody><tr>
<td align="left">www</td>
<td align="left">CNAME</td>
<td align="left">默认</td>
<td align="left">xxxx.github.io</td>
<td align="left">10分钟</td>
</tr>
<tr>
<td align="left">@</td>
<td align="left">A</td>
<td align="left">默认</td>
<td align="left">185.199.1xx.1xx</td>
<td align="left">10分钟</td>
</tr>
</tbody></table>
<blockquote>
<p><code>CNAME</code>记录的记录值设置成域名，也就是你的github主页<code>xxxx.github.io</code><br><code>A</code>记录的记录值设置为IP地址，通过<code>ping xxxx.github.io</code> 获得</p>
</blockquote>
<p>2）然后在你Blog文件的根目录的source文件夹下新建一个CNAME文件（不要有任何后缀），在里面写入自己的域名（假如你买的域名是<code>zhangsan.xyz</code>,CNAME文件里就写<code>zhangsan.xyz</code>）</p>
<p>3）最后在你Github找到仓库<code>xxxx.github.io</code>，点击Settings =&gt; pages =&gt;往下拉找到 Custom domain =&gt; 填入你的域名保存</p>
<p>4）大功告成，现在你就可以通过你的域名访问你的网站了<br>另外说一句，在你绑定了新域名之后，原来的你的<code>xxxx.github.io</code>并没有失效，而是会自动跳转到你的新域名</p>
<h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>如果你不喜欢Hexo默认的主题，可以去官网更换不同的主题</p>
<p>在hexo目录下的themes文件夹下，下载</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/iissnan/hexo-theme-next  //复制主题的网址</span></span><br></pre></td></tr></table></figure>
<p>配置_config.yml文件</p>
<p>打开hexo目录下的<code>站点的配置文件</code>_config.yml，修改主题theme : 下载的主题名。<code>注意冒号之后的空格</code></p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>默认情况下，生成的博文目录会显示全部的文章内容，如何设置文章摘要的长度呢？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">在合适的位置加上&lt;!--more--&gt;即可</span><br></pre></td></tr></table></figure>

















]]></content>
      <categories>
        <category>搭建</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>在github上在线演示项目</title>
    <url>/2018/06/27/github/github%E4%B8%8A%E5%9C%A8%E7%BA%BF%E6%BC%94%E7%A4%BA%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<hr>
<p>我们经常能看到别人的GitHub上的项目源码中，后面会跟着一个demo演示网址，，我们是不是也可以把自己的项目这样放到GitHub上去，让它启动起来，不再是冰冷的code。下面来看看是怎么操作的吧(仅供参考)</p>
<span id="more"></span>
<h3 id="首先创建一个新的项目，创建就不多说了，相信用过github的小伙伴都会"><a href="#首先创建一个新的项目，创建就不多说了，相信用过github的小伙伴都会" class="headerlink" title="首先创建一个新的项目，创建就不多说了，相信用过github的小伙伴都会"></a>首先创建一个新的项目，创建就不多说了，相信用过github的小伙伴都会</h3><h3 id="然后克隆你的项目到本地"><a href="#然后克隆你的项目到本地" class="headerlink" title="然后克隆你的项目到本地"></a>然后克隆你的项目到本地</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git clone 项目地址</span><br></pre></td></tr></table></figure>
<h3 id="然后正常的创建项目和提交代码"><a href="#然后正常的创建项目和提交代码" class="headerlink" title="然后正常的创建项目和提交代码"></a>然后正常的创建项目和提交代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cd  创建的项目</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;提交master上代码&#x27;</span> <span class="comment">//注意我们是在master主分支上。（当前是只有master分支的）</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure>
<h3 id="最关键的来了，建立gh-pages分支，再将项目重新上传到该分支上"><a href="#最关键的来了，建立gh-pages分支，再将项目重新上传到该分支上" class="headerlink" title="最关键的来了，建立gh-pages分支，再将项目重新上传到该分支上"></a>最关键的来了，建立gh-pages分支，再将项目重新上传到该分支上</h3><p>master分支仅是浏览代码，而无法将页面直接在网页打开，而gh-pages分支则是用于直接浏览源码页面的分支。当我们写项目的时候，需要部署一个预览页面，就可以采用github的gh-pages分支制作GitHub Pages</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">git checkout -b gh-pages  <span class="comment">//新建一个gh-pages分支并切换到该分支 创建分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//分开来就是 创建分支：git branch &lt;分支名&gt;    git checkout &lt;分支名&gt;</span></span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;提交gh-pages上代码&quot;</span></span><br><span class="line">git push -u origin gh-pages</span><br><span class="line"></span><br><span class="line">接下来就可以成功访问啦!</span><br><span class="line"></span><br><span class="line"><span class="string">`访问地址 https://用户名.github.io/项目名称/文件路径`</span></span><br><span class="line"></span><br><span class="line">网址实在记不住的话可以点击github上你项目右上角Settings-&gt;左边pages-&gt;第一行GitHub Pages就有你的网址</span><br></pre></td></tr></table></figure>
<h3 id="但是，我每次都要上传两份代码，太繁琐了"><a href="#但是，我每次都要上传两份代码，太繁琐了" class="headerlink" title="但是，我每次都要上传两份代码，太繁琐了"></a>但是，我每次都要上传两份代码，太繁琐了</h3><p>master修改后如何自动同步到gh-pages分支<br>每次当作品发生更改变动后，要先提交到master分支然后切换到gh-pages分支又重新提交一次，显然这个过程非常繁琐。接下我们介绍一种方法，只需提交到master分支即可，gh-pages分支无需重新提交，就可实现在线预览：</p>
<p>打开github项目文件的根目录，先找到.git 这个文件夹（文件夹默认是隐藏的），然后找到config这个文件，并打开该文件，将以下两行添加到[remote “origin”]部分</p>
<p>push = +refs/heads/master:refs/heads/gh-pages</p>
<p>push = +refs/heads/master:refs/heads/master</p>
<p>测试了下，可以</p>
<p>上面说的是将相同的代码同时上传到master和gh-pges里</p>
<h3 id="那如何将打包后的dist文件夹push到gh-pages"><a href="#那如何将打包后的dist文件夹push到gh-pages" class="headerlink" title="那如何将打包后的dist文件夹push到gh-pages"></a>那如何将打包后的dist文件夹push到gh-pages</h3><p>第一步跟上面一样写完的项目上传到master上去，</p>
<p>第二步执行下面代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm run build</span><br><span class="line">git checkout -b gh-pages</span><br><span class="line">git add -f dist</span><br><span class="line">git commit -m <span class="string">&#x27;first commit&#x27;</span></span><br><span class="line">git subtree push --prefix dist origin gh-pages</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>然后就可以直接在浏览器查看效果了</p>
<h3 id="既然说到打包了，那就说一下打包遇到的问题"><a href="#既然说到打包了，那就说一下打包遇到的问题" class="headerlink" title="既然说到打包了，那就说一下打包遇到的问题"></a>既然说到打包了，那就说一下打包遇到的问题</h3><h4 id="vue2"><a href="#vue2" class="headerlink" title="vue2:"></a>vue2:</h4><blockquote>
<p>1、img标签src引用的图片打包上线后无法加载<br>解决方案：config/index.js 中的 assetsPublicPath值改成 ./ （比默认多一个.）</p>
</blockquote>
<p>assetsPublicPath：资源的根目录。这个是通过http服务器运行的url路径。因为webapp和static中间还有层dist,所以要用’./‘<br><img src="/images/vue2question01.jpg" alt="问题1"></p>
<blockquote>
<p>2、css中的背景图片打包上线后无法加载<br>解决方案：build/utils.js 中的 fallback: ‘vue-style-loader’ 下一行加上 publicPath: ‘../../‘（fallback那行检查末尾有没有英文逗号，没有加上）</p>
</blockquote>
<p>因为打包后生成的是dist文件夹 文件夹中是static文件夹和index.html static文件夹中包含css fonts img js等文件夹 我们写好的css内容在css文件夹中的app.css中 要访问的图片内容在img下 所以要../../才可以访问到<br><img src="/images/vue2question02.jpg" alt="问题2"></p>
<blockquote>
<p>3、动态绑定src 应使用require方式引入<br><img src="/images/vue2question03.jpg" alt="问题3"></p>
</blockquote>
]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>js怎样读取json里面的数据</title>
    <url>/2016/09/02/json/js%E6%80%8E%E6%A0%B7%E8%AF%BB%E5%8F%96json%E9%87%8C%E9%9D%A2%E7%9A%84%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<hr>
<span id="more"></span>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> json = &#123;  </span><br><span class="line">        <span class="attr">contry</span>:&#123; </span><br><span class="line">            <span class="attr">area</span>:&#123; </span><br><span class="line">                <span class="attr">man</span>:<span class="string">&quot;12万&quot;</span>,  </span><br><span class="line">                <span class="attr">women</span>:<span class="string">&quot;10万&quot;</span> </span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="comment">//方式一：使用eval解析  </span></span><br><span class="line">	<span class="keyword">var</span> obj = <span class="built_in">eval</span>(json);  </span><br><span class="line">		alert(obj.constructor);</span><br><span class="line">		alert(obj.contry.area.women);  </span><br><span class="line"> </span><br><span class="line"><span class="comment">//方式二：使用Funtion函数  </span></span><br><span class="line">	<span class="keyword">var</span> strJSON = <span class="string">&quot;&#123;name:&#x27;json name&#x27;&#125;&quot;</span>;<span class="comment">//得到的JSON  </span></span><br><span class="line">	<span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&quot;return&quot;</span> + strJSON)();<span class="comment">//转换后的JSON对象  </span></span><br><span class="line">	    alert(obj.name);<span class="comment">//json name  </span></span><br><span class="line">	    alert(obj.constructor);</span><br><span class="line">       </span><br><span class="line"><span class="comment">//复杂一点的json数组数据的解析  </span></span><br><span class="line"><span class="keyword">var</span> value1 = [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;a01&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;a02&quot;</span>:<span class="string">&quot;2&quot;</span>,</span><br><span class="line">            <span class="string">&quot;a03&quot;</span>:<span class="string">&quot;3&quot;</span>,</span><br><span class="line">            <span class="string">&quot;a04&quot;</span>:<span class="string">&quot;4&quot;</span>,</span><br><span class="line">        &#125;, </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;b01&quot;</span>:<span class="string">&quot;2&quot;</span>,</span><br><span class="line">            <span class="string">&quot;b02&quot;</span>:<span class="string">&quot;4&quot;</span>,</span><br><span class="line">            <span class="string">&quot;b03&quot;</span>:<span class="string">&quot;5&quot;</span>,</span><br><span class="line">            <span class="string">&quot;b04&quot;</span>:<span class="string">&quot;2&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;c01&quot;</span>:<span class="string">&quot;5&quot;</span>,</span><br><span class="line">            <span class="string">&quot;c02&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;c03&quot;</span>:<span class="string">&quot;4&quot;</span>,</span><br><span class="line">            <span class="string">&quot;c04&quot;</span>:<span class="string">&quot;11&quot;</span>,   </span><br><span class="line">        &#125;</span><br><span class="line">    ];   </span><br><span class="line">	<span class="keyword">var</span> obj1 = <span class="built_in">eval</span>(value1);  </span><br><span class="line">	alert(obj1[<span class="number">0</span>].c01); </span><br><span class="line"> </span><br><span class="line"><span class="comment">//复杂一点的json的另一种形式  </span></span><br><span class="line"><span class="keyword">var</span> value2 = &#123;</span><br><span class="line">        <span class="string">&quot;list&quot;</span>:[ </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;password&quot;</span>:<span class="string">&quot;1230&quot;</span>,</span><br><span class="line">                <span class="string">&quot;username&quot;</span>:<span class="string">&quot;coolcooldool&quot;</span></span><br><span class="line">            &#125;, </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;password&quot;</span>:<span class="string">&quot;thisis2&quot;</span>,</span><br><span class="line">                <span class="string">&quot;username&quot;</span>:<span class="string">&quot;okokok&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ], </span><br><span class="line">        <span class="string">&quot;array&quot;</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;password&quot;</span>:<span class="string">&quot;1230&quot;</span>,</span><br><span class="line">                <span class="string">&quot;username&quot;</span>:<span class="string">&quot;coolcooldool&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;password&quot;</span>:<span class="string">&quot;thisis2&quot;</span>,</span><br><span class="line">                <span class="string">&quot;username&quot;</span>:<span class="string">&quot;okokok&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;;  </span><br><span class="line">	<span class="keyword">var</span> obj2 = <span class="built_in">eval</span>(value2);  </span><br><span class="line">	alert(obj2.list[<span class="number">0</span>].password);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JSON</category>
      </categories>
      <tags>
        <tag>json</tag>
        <tag>数据</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6+新特性</title>
    <url>/2019/06/27/js/ES6+%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<hr>
<span id="more"></span>
<h3 id="ES6-2015"><a href="#ES6-2015" class="headerlink" title="ES6(2015)"></a>ES6(2015)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、类（<span class="class"><span class="keyword">class</span>）</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Man</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&#x27;赵十三&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">console</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> man = <span class="keyword">new</span> Man(<span class="string">&#x27;赵十三&#x27;</span>);</span><br><span class="line">man.console(); <span class="comment">// 赵十三</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、模块化(ES Module)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模块 A 导出一个方法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> sub = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span><br><span class="line"><span class="comment">// 模块 B 导入使用</span></span><br><span class="line"><span class="keyword">import</span> &#123; sub &#125; <span class="keyword">from</span> <span class="string">&#x27;./A&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(sub(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、箭头（Arrow）函数</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> func = <span class="function">(<span class="params">a,b</span>) =&gt;</span> <span class="built_in">console</span>.log(a + b);</span><br><span class="line">func(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、函数参数默认值</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">a = <span class="number">11</span>,</span>)</span>&#123;</span><br><span class="line">	<span class="comment">// 调用func函数未传参数时，控制台默认打印 11</span></span><br><span class="line">	<span class="comment">// 调用func函数传了参数时，控制台打印传的参数</span></span><br><span class="line">	<span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、模板字符串</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;赵十三&#x27;</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">`我的名字是<span class="subst">$&#123;name&#125;</span>`</span></span><br><span class="line"><span class="built_in">console</span>.log(str) <span class="comment">// 我的名字是赵十三</span></span><br><span class="line"></span><br><span class="line"><span class="number">6</span>、解构赋值（注意范例里边的重点注意事项）</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a, b, rest;</span><br><span class="line">[a, b] = [<span class="number">10</span>, <span class="number">20</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将剩余的值赋值给一个变量</span></span><br><span class="line">[a, b, ...rest] = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 20</span></span><br><span class="line"><span class="built_in">console</span>.log(rest); <span class="comment">// [30, 40, 50]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构对象</span></span><br><span class="line">(&#123; a, b &#125; = &#123; <span class="attr">a</span>: <span class="number">10</span>, <span class="attr">b</span>: <span class="number">20</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Stage 4（已完成）提案中的特性</span></span><br><span class="line"><span class="comment">// 结构对象 + 将剩余对象赋值给一个变量</span></span><br><span class="line"><span class="comment">// 注意：1、赋值语句周围的圆括号 ( ... ) 在使用对象字面量无声明解构赋值时是必须的！！！！！！一定要注意！！！！！！</span></span><br><span class="line"><span class="comment">// 注意：2、( ... ) 表达式之前需要有一个分号，否则它可能会被当成上一行中的函数执行！！！！！！！！</span></span><br><span class="line">(&#123;a, b, ...rest&#125; = &#123;<span class="attr">a</span>: <span class="number">10</span>, <span class="attr">b</span>: <span class="number">20</span>, <span class="attr">c</span>: <span class="number">30</span>, <span class="attr">d</span>: <span class="number">40</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 20</span></span><br><span class="line"><span class="built_in">console</span>.log(rest); <span class="comment">// &#123;c: 30, d: 40&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换变量</span></span><br><span class="line">a = <span class="number">1</span>;b = <span class="number">3</span>;</span><br><span class="line">[a, b] = [b, a];</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="number">7</span>、延展操作符</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = [...<span class="string">&#x27;hello world&#x27;</span>]; <span class="comment">// [&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;, &quot; &quot;, &quot;w&quot;, &quot;o&quot;, &quot;r&quot;, &quot;l&quot;, &quot;d&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="number">8</span>、对象属性简写</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> name=<span class="string">&#x27;小豪&#x27;</span>,</span><br><span class="line"><span class="keyword">const</span> obj = &#123; name &#125;;</span><br><span class="line"></span><br><span class="line"><span class="number">9</span>、<span class="built_in">Promise</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function">() =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="number">2</span>); &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 先打印 1 ，再打印 2</span></span><br><span class="line"></span><br><span class="line"><span class="number">10</span>、<span class="keyword">let</span>和<span class="keyword">const</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;小豪&#x27;</span></span><br><span class="line"><span class="keyword">const</span> arr = [];</span><br></pre></td></tr></table></figure>

<h3 id="ES7-2016"><a href="#ES7-2016" class="headerlink" title="ES7(2016)"></a>ES7(2016)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、<span class="built_in">Array</span>.prototype.includes() – 可用来做模糊搜索 返回值布尔值</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>].includes(<span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>指数操作符</span><br><span class="line"><span class="number">2</span>**<span class="number">10</span>   <span class="comment">// 1024 -- 不太懂</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="ES8-2017"><a href="#ES8-2017" class="headerlink" title="ES8(2017)"></a>ES8(2017)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、<span class="keyword">async</span>/<span class="keyword">await</span> – 异步终极解决方案</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">getData</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> api.getTableData(); <span class="comment">// await 异步任务</span></span><br><span class="line">    <span class="comment">// do something    </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、</span><br><span class="line"><span class="built_in">Object</span>.keys() – 取出键值 变为数组</span><br><span class="line"><span class="built_in">Object</span>.values() – 取出对象值 变为数组</span><br><span class="line"><span class="built_in">Object</span>.entries() – 把对象变为数组 键值对下标为字符串</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys(&#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>&#125;); <span class="comment">//  [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br><span class="line"><span class="built_in">Object</span>.values(&#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>&#125;); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="built_in">Object</span>.entries(&#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>&#125;); <span class="comment">// [[&quot;a&quot;, 1], [&quot;b&quot;, 2], [&quot;c&quot;, 3]]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、<span class="built_in">String</span> padding 字符串的padding</span><br><span class="line">‘hello’.padStart(<span class="number">10</span>); <span class="comment">// &quot; hello&quot;</span></span><br><span class="line">‘hello’.padEnd(<span class="number">10</span>) <span class="string">&quot;hello &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、函数参数列表结尾允许逗号</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>、<span class="built_in">Object</span>.getOwnPropertyDescriptors()</span><br><span class="line">获取一个对象的所有自身属性的描述符,如果没有任何自身属性，则返回空对象</span><br><span class="line"></span><br><span class="line"><span class="number">7</span>、SharedArrayBuffer对象 SharedArrayBuffer 对象用来表示一个通用的，固定长度的原始二进制数据缓冲区 – 了解即可</span><br><span class="line"><span class="comment">// 语法：new SharedArrayBuffer(length)</span></span><br><span class="line"><span class="comment">// 参数：length指所创建的数组缓冲区的大小，以字节(byte)为单位。</span></span><br><span class="line"><span class="comment">// 返回值：一个大小指定的新 SharedArrayBuffer 对象。其内容被初始化为 0。</span></span><br><span class="line"><span class="comment">// 注意：需要new运算符构造</span></span><br><span class="line"><span class="comment">// 创建一个1024字节的缓冲</span></span><br><span class="line"><span class="keyword">let</span> sab = <span class="keyword">new</span> SharedArrayBuffer(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">8</span>、Atomics对象</span><br><span class="line">Atomics 对象提供了一组静态方法用来对 SharedArrayBuffer 对象进行原子操作</span><br></pre></td></tr></table></figure>
<h3 id="ES9-2018"><a href="#ES9-2018" class="headerlink" title="ES9(2018)"></a>ES9(2018)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、异步迭代</span><br><span class="line"><span class="keyword">await</span>可以和<span class="keyword">for</span>…<span class="keyword">of</span>循环一起使用，以串行的方式运行异步操作</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">let</span> i <span class="keyword">of</span> array) &#123;</span><br><span class="line">    <span class="comment">// doSomething(i);</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、<span class="built_in">Promise</span>.finally()</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then().catch(<span class="function"><span class="params">e</span> =&gt;</span> e).finally();</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、Rest/Spread 属性 – 找出数组中的最大值</span><br><span class="line">用于对象解构的 rest 操作符(…)。目前，这个操作符只能在数组解构和参数定义中使用</span><br><span class="line">对象字面量中的 spread 操作符(…)。目前，这个操作符只能用于数组字面量和在函数方法中调用</span><br><span class="line"></span><br><span class="line"><span class="comment">// 展开运算符（...）</span></span><br><span class="line"><span class="keyword">const</span> values = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">Math</span>.max(...values) ); <span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 剩余运算符（...）</span></span><br><span class="line"><span class="keyword">const</span> style = &#123;</span><br><span class="line">  <span class="attr">width</span>: <span class="number">300</span>,</span><br><span class="line">  <span class="attr">marginLeft</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">marginRight</span>: <span class="number">30</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> &#123; width, ...margin &#125; = style;</span><br><span class="line"><span class="built_in">console</span>.log(width);  <span class="comment">// =&gt; 300</span></span><br><span class="line"><span class="built_in">console</span>.log(margin); <span class="comment">// =&gt; &#123; marginLeft: 10, marginRight: 30 &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、正则表达式命名捕获组</span><br><span class="line">JavaScript正则表达式可以返回一个匹配的对象——一个包含匹配字符串的类数组，例如：以YYYY-MM-DD的格式解析日期</span><br><span class="line"><span class="keyword">const</span></span><br><span class="line">  reDate = <span class="regexp">/([0-9]&#123;4&#125;)-([0-9]&#123;2&#125;)-([0-9]&#123;2&#125;)/</span>,</span><br><span class="line">  match  = reDate.exec(<span class="string">&#x27;2018-04-30&#x27;</span>),</span><br><span class="line">  year   = match[<span class="number">1</span>], <span class="comment">// 2018</span></span><br><span class="line">  month  = match[<span class="number">2</span>], <span class="comment">// 04</span></span><br><span class="line">  day    = match[<span class="number">3</span>]; <span class="comment">// 30</span></span><br><span class="line"></span><br><span class="line">这样的代码很难读懂，并且改变正则表达式的结构有可能改变匹配对象的索引。</span><br><span class="line">ES2018允许命名捕获组使用符号?&lt;name&gt;，在打开捕获括号(后立即命名，示例如下</span><br><span class="line"> <span class="keyword">const</span></span><br><span class="line">  reDate = <span class="regexp">/(?&lt;year&gt;[0-9]&#123;4&#125;)-(?&lt;month&gt;[0-9]&#123;2&#125;)-(?&lt;day&gt;[0-9]&#123;2&#125;)/</span>,</span><br><span class="line">  match  = reDate.exec(<span class="string">&#x27;2018-04-30&#x27;</span>),</span><br><span class="line">  year   = match.groups.year,  <span class="comment">// 2018</span></span><br><span class="line">  month  = match.groups.month, <span class="comment">// 04</span></span><br><span class="line">  day    = match.groups.day;   <span class="comment">// 30</span></span><br><span class="line"></span><br><span class="line">任何匹配失败的命名组都将返回<span class="literal">undefined</span>。</span><br><span class="line">命名捕获也可以使用在replace()方法中。例如将日期转换为美国的 MM-DD-YYYY 格式</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span></span><br><span class="line">  reDate = <span class="regexp">/(?&lt;year&gt;[0-9]&#123;4&#125;)-(?&lt;month&gt;[0-9]&#123;2&#125;)-(?&lt;day&gt;[0-9]&#123;2&#125;)/</span>,</span><br><span class="line">  d      = <span class="string">&#x27;2018-04-30&#x27;</span>,</span><br><span class="line">  usDate = d.replace(reDate, <span class="string">&#x27;$&lt;month&gt;-$&lt;day&gt;-$&lt;year&gt;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、正则表达式反向断言</span><br><span class="line">目前JavaScript在正则表达式中支持先行断言（lookahead）。这意味着匹配会发生，但不会有任何捕获，并且断言没有包含在整个匹配字段中。例如从价格中捕获货币符号</span><br><span class="line"><span class="keyword">const</span></span><br><span class="line">  reLookahead = <span class="regexp">/\D(?=\d+)/</span>,</span><br><span class="line">  match       = reLookahead.exec(<span class="string">&#x27;$123.89&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log( match[<span class="number">0</span>] ); <span class="comment">// $</span></span><br><span class="line"></span><br><span class="line">ES2018引入以相同方式工作但是匹配前面的反向断言（lookbehind），这样我就可以忽略货币符号，单纯的捕获价格的数字：</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span></span><br><span class="line">  reLookbehind = <span class="regexp">/(?&lt;=\D)\d+/</span>,</span><br><span class="line">  match        = reLookbehind.exec(<span class="string">&#x27;$123.89&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( match[<span class="number">0</span>] ); <span class="comment">// 123.89</span></span><br><span class="line"></span><br><span class="line">以上是 肯定反向断言，非数字\D必须存在。同样的，还存在 否定反向断言，表示一个值必须不存在，例如</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span></span><br><span class="line">  reLookbehindNeg = <span class="regexp">/(?&lt;!\D)\d+/</span>,</span><br><span class="line">  match           = reLookbehind.exec(<span class="string">&#x27;$123.89&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( match[<span class="number">0</span>] ); <span class="comment">// null</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">6</span>、正则表达式dotAll模式 正则表达式中点.匹配除回车外的任何单字符，标记s改变这种行为，允许行终止符的出现</span><br><span class="line">/hello.world/.test(<span class="string">&#x27;hello\nworld&#x27;</span>);  <span class="comment">// false</span></span><br><span class="line"><span class="regexp">/hello.world/</span>s.test(<span class="string">&#x27;hello\nworld&#x27;</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="ES10-2019"><a href="#ES10-2019" class="headerlink" title="ES10(2019)"></a>ES10(2019)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、<span class="built_in">Array</span>.flat()和<span class="built_in">Array</span>.flatMap()</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]].flat(<span class="literal">Infinity</span>); <span class="comment">// [1, 2, 3, 4]   // flat  可以把嵌套数组的值取出来  成为一个数组</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].flatMap(<span class="function"><span class="params">a</span> =&gt;</span> [a**<span class="number">2</span>]); <span class="comment">// [1, 4, 9, 16]  -- 看不懂</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、<span class="built_in">String</span>.trimStart()和<span class="built_in">String</span>.trimEnd() 去除字符串首尾空白字符</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、<span class="built_in">String</span>.prototype.matchAll 为所有匹配的匹配对象返回一个迭代器</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、<span class="built_in">Symbol</span>.prototype.description 只读属性，回 <span class="built_in">Symbol</span> 对象的可选描述的字符串</span><br><span class="line"><span class="built_in">Symbol</span>(<span class="string">&#x27;description&#x27;</span>).description; <span class="comment">// &#x27;description&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、<span class="built_in">Object</span>.fromEntries() 返回一个给定对象自身可枚举属性的键值对数组</span><br><span class="line"><span class="comment">// 通过 Object.fromEntries， 可以将 Map 转化为 Object:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([ [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>], [<span class="string">&#x27;baz&#x27;</span>, <span class="number">42</span>] ]);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.fromEntries(map)); <span class="comment">// &#123; foo: &quot;bar&quot;, baz: 42 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="number">6</span>、可选 Catch</span><br></pre></td></tr></table></figure>

<h3 id="ES11-2020"><a href="#ES11-2020" class="headerlink" title="ES11(2020)"></a>ES11(2020)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、Nullish coalescing Operator(空值处理)</span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">    <span class="attr">u1</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">u2</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">u3</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">u4</span>: <span class="literal">undefined</span></span><br><span class="line">    <span class="attr">u5</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> u2 = user.u2 ?? <span class="string">&#x27;用户2&#x27;</span>  <span class="comment">// false</span></span><br><span class="line"><span class="keyword">let</span> u3 = user.u3 ?? <span class="string">&#x27;用户3&#x27;</span>  <span class="comment">// 用户3</span></span><br><span class="line"><span class="keyword">let</span> u4 = user.u4 ?? <span class="string">&#x27;用户4&#x27;</span>  <span class="comment">// 用户4</span></span><br><span class="line"><span class="keyword">let</span> u5 = user.u5 ?? <span class="string">&#x27;用户5&#x27;</span>  <span class="comment">// &#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、Optional chaining（可选链） ?.用户检测不确定的中间节点</span><br><span class="line"><span class="keyword">let</span> user = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> u1 = user.childer.name <span class="comment">// TypeError: Cannot read property &#x27;name&#x27; of undefined</span></span><br><span class="line"><span class="keyword">let</span> u1 = user.childer?.name <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、<span class="built_in">Promise</span>.allSettled 返回一个在所有给定的promise已被决议或被拒绝后决议的promise，并带有一个对象数组，每个对象表示对应的promise结果</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、<span class="keyword">import</span>() 按需导入</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、新基本数据类型<span class="built_in">BigInt</span> 任意精度的整数</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>、globalThis</span><br><span class="line">浏览器：<span class="built_in">window</span></span><br><span class="line">worker：self</span><br><span class="line">node：<span class="built_in">global</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="ES12-2021"><a href="#ES12-2021" class="headerlink" title="ES12(2021)"></a>ES12(2021)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、replaceAll 返回一个全新的字符串，所有符合匹配规则的字符都将被替换掉</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line">str.replaceAll(<span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;&#x27;</span>); <span class="comment">// &quot;heo word&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、<span class="built_in">Promise</span>.any</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.any() 接收一个<span class="built_in">Promise</span>可迭代对象，只要其中的一个 promise 成功，就返回那个已经成功的 promise 。如果可迭代对象中没有一个 promise 成功（即所有的 promises 都失败/拒绝），就返回一个失败的 promise</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> reject(<span class="string">&#x27;我是失败的Promise_1&#x27;</span>));</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> reject(<span class="string">&#x27;我是失败的Promise_2&#x27;</span>));</span><br><span class="line"><span class="keyword">const</span> promiseList = [promise1, promise2];</span><br><span class="line"><span class="built_in">Promise</span>.any(promiseList)</span><br><span class="line">.then(<span class="function"><span class="params">values</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(values);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">e</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、WeakRefs</span><br><span class="line">使用WeakRefs的Class类创建对对象的弱引用(对对象的弱引用是指当该对象应该被GC回收时不会阻止GC的回收行为)</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、逻辑运算符和赋值表达式</span><br><span class="line">逻辑运算符和赋值表达式，新特性结合了逻辑运算符（&amp;&amp;，||，??）和赋值表达式而JavaScript已存在的 复合赋值运算符有</span><br><span class="line"></span><br><span class="line">a ||= b</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line">a = a || (a = b)</span><br><span class="line"></span><br><span class="line">a &amp;&amp;= b</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line">a = a &amp;&amp; (a = b)</span><br><span class="line"></span><br><span class="line">a ??= b</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line">a = a ?? (a = b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、数字分隔符</span><br><span class="line">数字分隔符，可以在数字之间创建可视化分隔符，通过_下划线来分割数字，使数字更具可读性</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> money = <span class="number">1_000_000_000</span>;</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="keyword">const</span> money = <span class="number">1000000000</span>;</span><br><span class="line"><span class="number">1_000_000_000</span> === <span class="number">1000000000</span>;  <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">....后续更新</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ES6+新特性</category>
      </categories>
      <tags>
        <tag>ES6</tag>
        <tag>ES7</tag>
        <tag>ES8</tag>
        <tag>ES9</tag>
        <tag>ES10</tag>
        <tag>ES11</tag>
        <tag>ES12</tag>
      </tags>
  </entry>
  <entry>
    <title>JQ绑定select标签的onchange事件，跳转、传参、添加、删除</title>
    <url>/2016/09/10/js/JQ%E7%BB%91%E5%AE%9Aselect%E6%A0%87%E7%AD%BE%E7%9A%84onchange%E4%BA%8B%E4%BB%B6%EF%BC%8C%E8%B7%B3%E8%BD%AC%E3%80%81%E4%BC%A0%E5%8F%82%E3%80%81%E6%B7%BB%E5%8A%A0%E3%80%81%E5%88%A0%E9%99%A4/</url>
    <content><![CDATA[<hr>
<span id="more"></span>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;mySelect&quot;</span>&gt;  </span><br><span class="line">　　<span class="xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>one<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span>  </span><br><span class="line">　　<span class="xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> <span class="attr">selected</span>=<span class="string">&quot;selected&quot;</span>&gt;</span>two<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span>  </span><br><span class="line">　　<span class="xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>three<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span>  </span><br><span class="line">&lt;/select&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ooo&quot;</span> <span class="attr">name</span>=<span class="string">&quot;param2&quot;</span> <span class="attr">id</span>=<span class="string">&quot;param2&quot;</span>/&gt;</span></span> </span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span>  </span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">  </span></span></span><br><span class="line"><span class="javascript"><span class="xml">	$(<span class="string">&#x27;#mySelect&#x27;</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span></span></span><br><span class="line"><span class="javascript"><span class="xml">	　　alert($(<span class="built_in">this</span>).children(<span class="string">&#x27;option:selected&#x27;</span>).val());  </span></span></span><br><span class="line"><span class="javascript"><span class="xml">	　　<span class="keyword">var</span> p1=$(<span class="built_in">this</span>).children(<span class="string">&#x27;option:selected&#x27;</span>).val();<span class="comment">//这就是selected的值  </span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">	　　<span class="keyword">var</span> p2=$(<span class="string">&#x27;#param2&#x27;</span>).val();<span class="comment">//获取本页面其他标签的值  </span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">	　　<span class="built_in">window</span>.location.href=<span class="string">&quot;xx.php?param1=&quot;</span>+p1+<span class="string">&quot;m2=&quot;</span>+p2+<span class="string">&quot;&quot;</span>;<span class="comment">//页面跳转并传参  </span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">	&#125;)  </span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h4 id="jquery获取select选择的文本与值"><a href="#jquery获取select选择的文本与值" class="headerlink" title="jquery获取select选择的文本与值"></a>jquery获取select选择的文本与值</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取select 选中的 text :</span></span><br><span class="line">$(<span class="string">&quot;#ddlregtype&quot;</span>).find(<span class="string">&quot;option:selected&quot;</span>).text();</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取select选中的 value:</span></span><br><span class="line">$(<span class="string">&quot;#ddlregtype &quot;</span>).val();</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取select选中的索引:</span></span><br><span class="line">$(<span class="string">&quot;#ddlregtype &quot;</span>).get(<span class="number">0</span>).selectedindex;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//运用new Option(&quot;文本&quot;,&quot;值&quot;)方法添加选项option ：</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">document</span>.getElementById(<span class="string">&quot;mySelect&quot;</span>);  </span><br><span class="line">obj.add(<span class="keyword">new</span> Option(<span class="string">&quot;4&quot;</span>,<span class="string">&quot;4&quot;</span>)); </span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除所有选项option：</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">document</span>.getElementById(<span class="string">&quot;mySelect&quot;</span>);  </span><br><span class="line">obj.options.length = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除选中选项option：</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">document</span>.getElementById(<span class="string">&quot;mySelect&quot;</span>);  </span><br><span class="line"><span class="keyword">var</span> index = obj.selectedIndex;  </span><br><span class="line">obj.options.remove(index); </span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改选中选项option</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">document</span>.getElementById(<span class="string">&quot;mySelect&quot;</span>);  </span><br><span class="line"><span class="keyword">var</span> index = obj.selectedIndex;  </span><br><span class="line">obj.options[index] = <span class="keyword">new</span> Option(<span class="string">&quot;three&quot;</span>,<span class="number">3</span>); <span class="comment">//更改对应的值  </span></span><br><span class="line">obj.options[index].selected = <span class="literal">true</span>; <span class="comment">//保持选中状态 </span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除select：</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">document</span>.getElementById(<span class="string">&quot;mySelect&quot;</span>);  </span><br><span class="line">obj.parentNode.removeChild(obj); <span class="comment">//移除当前对象 </span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//select选择的响应事件：</span></span><br><span class="line">$(<span class="string">&quot;#mySelect&quot;</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line"><span class="comment">//添加所需要执行的操作代码  </span></span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>onchange事件</tag>
      </tags>
  </entry>
  <entry>
    <title>js日常用到知识点汇总</title>
    <url>/2017/06/03/js/js%E6%97%A5%E5%B8%B8%E7%94%A8%E5%88%B0%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<p><strong>1、js数字转化为千分位格式</strong><br>搜索了一些只有整数的千分位分割符，现在是不管整数，带小数(不分割小数点以后的数字)都可以分割</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toQfw</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">let</span> str=num.toString();<span class="comment">//转换为字符串</span></span><br><span class="line">    <span class="keyword">let</span> reg=str.indexOf(<span class="string">&#x27;.&#x27;</span>) &gt;-<span class="number">1</span> ? <span class="regexp">/(\d&#123;1,3&#125;)(?=(?:\d&#123;3&#125;)+\.)/g</span> : <span class="regexp">/(\d&#123;1,3&#125;)(?=(?:\d&#123;3&#125;)+$)/g</span>;<span class="comment">//千分符的正则</span></span><br><span class="line">    <span class="keyword">return</span> str.replace(reg, <span class="string">&#x27;$1,&#x27;</span>);<span class="comment">//千分位格式化;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log( toQfw(<span class="number">3708205.23</span>) ) <span class="comment">//3,708,205.23</span></span><br><span class="line"><span class="built_in">console</span>.log( toQfw(<span class="number">3708205</span>) ) <span class="comment">//3,708,205</span></span><br></pre></td></tr></table></figure>
<p><strong>2、Array.from 方法用于将两类对象转为真正的数组</strong><br>这个方法不错，拆解后台数据的时候很好用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike = &#123;<span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,<span class="attr">length</span>: <span class="number">3</span>&#125;;</span><br><span class="line"><span class="built_in">Array</span>.from(arrayLike, <span class="function">(<span class="params">v, k</span>) =&gt;</span> v); <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span></span><br><span class="line"><span class="built_in">Array</span>.from(arrayLike, <span class="function">(<span class="params">v, k</span>) =&gt;</span> k); <span class="comment">// [0, 1, 2]</span></span><br></pre></td></tr></table></figure>
<p><strong>3、两种编程方式：命令式编程和声明式编程</strong><br><strong>命令式编程</strong>：命令“机器”如何去做事情(how)，这样不管你想要的是什么(what)，它都会按照你的命令实现。<br><strong>声明式编程</strong>：告诉“机器”你想要的是什么(what)，让机器想出如何去做(how)。</p>
<p>例如：让一个数组里的数值翻倍</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//命令式编程风格实现：</span></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> doubled = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">	<span class="keyword">var</span> newNumber = numbers[i] * <span class="number">2</span></span><br><span class="line"> 	doubled.push (newNumber)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log (doubled) <span class="comment">//=&gt; [2,4,6,8,10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//我们直接遍历整个数组，取出每个元素，乘以二，</span></span><br><span class="line"><span class="comment">//然后把翻倍后的值放入新数组，每次都要操作这个双倍数组，直到计算完所有元素</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明式编程方法：</span></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> doubled = numbers.map (<span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> n * <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log (doubled) <span class="comment">//=&gt; [2,4,6,8,10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//map利用当前的数组创建了一个新数组，新数组里的每个元素</span></span><br><span class="line"><span class="comment">//都是经过了传入map的函数(这里是function (n) &#123; return n*2 &#125;)的处理</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//map函数所做的事情是将直接遍历整个数组的过程归纳抽离出来，</span></span><br><span class="line"><span class="comment">//让我们专注于描述我们想要的是什么(what)。注意，我们传入map的是一个纯函数；</span></span><br><span class="line"><span class="comment">//它不具有任何副作用(不会改变外部状态)，它只是接收一个数字，返回乘以二后的值</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>再例如： 求一个list里所有值的和</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//命令式编程：</span></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> total = <span class="number">0</span> <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">  	total += numbers[i]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log (total) <span class="comment">//=&gt; 15</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明式编程：</span></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> total = numbers.reduce (<span class="function"><span class="keyword">function</span> (<span class="params">sum, n</span>) </span>&#123;</span><br><span class="line">  	<span class="keyword">return</span> sum + n</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log (total) <span class="comment">//=&gt; 15</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">声明式编程的总结</span><br><span class="line"></span><br><span class="line">　　声明式编程让我们去描述我们想要的是什么，让底层的软件/计算机/等去解决如何去实现它们。</span><br><span class="line"></span><br><span class="line">　　在很多情况中，就像我们看到的一样，声明式编程能给我们的编程带来真正的提升，通过站在更高层面写代码，我们可以更多的专注于what，而这正是我们开发软件真正的目标。</span><br><span class="line"></span><br><span class="line">　　问题是，程序员习惯了去描述how，这让我们感觉很好很舒服——强力——能够控制事情的发生发展，不放走任何我们不能看见不能理解的处理过程。</span><br><span class="line"></span><br><span class="line">　　有时候这种紧盯着how不放的做法是没问题的。如果我需要对代码进行更高性能的优化，我需要对what进行更深一步的描述来指导how。有时候对于某个业务逻辑没有任何可以归纳提取的通用实现，我们只能写命令式编程代码。</span><br><span class="line"></span><br><span class="line">　　但大多数时候，我们可以、而且应该寻求声明式的写代码方式，如果没有发现现成的归纳提取好的实现，我们应该自己去创建。起初这会很难，必定的，但就像我们使用SQL和D3.js， 我们会长期从中获得巨大的回报！</span><br></pre></td></tr></table></figure>
<p>4、点击空白处关闭弹窗几种方法</p>
<p>4.1jQuery 写法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).mouseup(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> _con = $(<span class="string">&#x27; 目标区域 &#x27;</span>);   <span class="comment">// 设置目标区域</span></span><br><span class="line"> 	<span class="keyword">if</span>(!_con.is(e.target) &amp;&amp; _con.has(e.target).length === <span class="number">0</span>)&#123; <span class="comment">// Mark 1</span></span><br><span class="line">    	some code...   <span class="comment">// 功能代码</span></span><br><span class="line"> 	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>4.2vue.js 写法（写在mounted里面）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;mouseup&#x27;</span>,<span class="function">(<span class="params">e</span>) =&gt;</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> _con = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;more-oprate&#x27;</span>)</span><br><span class="line">	<span class="keyword">if</span>(_con) &#123;</span><br><span class="line">		<span class="keyword">if</span>(!_con.contains(e.target)) &#123;</span><br><span class="line">			<span class="built_in">this</span>.isShowBtn = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>持续更新中……</p>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>js获取小数点的问题</title>
    <url>/2016/08/18/js/js%E8%8E%B7%E5%8F%96%E5%B0%8F%E6%95%B0%E7%82%B9%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<hr>
<span id="more"></span>
<h3 id="1、四舍五入"><a href="#1、四舍五入" class="headerlink" title="1、四舍五入"></a>1、四舍五入</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num =<span class="number">2.446242342</span>;</span><br><span class="line">num = num.toFixed(<span class="number">2</span>); <span class="comment">// 输出结果为 2.45</span></span><br></pre></td></tr></table></figure>
<h3 id="2、不四舍五入"><a href="#2、不四舍五入" class="headerlink" title="2、不四舍五入"></a>2、不四舍五入</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//①先把小数点整除：</span></span><br><span class="line"><span class="built_in">Math</span>.floor(<span class="number">15.7784514000</span> * <span class="number">100</span>) / <span class="number">100</span>  </span><br><span class="line"><span class="comment">// 输出结果为 15.77</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//②当作字符串，使用正则匹配：</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="number">15.7784514000</span>.toString().match(<span class="regexp">/^\d+(?:\.\d&#123;0,2&#125;)?/</span>))  </span><br><span class="line"><span class="comment">// 输出结果为 15.77,不能用于整数如 10 必须写为10.0000</span></span><br><span class="line"><span class="comment">//ps:如果是负数，请先转换为正数再计算，最后转回负数</span></span><br></pre></td></tr></table></figure>
<h3 id="3、javascript保留两位小数的实例："><a href="#3、javascript保留两位小数的实例：" class="headerlink" title="3、javascript保留两位小数的实例："></a>3、javascript保留两位小数的实例：</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt; </span><br><span class="line">    <span class="comment">//保留两位小数  </span></span><br><span class="line">    <span class="comment">//功能：将浮点数四舍五入，取小数点后2位 </span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">toDecimal</span>(<span class="params">x</span>) </span>&#123; </span><br><span class="line">      <span class="keyword">var</span> f = <span class="built_in">parseFloat</span>(x); </span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">isNaN</span>(f)) &#123; </span><br><span class="line">        <span class="keyword">return</span>; </span><br><span class="line">      &#125; </span><br><span class="line">      f = <span class="built_in">Math</span>.round(x*<span class="number">100</span>)/<span class="number">100</span>; </span><br><span class="line">      <span class="keyword">return</span> f; </span><br><span class="line">    &#125; </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//制保留2位小数，如：2，会在2后面补上00.即2.00 </span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">toDecimal2</span>(<span class="params">x</span>) </span>&#123; </span><br><span class="line">      <span class="keyword">var</span> f = <span class="built_in">parseFloat</span>(x); </span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">isNaN</span>(f)) &#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">      &#125; </span><br><span class="line">      <span class="keyword">var</span> f = <span class="built_in">Math</span>.round(x*<span class="number">100</span>)/<span class="number">100</span>; </span><br><span class="line">      <span class="keyword">var</span> s = f.toString(); </span><br><span class="line">      <span class="keyword">var</span> rs = s.indexOf(<span class="string">&#x27;.&#x27;</span>); </span><br><span class="line">      <span class="keyword">if</span> (rs &lt; <span class="number">0</span>) &#123; </span><br><span class="line">        rs = s.length; </span><br><span class="line">        s += <span class="string">&#x27;.&#x27;</span>; </span><br><span class="line">      &#125; </span><br><span class="line">      <span class="keyword">while</span> (s.length &lt;= rs + <span class="number">2</span>) &#123; </span><br><span class="line">        s += <span class="string">&#x27;0&#x27;</span>; </span><br><span class="line">      &#125; </span><br><span class="line">      <span class="keyword">return</span> s; </span><br><span class="line">    &#125; </span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fomatFloat</span>(<span class="params">src,pos</span>)</span>&#123;   </span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">Math</span>.round(src*<span class="built_in">Math</span>.pow(<span class="number">10</span>, pos))/<span class="built_in">Math</span>.pow(<span class="number">10</span>, pos);   </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//四舍五入 </span></span><br><span class="line">    alert(<span class="string">&quot;保留2位小数：&quot;</span> + toDecimal(<span class="number">3.14159267</span>)); </span><br><span class="line">    alert(<span class="string">&quot;强制保留2位小数：&quot;</span> + toDecimal2(<span class="number">3.14159267</span>)); </span><br><span class="line">    alert(<span class="string">&quot;保留2位小数：&quot;</span> + toDecimal(<span class="number">3.14559267</span>)); </span><br><span class="line">    alert(<span class="string">&quot;强制保留2位小数：&quot;</span> + toDecimal2(<span class="number">3.15159267</span>)); </span><br><span class="line">    alert(<span class="string">&quot;保留2位小数：&quot;</span> + fomatFloat(<span class="number">3.14559267</span>, <span class="number">2</span>)); </span><br><span class="line">    alert(<span class="string">&quot;保留1位小数：&quot;</span> + fomatFloat(<span class="number">3.15159267</span>, <span class="number">1</span>)); </span><br><span class="line">      </span><br><span class="line">    <span class="comment">//五舍六入 </span></span><br><span class="line">    alert(<span class="string">&quot;保留2位小数：&quot;</span> + <span class="number">1000.003</span>.toFixed(<span class="number">2</span>)); </span><br><span class="line">    alert(<span class="string">&quot;保留1位小数：&quot;</span> + <span class="number">1000.08</span>.toFixed(<span class="number">1</span>)); </span><br><span class="line">    alert(<span class="string">&quot;保留1位小数：&quot;</span> + <span class="number">1000.04</span>.toFixed(<span class="number">1</span>)); </span><br><span class="line">    alert(<span class="string">&quot;保留1位小数：&quot;</span> + <span class="number">1000.05</span>.toFixed(<span class="number">1</span>)); </span><br><span class="line">      </span><br><span class="line">    <span class="comment">//科学计数 </span></span><br><span class="line">    alert(<span class="number">3.1415</span>.toExponential(<span class="number">2</span>)); </span><br><span class="line">    alert(<span class="number">3.1455</span>.toExponential(<span class="number">2</span>)); </span><br><span class="line">    alert(<span class="number">3.1445</span>.toExponential(<span class="number">2</span>)); </span><br><span class="line">    alert(<span class="number">3.1465</span>.toExponential(<span class="number">2</span>)); </span><br><span class="line">    alert(<span class="number">3.1665</span>.toExponential(<span class="number">1</span>)); </span><br><span class="line">    <span class="comment">//精确到n位，不含n位 </span></span><br><span class="line">    alert(<span class="string">&quot;精确到小数点第2位&quot;</span> + <span class="number">3.1415</span>.toPrecision(<span class="number">2</span>)); </span><br><span class="line">    alert(<span class="string">&quot;精确到小数点第3位&quot;</span> + <span class="number">3.1465</span>.toPrecision(<span class="number">3</span>)); </span><br><span class="line">    alert(<span class="string">&quot;精确到小数点第2位&quot;</span> + <span class="number">3.1415</span>.toPrecision(<span class="number">2</span>)); </span><br><span class="line">    alert(<span class="string">&quot;精确到小数点第2位&quot;</span> + <span class="number">3.1455</span>.toPrecision(<span class="number">2</span>)); </span><br><span class="line">    alert(<span class="string">&quot;精确到小数点第5位&quot;</span> + <span class="number">3.141592679287</span>.toPrecision(<span class="number">5</span>)); </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h3 id="4、用Javascript取float型小数点后两位，例22-127456取成22-13"><a href="#4、用Javascript取float型小数点后两位，例22-127456取成22-13" class="headerlink" title="4、用Javascript取float型小数点后两位，例22.127456取成22.13"></a>4、用Javascript取float型小数点后两位，例22.127456取成22.13</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//①.丢弃小数部分,保留整数部分</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">5</span>/<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//②.向上取整,有小数就整数部分加1</span></span><br><span class="line"><span class="built_in">Math</span>.ceil(<span class="number">5</span>/<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//③,四舍五入.</span></span><br><span class="line"><span class="built_in">Math</span>.round(<span class="number">5</span>/<span class="number">2</span>)	</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//④,向下取整</span></span><br><span class="line"><span class="built_in">Math</span>.floor(<span class="number">5</span>/<span class="number">2</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>字符串</tag>
        <tag>四舍五入</tag>
        <tag>小数点</tag>
      </tags>
  </entry>
  <entry>
    <title>px转rem</title>
    <url>/2017/01/17/js/px%E8%BD%ACrem/</url>
    <content><![CDATA[<hr>
<span id="more"></span>
<h2 id="全部复制html引用即可"><a href="#全部复制html引用即可" class="headerlink" title="全部复制html引用即可"></a>全部复制html引用即可</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">win</span>) </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">resize</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> domWidth = domEle.getBoundingClientRect().width;</span><br><span class="line">  <span class="keyword">if</span>(domWidth / v &gt; <span class="number">540</span>)&#123;</span><br><span class="line">   domWidth = <span class="number">540</span> * v;</span><br><span class="line">  &#125;</span><br><span class="line">  win.rem = domWidth / <span class="number">18.75</span>;</span><br><span class="line">  domEle.style.fontSize = win.rem + <span class="string">&quot;px&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> v, initial_scale, timeCode, dom = win.document, domEle = dom.documentElement, viewport = dom.querySelector(<span class="string">&#x27;meta[name=&quot;viewport&quot;]&#x27;</span>), flexible = dom.querySelector(<span class="string">&#x27;meta[name=&quot;flexible&quot;]&#x27;</span>);</span><br><span class="line"> <span class="keyword">if</span> (viewport) &#123;</span><br><span class="line">  <span class="comment">//viewport：&lt;meta name=&quot;viewport&quot;content=&quot;initial-scale=0.5, minimum-scale=0.5, maximum-scale=0.5,user-scalable=no,minimal-ui&quot;/&gt;</span></span><br><span class="line">  <span class="keyword">var</span> o = viewport.getAttribute(<span class="string">&quot;content&quot;</span>).match(<span class="regexp">/initial\-scale=([&quot;&#x27;]?)([\d\.]+)\1?/</span>);</span><br><span class="line">  <span class="keyword">if</span>(o)&#123;</span><br><span class="line">   initial_scale = <span class="built_in">parseFloat</span>(o[<span class="number">2</span>]);</span><br><span class="line">   v = <span class="built_in">parseInt</span>(<span class="number">1</span> / initial_scale);</span><br><span class="line">  &#125;</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (flexible) &#123;</span><br><span class="line">   <span class="keyword">var</span> o = flexible.getAttribute(<span class="string">&quot;content&quot;</span>).match(<span class="regexp">/initial\-dpr=([&quot;&#x27;]?)([\d\.]+)\1?/</span>);</span><br><span class="line">   <span class="keyword">if</span>(o)&#123;</span><br><span class="line">    v = <span class="built_in">parseFloat</span>(o[<span class="number">2</span>]);</span><br><span class="line">    initial_scale = <span class="built_in">parseFloat</span>((<span class="number">1</span> / v).toFixed(<span class="number">2</span>))</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span> (!v &amp;&amp; !initial_scale) &#123;</span><br><span class="line">  <span class="keyword">var</span> n = (win.navigator.appVersion.match(<span class="regexp">/android/gi</span>), win.navigator.appVersion.match(<span class="regexp">/iphone/gi</span>));</span><br><span class="line">  v = win.devicePixelRatio;</span><br><span class="line">  v = n ? v &gt;= <span class="number">3</span> ? <span class="number">3</span> : v &gt;= <span class="number">2</span> ? <span class="number">2</span> : <span class="number">1</span> : <span class="number">1</span>, initial_scale = <span class="number">1</span> / v</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//没有viewport标签的情况下</span></span><br><span class="line"> <span class="keyword">if</span> (domEle.setAttribute(<span class="string">&quot;data-dpr&quot;</span>, v), !viewport) &#123;</span><br><span class="line">  <span class="keyword">if</span> (viewport = dom.createElement(<span class="string">&quot;meta&quot;</span>), viewport.setAttribute(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;viewport&quot;</span>), viewport.setAttribute(<span class="string">&quot;content&quot;</span>, <span class="string">&quot;initial-scale=&quot;</span> + initial_scale + <span class="string">&quot;, maximum-scale=&quot;</span> + initial_scale + <span class="string">&quot;, minimum-scale=&quot;</span> + initial_scale + <span class="string">&quot;, user-scalable=no&quot;</span>), domEle.firstElementChild) &#123;</span><br><span class="line">   domEle.firstElementChild.appendChild(viewport)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="keyword">var</span> m = dom.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">   m.appendChild(viewport), dom.write(m.innerHTML)</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> win.dpr = v;</span><br><span class="line"> win.addEventListener(<span class="string">&quot;resize&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">clearTimeout</span>(timeCode), timeCode = <span class="built_in">setTimeout</span>(resize, <span class="number">300</span>)</span><br><span class="line"> &#125;, <span class="literal">false</span>);</span><br><span class="line"> win.addEventListener(<span class="string">&quot;pageshow&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">b</span>) </span>&#123;</span><br><span class="line">  b.persisted &amp;&amp; (<span class="built_in">clearTimeout</span>(timeCode), timeCode = <span class="built_in">setTimeout</span>(resize, <span class="number">300</span>))</span><br><span class="line"> &#125;, <span class="literal">false</span>);</span><br><span class="line"> <span class="comment">/* 个人觉得没必要完成后就把body的字体设置为12</span></span><br><span class="line"><span class="comment"> &quot;complete&quot; === dom.readyState ? dom.body.style.fontSize = 12 * v + &quot;px&quot; : dom.addEventListener(&quot;DOMContentLoaded&quot;, function() &#123;</span></span><br><span class="line"><span class="comment">  //dom.body.style.fontSize = 12 * v + &quot;px&quot;</span></span><br><span class="line"><span class="comment"> &#125;, false);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> resize();</span><br><span class="line">&#125;(<span class="built_in">window</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> CDN_DOMAIN_NAME = <span class="string">&#x27;项目连接&#x27;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>rem</tag>
      </tags>
  </entry>
  <entry>
    <title>使用jq刷新页面及一些js函数</title>
    <url>/2016/08/27/js/%E4%BD%BF%E7%94%A8jq%E5%88%B7%E6%96%B0%E9%A1%B5%E9%9D%A2%E5%8F%8A%E4%B8%80%E4%BA%9Bjs%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<hr>
<span id="more"></span>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.location.reload()  <span class="comment">//刷新当前页面</span></span><br><span class="line"></span><br><span class="line">parent.location.reload()  <span class="comment">//刷新父亲对象（用于框架）</span></span><br><span class="line"></span><br><span class="line">opener.location.reload()  <span class="comment">//刷新父窗口对象（用于单开窗口）</span></span><br><span class="line"></span><br><span class="line">top.location.reload()  <span class="comment">//刷新最顶端对象（用于多开窗口）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//一些javascript基本函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//一个小写转大写的js: </span></span><br><span class="line"><span class="built_in">document</span>.getelementbyid(”output”).value = <span class="built_in">document</span>.getelementbyid(”input”).value.touppercase(); </span><br><span class="line"></span><br><span class="line"><span class="comment">//js中的值类型:</span></span><br><span class="line">string,number,boolean,<span class="literal">null</span>,object,<span class="function"><span class="keyword">function</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">//当文件中出现多个<span class="title">form</span>表单时.可以用以下来代替</span></span><br><span class="line"><span class="function"><span class="title">document</span>.<span class="title">forms</span>[0],<span class="title">document</span>.<span class="title">forms</span>[1]</span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function">//状态栏的设置:</span></span><br><span class="line"><span class="function"><span class="title">window</span>.<span class="title">status</span>=”字符”</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">//指定当前显示链接的位置:</span></span><br><span class="line"><span class="built_in">window</span>.location.href=”url” </span><br><span class="line"></span><br><span class="line"><span class="comment">//取出窗体中的所有表单的数量:</span></span><br><span class="line"><span class="built_in">document</span>.forms.length </span><br><span class="line"></span><br><span class="line"><span class="comment">//指定在不支持脚本的浏览器显示的html:</span></span><br><span class="line">&lt;noscript&gt;&lt;/noscript&gt; </span><br><span class="line"></span><br><span class="line"><span class="comment">//当超链和onclick事件都有时,则老版本的浏览器转向a.html,否则转向b.html.</span></span><br><span class="line"><span class="comment">//例:</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">”a.html”</span> <span class="attr">onclick</span>=<span class="string">”location.href</span>=<span class="string">’b.html’;return</span> <span class="attr">false</span>”&gt;</span>dfsadf<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span> </span><br><span class="line"></span><br><span class="line"><span class="comment">//js中的all代表其下层的全部元素</span></span><br><span class="line"></span><br><span class="line">isdisabled  <span class="comment">//判断是否为禁止状态.</span></span><br><span class="line">disabled    <span class="comment">//设置禁止状态 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.focus()  <span class="comment">//使当前的窗口在所有窗口之前. </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//防止用户对文本框中输入文本:</span></span><br><span class="line">onfocus=”<span class="built_in">this</span>.blur()” </span><br><span class="line"></span><br><span class="line"><span class="comment">//js中分为两种窗体输出:模态和非模态.</span></span><br><span class="line"><span class="built_in">window</span>.showmodaldialog()</span><br><span class="line"><span class="built_in">window</span>.showmodeless() </span><br><span class="line"></span><br><span class="line"><span class="comment">//添加到收藏夹:</span></span><br><span class="line">external.addfavorite(”http:<span class="comment">//www.google.com”,”google”); </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//js中的打印:</span></span><br><span class="line"><span class="built_in">window</span>.print() </span><br><span class="line"></span><br><span class="line"><span class="comment">//js中的窗口滚动条:</span></span><br><span class="line"><span class="built_in">window</span>.scroll(x,y) </span><br><span class="line"></span><br><span class="line"><span class="comment">//js中的窗口滚动到位置:</span></span><br><span class="line"><span class="built_in">window</span>.scrollby </span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.history.back()  <span class="comment">//返回上一页</span></span><br><span class="line"><span class="built_in">window</span>.history.forward()  <span class="comment">//返回下一页</span></span><br><span class="line"><span class="built_in">window</span>.history.go( 返回第几页,也可以使用访问过的url) </span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write()  <span class="comment">//不换行的输出</span></span><br><span class="line"><span class="built_in">document</span>.writeln()  <span class="comment">//换行输出 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.nowrap=<span class="literal">true</span>;  <span class="comment">//防止链接文字折行.</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//变量</span></span><br><span class="line">.indexof(”字符”,起始位置),</span><br><span class="line"><span class="comment">//返回第一个出现的位置(从0开始计算) </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">string.lastindexof(searchstring[,startindex])<span class="comment">//最后一次出现的位置. </span></span><br><span class="line"></span><br><span class="line">string.tolowercase()  <span class="comment">//使字符串全部变为小写. </span></span><br><span class="line">string.touppercase()  <span class="comment">//使全部字符变为大写. </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>刷新页面</tag>
      </tags>
  </entry>
  <entry>
    <title>如何获取用户当前城市？</title>
    <url>/2016/10/30/js/%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E5%BD%93%E5%89%8D%E5%9F%8E%E5%B8%82%EF%BC%9F/</url>
    <content><![CDATA[<hr>
<span id="more"></span>
<p>1、在html页面引入百度地图API, <a href="https://jingyan.baidu.com/article/363872eccda8286e4aa16f4e.html">AK码详细获取地地址</a>、<a href="http://lbsyun.baidu.com/">百度地图开放平台</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;http://api.map.baidu.com/api?ak=你的AK码&amp;v=2.0&amp;services=false&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、js代码使用h5的geolocation方法获取坐标，然后使用百度api的getlocation方法翻译成你想要得结果</span></span><br><span class="line">	navigator.geolocation.getCurrentPosition(<span class="function"><span class="keyword">function</span> (<span class="params">position</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> lat = position.coords.latitude;</span><br><span class="line">        <span class="keyword">var</span> lon = position.coords.longitude;</span><br><span class="line">        <span class="keyword">var</span> point = <span class="keyword">new</span> BMap.Point(lon, lat);  <span class="comment">// 创建坐标点</span></span><br><span class="line">        <span class="comment">// 根据坐标得到地址描述</span></span><br><span class="line">        <span class="keyword">var</span> myGeo = <span class="keyword">new</span> BMap.Geocoder();</span><br><span class="line">        myGeo.getLocation(point, <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> city = result.addressComponents.city;</span><br><span class="line">            $(<span class="string">&#x27;body&#x27;</span>).html(city);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="comment">//3、打开手机试一下吧</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4、如果不需要精准的定位，还有一种通过IP地址获取当前城市的方法，采用新浪的api接口。</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://int.dpool.sina.com.cn/iplookup/iplookup.php?format=js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> city = remote_ip_info[<span class="string">&#x27;city&#x27;</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    alert(city)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>获取当前城市</tag>
      </tags>
  </entry>
  <entry>
    <title>小tips</title>
    <url>/2017/04/27/js/%E5%B0%8Ftips/</url>
    <content><![CDATA[<hr>
<span id="more"></span>
<p>1、trim()去空格</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> con=$(<span class="string">&quot;.demo&quot;</span>).val(); </span><br><span class="line"><span class="comment">//错误：if(con.trim() == &#x27;&#x27;) --在ie下会报错</span></span><br><span class="line"><span class="comment">//正确：if($.trim(con) == &#x27;&#x27;) </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">....后续更新</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>tips</tag>
      </tags>
  </entry>
  <entry>
    <title>监听微信自动播放视频</title>
    <url>/2016/10/15/js/%E7%9B%91%E5%90%AC%E5%BE%AE%E4%BF%A1%E8%87%AA%E5%8A%A8%E6%92%AD%E6%94%BE%E8%A7%86%E9%A2%91/</url>
    <content><![CDATA[<hr>
<span id="more"></span>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//视频音频同理</span></span><br><span class="line">&lt;video id=<span class="string">&#x27;Jvideo&#x27;</span> src=<span class="string">&#x27;&#123;&#123;env(&#x27;</span>CDN_DOMAIN_NAME<span class="string">&#x27;) &#125;&#125;/upload_video/&quot;+detail_data[i][2]+&quot;&#x27;</span>  preload=<span class="string">&#x27;auto&#x27;</span>  webkit-playsinline=<span class="string">&#x27;webkit-playsinline&#x27;</span> playsinline=<span class="string">&#x27;playsinline&#x27;</span> autoplay=<span class="string">&#x27;true&#x27;</span> poster type=<span class="string">&#x27;video/mp4&#x27;</span>  style=<span class="string">&#x27;width:100%;height:100%;&#x27;</span>&gt;&lt;/video&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">videoAutoPlay</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> video = <span class="built_in">document</span>.getElementById(id);</span><br><span class="line">        video.play();</span><br><span class="line">        <span class="built_in">document</span>.addEventListener(<span class="string">&quot;WeixinJSBridgeReady&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            video.play();</span><br><span class="line">        &#125;, <span class="literal">false</span>);</span><br><span class="line">        <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;YixinJSBridgeReady&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            video.play();</span><br><span class="line">        &#125;, <span class="literal">false</span>);</span><br><span class="line">        video.onended = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">//播放结束</span></span><br><span class="line">            $(<span class="string">&quot;.video_play&quot;</span>).show();</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    videoAutoPlay(<span class="string">&#x27;Jvideo&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    $(<span class="built_in">document</span>).on(<span class="string">&quot;click&quot;</span>,<span class="string">&quot;.video_play&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">//播放完点击播放</span></span><br><span class="line">        $(<span class="string">&quot;.video_play&quot;</span>).hide();</span><br><span class="line">        videoAutoPlay(<span class="string">&#x27;Jvideo&#x27;</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>监听</tag>
        <tag>自动播放</tag>
        <tag>微信</tag>
      </tags>
  </entry>
  <entry>
    <title>禁止横竖屏切换、强制横竖屏</title>
    <url>/2016/10/12/js/%E7%A6%81%E6%AD%A2%E6%A8%AA%E7%AB%96%E5%B1%8F%E5%88%87%E6%8D%A2%E3%80%81%E5%BC%BA%E5%88%B6%E6%A8%AA%E7%AB%96%E5%B1%8F/</url>
    <content><![CDATA[<hr>
<span id="more"></span>
<h3 id="js判断屏幕横竖屏："><a href="#js判断屏幕横竖屏：" class="headerlink" title="js判断屏幕横竖屏："></a>js判断屏幕横竖屏：</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">orient</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//alert(&#x27;gete&#x27;);</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.orientation == <span class="number">0</span> || <span class="built_in">window</span>.orientation == <span class="number">180</span>) &#123;</span><br><span class="line">        $(<span class="string">&quot;body&quot;</span>).attr(<span class="string">&quot;class&quot;</span>, <span class="string">&quot;portrait&quot;</span>);</span><br><span class="line">        orientation = <span class="string">&#x27;portrait&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.orientation == <span class="number">90</span> || <span class="built_in">window</span>.orientation == -<span class="number">90</span>) &#123;</span><br><span class="line">        $(<span class="string">&quot;body&quot;</span>).attr(<span class="string">&quot;class&quot;</span>, <span class="string">&quot;landscape&quot;</span>);</span><br><span class="line">        orientation = <span class="string">&#x27;landscape&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    orient();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="built_in">window</span>).bind( <span class="string">&#x27;orientationchange&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    orient();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ipad： <span class="number">90</span> 或 -<span class="number">90</span> 横屏</span><br><span class="line"></span><br><span class="line">ipad： <span class="number">0</span> 或<span class="number">180</span> 竖屏</span><br><span class="line"></span><br><span class="line">Andriod：<span class="number">0</span> 或<span class="number">180</span> 横屏</span><br><span class="line"></span><br><span class="line">Andriod： <span class="number">90</span> 或 -<span class="number">90</span> 竖屏</span><br><span class="line"></span><br><span class="line">iphone 、ipad禁止横竖屏切换、强制横竖屏：</span><br></pre></td></tr></table></figure>

<h3 id="html5屏幕旋转事件-onorientationchange"><a href="#html5屏幕旋转事件-onorientationchange" class="headerlink" title="html5屏幕旋转事件 onorientationchange"></a>html5屏幕旋转事件 onorientationchange</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断屏幕是否旋转</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">orientationChange</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(<span class="built_in">window</span>.orientation) &#123;</span><br><span class="line">    　　<span class="keyword">case</span> <span class="number">0</span>: </span><br><span class="line">            alert(<span class="string">&quot;肖像模式 0,screen-width: &quot;</span> + screen.width + <span class="string">&quot;; screen-height:&quot;</span> + screen.height);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    　　<span class="keyword">case</span> -<span class="number">90</span>: </span><br><span class="line">            alert(<span class="string">&quot;左旋 -90,screen-width: &quot;</span> + screen.width + <span class="string">&quot;; screen-height:&quot;</span> + screen.height);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    　　<span class="keyword">case</span> <span class="number">90</span>:   </span><br><span class="line">            alert(<span class="string">&quot;右旋 90,screen-width: &quot;</span> + screen.width + <span class="string">&quot;; screen-height:&quot;</span> + screen.height);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    　　<span class="keyword">case</span> <span class="number">180</span>:   </span><br><span class="line">        　　alert(<span class="string">&quot;风景模式 180,screen-width: &quot;</span> + screen.width + <span class="string">&quot;; screen-height:&quot;</span> + screen.height);</span><br><span class="line">        　　<span class="keyword">break</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加事件监听</span></span><br><span class="line">addEventListener(<span class="string">&#x27;load&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    orientationChange();</span><br><span class="line">    <span class="built_in">window</span>.onorientationchange = orientationChange;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>横竖屏切换</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端上拉加载demo</title>
    <url>/2016/09/25/js/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E4%B8%8A%E6%8B%89%E5%8A%A0%E8%BD%BDdemo/</url>
    <content><![CDATA[<hr>
<span id="more"></span>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引用</span></span><br><span class="line">&lt;script src=<span class="string">&quot;/js/4.2.5iscroll.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="comment">//html</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span> <span class="attr">id</span>=<span class="string">&quot;#wrapper&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main_list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;other_list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            //循环开始</span></span><br><span class="line"><span class="xml">	    <span class="tag">&lt;<span class="name">ul</span>&gt;</span>....<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">	    <span class="tag">&lt;<span class="name">ul</span>&gt;</span>....<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">	    ...</span></span><br><span class="line"><span class="xml">	    //循环结束    </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;more&quot;</span> <span class="attr">abc</span>=<span class="string">&quot;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;more_center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;pull_icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>上拉加载...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="comment">//js</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> kp = <span class="string">&#x27;&#123;&#123; $datas[&#x27;</span>skip<span class="string">&#x27;] &#125;&#125;&#x27;</span>;<span class="comment">//初始为1---作用防止多次连续上拉重复加载</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    $(<span class="string">&quot;.more&quot;</span>).attr(<span class="string">&quot;abc&quot;</span>,kp);<span class="comment">//储存起来</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">	<span class="comment">/*滚动*/</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> myscroll = <span class="keyword">new</span> iScroll(<span class="string">&quot;#wrapper&quot;</span>,&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">onScrollMove</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">if</span> (<span class="built_in">this</span>.y&lt;(<span class="built_in">this</span>.maxScrollY)) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                $(<span class="string">&#x27;.pull_icon&#x27;</span>).addClass(<span class="string">&#x27;flip&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                $(<span class="string">&#x27;.pull_icon&#x27;</span>).removeClass(<span class="string">&#x27;loading&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                $(<span class="string">&#x27;.more span&#x27;</span>).text(<span class="string">&#x27;释放加载...&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;<span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                $(<span class="string">&#x27;.pull_icon&#x27;</span>).removeClass(<span class="string">&#x27;flip loading&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                $(<span class="string">&#x27;.more span&#x27;</span>).text(<span class="string">&#x27;上拉加载...&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">onScrollEnd</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">if</span> ($(<span class="string">&#x27;.pull_icon&#x27;</span>).hasClass(<span class="string">&#x27;flip&#x27;</span>)) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                $(<span class="string">&#x27;.pull_icon&#x27;</span>).addClass(<span class="string">&#x27;loading&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                $(<span class="string">&#x27;.more span&#x27;</span>).text(<span class="string">&#x27;加载中...&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                pullUpAction();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">onRefresh</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            $(<span class="string">&#x27;.more&#x27;</span>).removeClass(<span class="string">&#x27;flip&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            $(<span class="string">&#x27;.more span&#x27;</span>).text(<span class="string">&#x27;上拉加载...&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="keyword">function</span> <span class="title">pullUpAction</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> skip=$(<span class="string">&quot;.more&quot;</span>).attr(<span class="string">&quot;abc&quot;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        $.ajax(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">url</span>: <span class="string">&#x27;&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">type</span>: <span class="string">&#x27;post&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">headers</span>: &#123;<span class="string">&#x27;X-CSRF-TOKEN&#x27;</span>: $(<span class="string">&#x27;meta[name=&quot;csrf_token&quot;]&#x27;</span>).attr(<span class="string">&#x27;content&#x27;</span>)&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">skip</span>: skip</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="keyword">if</span>(data.success)&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    $(<span class="string">&quot;.more&quot;</span>).attr(<span class="string">&quot;abc&quot;</span>,data.info.skip);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="keyword">var</span> obj = <span class="built_in">Object</span>.keys(data.info.products)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="keyword">if</span>(obj.length &gt; <span class="number">0</span>)&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="keyword">var</span> arr=data.info.products;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="keyword">var</span> path = <span class="string">&#x27;&#123;&#123; env(&#x27;</span>CDN_DOMAIN_NAME<span class="string">&#x27;) &#125;&#125;&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        </span></span></span><br><span class="line"><span class="javascript"><span class="xml">                         <span class="keyword">var</span> html=<span class="string">&quot;&lt;ul&gt;....&lt;/ul&gt;&quot;</span>   </span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        $(<span class="string">&#x27;.other_list&#x27;</span>).append(html)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                     </span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    &#125;<span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        $(<span class="string">&quot;.more_center&quot;</span>).empty();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        $(<span class="string">&quot;.more_center&quot;</span>).text(<span class="string">&quot;我是有底线的&quot;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    myscroll.refresh();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#125;<span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">if</span> ($(<span class="string">&#x27;.main_list&#x27;</span>).height()&lt;$(<span class="string">&#x27;.wrap&#x27;</span>).height()) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        $(<span class="string">&#x27;.more&#x27;</span>).hide();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        myscroll.destroy();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>移动端</tag>
        <tag>上拉加载</tag>
      </tags>
  </entry>
  <entry>
    <title>解决数字精度丢失</title>
    <url>/2017/05/25/js/%E8%A7%A3%E5%86%B3%E6%95%B0%E5%AD%97%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<hr>
<span id="more"></span>
<p>一个经典的题</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">为什么是<span class="literal">false</span>呢?</span><br><span class="line"></span><br><span class="line">先看下面这个比喻</span><br><span class="line"></span><br><span class="line">比如一个数 <span class="number">1</span>÷<span class="number">3</span>=<span class="number">0.33333333</span>......</span><br><span class="line"></span><br><span class="line">这是一个除不尽的运算，<span class="number">3</span>会一直无限循环，数学可以表示，但是计算机要存储，方便下次再使用，但<span class="number">0.333333</span>...... 这个数无限循环，再大的内存它也存不下，所以不能存储一个相对于数学来说的值，只能存储一个近似值，这么存储后再取出时自然就出现精度丢失问题</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">解决方案</span><br><span class="line">理论上用有限的空间来存储无限的小数是不可能保证精确的，但我们可以处理一下得到我们期望的结果</span><br><span class="line"></span><br><span class="line">当你拿到 <span class="number">1.4000000000000001</span> 这样的数据要展示时，建议使用 toPrecision 凑整并 <span class="built_in">parseFloat</span> 转成数字后再显示，如下：</span><br><span class="line"></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="number">1.4000000000000001</span>.toPrecision(<span class="number">12</span>)) === <span class="number">1.4</span>  <span class="comment">// True</span></span><br><span class="line">封装成方法就是：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strip</span>(<span class="params">num, precision = <span class="number">12</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> +<span class="built_in">parseFloat</span>(num.toPrecision(precision));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">对于运算类操作，如 +-*/，就不能使用 toPrecision 了。正确的做法是把小数转成整数后再运算：</span><br><span class="line"></span><br><span class="line"><span class="comment">//多个加法运算精度丢失</span></span><br><span class="line"><span class="function"><span class="title">numAdd</span>(<span class="params">numArr</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> baseNum = <span class="number">0</span>,</span><br><span class="line">    baseNum1;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; numArr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">isNaN</span>(numArr[i]) || numArr[i] != <span class="literal">null</span>) &#123;</span><br><span class="line">        baseNum1 = numArr[i] * <span class="number">100</span>;</span><br><span class="line">        baseNum += baseNum1;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.ruleForm.agentPower = baseNum / <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">return</span> baseNum / <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this.numAdd([&#x27;1&#x27;,&#x27;3&#x27;]) // 调用</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 加法运算，避免数据相加小数点后产生多位数和计算精度损失。 </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param </span>num1加数1 | num2加数2 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">numAdd</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> baseNum, baseNum1, baseNum2;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        baseNum1 = num1.toString().split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].length;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        baseNum1 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        baseNum2 = num2.toString().split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].length;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        baseNum2 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    baseNum = <span class="built_in">Math</span>.pow(<span class="number">10</span>, <span class="built_in">Math</span>.max(baseNum1, baseNum2));</span><br><span class="line">    <span class="keyword">return</span> (num1 * baseNum + num2 * baseNum) / baseNum;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 加法运算，避免数据相减小数点后产生多位数和计算精度损失。 </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param </span>num1被减数 | num2减数 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">numSub</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> baseNum, baseNum1, baseNum2;</span><br><span class="line">    <span class="keyword">var</span> precision;<span class="comment">// 精度 </span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        baseNum1 = num1.toString().split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].length;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        baseNum1 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        baseNum2 = num2.toString().split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].length;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        baseNum2 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    baseNum = <span class="built_in">Math</span>.pow(<span class="number">10</span>, <span class="built_in">Math</span>.max(baseNum1, baseNum2));</span><br><span class="line">    precision = (baseNum1 &gt;= baseNum2) ? baseNum1 : baseNum2;</span><br><span class="line">    <span class="keyword">return</span> ((num1 * baseNum - num2 * baseNum) / baseNum).toFixed(precision);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 乘法运算，避免数据相乘小数点后产生多位数和计算精度损失。 </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param </span>num1被乘数 | num2乘数 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">numMulti</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> baseNum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        baseNum += num1.toString().split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].length;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        baseNum += num2.toString().split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].length;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Number</span>(num1.toString().replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>)) * <span class="built_in">Number</span>(num2.toString().replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>)) / <span class="built_in">Math</span>.pow(<span class="number">10</span>, baseNum);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 除法运算，避免数据相除小数点后产生多位数和计算精度损失。 </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param </span>num1被除数 | num2除数 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">numDiv</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> baseNum1 = <span class="number">0</span>, baseNum2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> baseNum3, baseNum4;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        baseNum1 = num1.toString().split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].length;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        baseNum1 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        baseNum2 = num2.toString().split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].length;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        baseNum2 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// with (Math) &#123;</span></span><br><span class="line">        baseNum3 = <span class="built_in">Number</span>(num1.toString().replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">        baseNum4 = <span class="built_in">Number</span>(num2.toString().replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> (baseNum3 / baseNum4) * pow(<span class="number">10</span>, baseNum2 - baseNum1);</span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    numAdd,</span><br><span class="line">    numSub,</span><br><span class="line">    numMulti,</span><br><span class="line">    numDiv</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>数字精度丢失</tag>
        <tag>采坑</tag>
      </tags>
  </entry>
  <entry>
    <title>那些年踩得坑...toFixed()并不是真的四舍五入</title>
    <url>/2017/05/20/js/%E9%82%A3%E4%BA%9B%E5%B9%B4%E8%B8%A9%E5%BE%97%E5%9D%91...toFixed()%E5%B9%B6%E4%B8%8D%E6%98%AF%E7%9C%9F%E7%9A%84%E5%9B%9B%E8%88%8D%E4%BA%94%E5%85%A5/</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<p><strong>话说做项目的时候，需要保留两位小数，本以为用toFixed()完美，然并卵…..</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">2.35</span>.toFixed(<span class="number">1</span>) <span class="comment">// 2.4  ✅</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.335</span>.toFixed(<span class="number">2</span>) <span class="comment">// 2.33  ❌</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.3335</span>.toFixed(<span class="number">3</span>) <span class="comment">// 2.333 ❌</span></span><br></pre></td></tr></table></figure>
<p><strong>解决办法-自己封装一个</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//保留小数（四舍五入）data:要保留的数，val:保留的位数</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">ToFixed</span>(<span class="params">data,val</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> numbers = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="comment">// 保留几位小数后面添加几个0</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; val; i++) &#123;</span><br><span class="line">                numbers += <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> s = <span class="number">1</span> + numbers;</span><br><span class="line">            <span class="comment">// 如果是整数需要添加后面的0</span></span><br><span class="line">            <span class="keyword">var</span> spot = <span class="string">&quot;.&quot;</span> + numbers;</span><br><span class="line">            <span class="comment">// Math.round四舍五入</span></span><br><span class="line">            <span class="comment">//  parseFloat() 函数可解析一个字符串，并返回一个浮点数。</span></span><br><span class="line">            <span class="keyword">var</span> value = <span class="built_in">Math</span>.round(<span class="built_in">parseFloat</span>(data) * s) / s;</span><br><span class="line">            <span class="comment">// 从小数点后面进行分割</span></span><br><span class="line">            <span class="keyword">var</span> d = value.toString().split(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (d.length == <span class="number">1</span>) &#123;</span><br><span class="line">                value = value.toString() + spot;</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (d.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (d[<span class="number">1</span>].length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                    value = value.toString() + <span class="string">&quot;0&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ToFixed(<span class="number">2.335</span>,<span class="number">2</span>) <span class="comment">//2.34 完美</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>采坑</tag>
        <tag>toFixed()</tag>
      </tags>
  </entry>
  <entry>
    <title>常用正则表达式</title>
    <url>/2016/12/20/regex/%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<hr>
<span id="more"></span>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1、邮箱 </span></span><br><span class="line">/\w[-\w.+]*@([A-Za-z0-<span class="number">9</span>][-A-Za-z0-<span class="number">9</span>]+\.)+[A-Za-z]&#123;<span class="number">2</span>,<span class="number">14</span>&#125;/g</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、中文</span></span><br><span class="line">/[\u4e00-\u9fa5]+/g</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、时:分:秒 </span></span><br><span class="line">/([<span class="number">01</span>]?\d|<span class="number">2</span>[<span class="number">0</span>-<span class="number">3</span>]):[<span class="number">0</span>-<span class="number">5</span>]?\d:[<span class="number">0</span>-<span class="number">5</span>]?\d/g</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、IP地址 </span></span><br><span class="line">/(\d+)\.(\d+)\.(\d+)\.(\d+)/g</span><br><span class="line"></span><br><span class="line"><span class="comment">//5、身份证 </span></span><br><span class="line">/\d&#123;<span class="number">17</span>&#125;[<span class="number">0</span>-9Xx]|\d&#123;<span class="number">15</span>&#125;/g</span><br><span class="line"></span><br><span class="line"><span class="comment">//6、正整数 </span></span><br><span class="line">/[<span class="number">1</span>-<span class="number">9</span>]\d*/g</span><br><span class="line"></span><br><span class="line"><span class="comment">//7、负整数 </span></span><br><span class="line">/-[<span class="number">1</span>-<span class="number">9</span>]\d*/g</span><br><span class="line"></span><br><span class="line"><span class="comment">//8、手机号 </span></span><br><span class="line">/(<span class="number">13</span>\d|<span class="number">14</span>[<span class="number">579</span>]|<span class="number">15</span>[^<span class="number">4</span>\D]|<span class="number">17</span>[^<span class="number">49</span>\D]|<span class="number">18</span>\d)\d&#123;<span class="number">8</span>&#125;/g</span><br><span class="line"></span><br><span class="line">...后续待补</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>正则</category>
      </categories>
      <tags>
        <tag>正则</tag>
      </tags>
  </entry>
  <entry>
    <title>sourceTree的使用</title>
    <url>/2018/06/27/sourceTree/sourceTree%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<hr>
<p>俗话说的好工欲善其事必先利其器，Git分布式版本控制系统是我们日常开发中不可或缺的。上比较流行的Git可视化管理工具有SourceTree、Github Desktop、TortoiseGit，个人觉得SourceTree还是蛮不错的，因为SourceTree同时支持Windows和Mac，并且界面十分的精美简洁，大大的简化了开发者与代码库之间的Git操作方式</p>
<span id="more"></span>
<p>SourceTree | Github Desktop | TortoiseGit 可视化管理工具<a href="https://blog.csdn.net/hmllittlekoi/article/details/104504406/">对比</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>sourceTree</category>
      </categories>
      <tags>
        <tag>sourceTree</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac终端命令</title>
    <url>/2017/03/10/mac/Mac%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<hr>
<span id="more"></span>]]></content>
      <categories>
        <category>Mac终端</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>指令</tag>
      </tags>
  </entry>
  <entry>
    <title>前端新电脑应该安装哪些</title>
    <url>/2018/06/01/tools/%E6%96%B0%E7%94%B5%E8%84%91%E9%9C%80%E5%AE%89%E8%A3%85%E5%93%AA%E4%BA%9B/</url>
    <content><![CDATA[<hr>
<p>当你入职，或者新买一台Mac时应该装哪些工具呢，让我们来看看吧(仅供参考)</p>
<span id="more"></span>



<h3 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a><a href="https://code.visualstudio.com/">vscode</a></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需要安装的插件</span></span><br><span class="line">* 汉化包-    Chinese (Simplified) Language Pack <span class="keyword">for</span> Visual Studio Code   </span><br><span class="line"></span><br><span class="line">* 团队代码开发规范工具-   ESLint</span><br><span class="line"></span><br><span class="line">* 实时监听刷新静态页面工具-    Live Server</span><br><span class="line"></span><br><span class="line">* 快捷打开html页面预览工具-    open <span class="keyword">in</span> browser</span><br><span class="line"></span><br><span class="line">* 代码格式化工具-     Prettier - Code formatter</span><br><span class="line"></span><br><span class="line">* vue2 语法提示工具-     Vetur</span><br><span class="line"></span><br><span class="line">* 微信小程序代码提示工具-     小程序开发助手</span><br><span class="line"></span><br><span class="line">* vscode 方便快捷管理git工具-     GitLens — Git supercharged</span><br><span class="line"></span><br><span class="line">* vue3代码提示-     Volar</span><br><span class="line"></span><br><span class="line">* react 语法代码提示-     ES7 React/Redux/GraphQL/React-Native snippets（选装）</span><br><span class="line"></span><br><span class="line">* 快捷运行js代码片段-     Code Runner</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="chrome浏览器-、-chrome插件extfans下载地址"><a href="#chrome浏览器-、-chrome插件extfans下载地址" class="headerlink" title="chrome浏览器 、   chrome插件extfans下载地址"></a><a href="https://www.google.cn/chrome/">chrome浏览器</a> 、   <a href="https://www.extfans.com/">chrome插件extfans下载地址</a></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">* vue 开发调试工具-     Vue.js devtools</span><br><span class="line">* react 开发调试工具-     React Developer Tools</span><br><span class="line">* redux 开发调试工具-     Redux DevTools</span><br><span class="line">* 快捷预览 json 接口工具-     <span class="built_in">JSON</span>-handle</span><br><span class="line">* 谷歌翻译-      Google翻译 (不好用了)</span><br><span class="line">* 沙拉查词-     沙拉查词-聚合词典划词翻译(划词翻译)</span><br><span class="line">* 极速翻译-网页全文翻译      -网页全文翻译(可以替代谷歌翻译网页全文)</span><br><span class="line">* 广告拦截(包括百度搜索广告)-  Adblock Plus - 免费的广告拦截器(推荐，好用)</span><br></pre></td></tr></table></figure>
<h3 id="火狐浏览器"><a href="#火狐浏览器" class="headerlink" title="火狐浏览器"></a><a href="http://www.firefox.com.cn/">火狐浏览器</a></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="nodejs环境"><a href="#nodejs环境" class="headerlink" title="nodejs环境"></a>nodejs环境</h3><blockquote>
<p>不要急着安装node，以后需要用到nvm去切换node版本，所以直接安装nvm就行了<br><a href="https://blog.csdn.net/sebeefe/article/details/126773937">nvm安装参考地址</a>     </p>
</blockquote>
<h3 id="git"><a href="#git" class="headerlink" title="git"></a><a href="https://git-scm.com/downloads/">git</a></h3><blockquote>
<p>nvm安装之后自带git,如果不用nvm，点上面链接单独装即可</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git账号全局配置</span><br><span class="line">git config -l   <span class="comment">//查看</span></span><br><span class="line">git config --<span class="built_in">global</span> user.name <span class="string">&quot;xxx&quot;</span></span><br><span class="line">git config --<span class="built_in">global</span> user.email xxx@example.com</span><br></pre></td></tr></table></figure>

<h3 id="安装vue-cli"><a href="#安装vue-cli" class="headerlink" title="安装vue cli"></a>安装vue cli</h3><blockquote>
<p>vue-cli,有2.0版本和3.0版本，创建也不同，看公司项目用到哪个版本装哪个吧</p>
</blockquote>
<h3 id="Git客户端管理工具-Sourcetree"><a href="#Git客户端管理工具-Sourcetree" class="headerlink" title="Git客户端管理工具 Sourcetree"></a><a href="https://www.sourcetreeapp.com/">Git客户端管理工具 Sourcetree</a></h3><blockquote>
<p>一款不错的可视化git版本分支等管理工具<br>使用和安装教程可以参考这两个地址： <a href="https://www.cnblogs.com/Can-daydayup/p/13128633.html">参考1</a> 、 <a href="https://zhuanlan.zhihu.com/p/212302462">参考2</a></p>
</blockquote>
<h3 id="微信开发者工具"><a href="#微信开发者工具" class="headerlink" title="微信开发者工具"></a><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html">微信开发者工具</a></h3><blockquote>
<p>这个不用多说了</p>
</blockquote>
<h3 id="Hbuilder-X"><a href="#Hbuilder-X" class="headerlink" title="Hbuilder X"></a><a href="https://www.dcloud.io/hbuilderx.html">Hbuilder X</a></h3><blockquote>
<p>这个感觉在mac上运行特卡，不知道你们是什么样的   </p>
</blockquote>
<h3 id="其他辅助类的工具"><a href="#其他辅助类的工具" class="headerlink" title="其他辅助类的工具"></a>其他辅助类的工具</h3><blockquote>
<ul>
<li><p><a href="https://note.youdao.com/">有道云笔记</a>      </p>
</li>
<li><p><a href="https://platform.wps.cn/">wps</a>      </p>
</li>
<li><p><a href="https://xmind.cn/">思维导图工具XMind</a>     </p>
</li>
<li><p><a href="https://www.fancynode.com.cn/pxcook">px像素大厨 本地 量图工具，切图仔专用</a>      </p>
</li>
<li><p><a href="https://www.youdao.com/">有道词典</a>      </p>
</li>
<li><p>科学上网工具  随时 出墙 查阅资料必备。自行百度即可</p>
</li>
<li><p>photoShop</p>
</li>
<li><p>微信</p>
</li>
<li><p>QQ</p>
</li>
<li><p>钉钉</p>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>新电脑</category>
      </categories>
      <tags>
        <tag>新电脑工具</tag>
      </tags>
  </entry>
  <entry>
    <title>uni-app开发小程序</title>
    <url>/2020/07/05/uni-app/uni-app%E5%BC%80%E5%8F%91%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<hr>
<span id="more"></span>
<h2 id="通过vue-cli命令行"><a href="#通过vue-cli命令行" class="headerlink" title="通过vue-cli命令行"></a><a href="https://uniapp.dcloud.net.cn/quickstart-cli.html">通过vue-cli命令行</a></h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>）、终端输入(创建,这是vue3创建)：</span><br><span class="line">    vue create -p dcloudio/uni-preset-vue 项目名称</span><br><span class="line">    <span class="comment">// 选择默认模板</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 运行、发布uni-app,详细可查看官网(微信小程序打包运行可以在小程序开发工具中使用)</span></span><br><span class="line">    npm run dev:mp-weixin</span><br><span class="line">    npm run build:mp-weixin</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>）、提前安装好微信小程序开发工具</span><br><span class="line">    扫码二维码进入界面 =&gt; 然后添加项目 =&gt; 填写appid(测试号) =&gt; 创建</span><br><span class="line">    </span><br><span class="line"><span class="number">3</span>）、将创建的项目拉到 HBuilder X中</span><br></pre></td></tr></table></figure>
<h2 id="通过HBuilderX可视化创建"><a href="#通过HBuilderX可视化创建" class="headerlink" title="通过HBuilderX可视化创建"></a>通过HBuilderX可视化创建</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>）、点击工具栏里的文件 -&gt; 新建 -&gt; 项目（快捷键Ctrl+N）</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>）、选择uni-app类型，输入工程名，选择模板(默认模板)，点击创建，即可成功创建</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>）、运行uni-app  点击工具栏的运行 -&gt; 运行到浏览器/手机或模拟器/微信开发者工具</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>）、发布uni-app  点击发行，选择原生app-云端打包/h5/小程序/...</span><br></pre></td></tr></table></figure>

<h2 id="两者区别"><a href="#两者区别" class="headerlink" title="两者区别"></a>两者区别</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cli创建的项目，是传统的node项目结构。工程代码在src目录下，编译器在项目下，编译结果在dist目录下。</span><br><span class="line">(可以使用axios封装uni.request请求)</span><br><span class="line">├─node_modules                </span><br><span class="line">├─public                        </span><br><span class="line">├─src   </span><br><span class="line">    │ ├─api   <span class="comment">//存放接口请求文件</span></span><br><span class="line">    │ ├─config</span><br><span class="line">        │ http.js <span class="comment">//baseURL                            </span></span><br><span class="line">    │ ├─pages                           </span><br><span class="line">        │ index  </span><br><span class="line">    │ ├─<span class="keyword">static</span>                 </span><br><span class="line">    │ ├─App.vue                       </span><br><span class="line">    │ ├─main.js </span><br><span class="line">    │ ├─pages.json <span class="comment">//路由写这里，用不到vue的router</span></span><br><span class="line">    │ ├─uni.scss                                                        </span><br><span class="line">...</span><br><span class="line">├─index.html                     </span><br><span class="line">├─package.json                   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HBuilderX可视化创建的项目，是一种免node开发概念。工程代码在项目目录下，编译器在HBuilderX目录下而不是项目下，编译结果在项目的unpackage目录下</span><br><span class="line"></span><br><span class="line">├─pages  </span><br><span class="line">    │ index                 </span><br><span class="line">├─<span class="keyword">static</span>                              </span><br><span class="line">├─App.vue</span><br><span class="line">├─index.html</span><br><span class="line">├─main.js                     </span><br><span class="line">├─pages.json   <span class="comment">//路由写这里    </span></span><br><span class="line">│─uni.scss    </span><br><span class="line"></span><br><span class="line">通过HBuilderX开发 uni-app 项目时，在 uni-app 项目上右键“新建页面”，HBuilderX会自动在pages.json中完成页面注册</span><br></pre></td></tr></table></figure>

<h2 id="uni-app-生命周期"><a href="#uni-app-生命周期" class="headerlink" title="uni-app 生命周期"></a>uni-app 生命周期</h2><p>1）、应用生命周期</p>
<table>
<thead>
<tr>
<th align="left">函数名</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">onLaunch</td>
<td align="left">当uni-app 初始化完成时触发（全局只触发一次）</td>
</tr>
<tr>
<td align="left">onShow</td>
<td align="left">当 uni-app 启动，或从后台进入前台显示</td>
</tr>
<tr>
<td align="left">onHide</td>
<td align="left">当 uni-app 从前台进入后台</td>
</tr>
<tr>
<td align="left">onError</td>
<td align="left">当 uni-app 报错时触发</td>
</tr>
<tr>
<td align="left">onUniNViewMessage</td>
<td align="left">对 nvue 页面发送的数据进行监听，可参考 nvue 向 vue 通讯</td>
</tr>
<tr>
<td align="left">onUnhandledRejection</td>
<td align="left">对未处理的 Promise 拒绝事件监听函数（2.8.1+）</td>
</tr>
<tr>
<td align="left">onPageNotFound</td>
<td align="left">页面不存在监听函数</td>
</tr>
<tr>
<td align="left">onThemeChange</td>
<td align="left">监听系统主题变化</td>
</tr>
</tbody></table>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">	<span class="comment">// 只能在App.vue里监听应用的生命周期</span></span><br><span class="line">	<span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">		<span class="attr">onLaunch</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">&#x27;App Launch&#x27;</span>)</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="attr">onShow</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">&#x27;App Show&#x27;</span>)</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="attr">onHide</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">&#x27;App Hide&#x27;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">tips: 应用生命周期仅可在App.vue中监听，在其它页面监听无效</span><br></pre></td></tr></table></figure>

<p>2）、页面生命周期<br>| 函数名 | 说明 |<br>| :—— | :—— |<br>|onInit | 监听页面初始化，其参数同 onLoad 参数，为上个页面传递的数据，参数类型为 Object（用于页面传参），触发时机早于 onLoad    |<br>|onLoad | 监听页面加载，其参数为上个页面传递的数据，参数类型为 Object（用于页面传参）|<br>|onShow | 监听页面显示。页面每次出现在屏幕上都触发，包括从下级页面点返回露出当前页面     |<br>| onReady | 监听页面初次渲染完成。注意如果渲染速度快，会在页面进入动画完成前触发 |<br>| onHide | 监听页面隐藏 |<br>| onUnload | 监听页面卸载 |<br>| onResize | 监听窗口尺寸变化 |<br>| onPullDownRefresh | 监听用户下拉动作，一般用于下拉刷新 |<br>| onReachBottom | 页面滚动到底部的事件（不是scroll-view滚到底），常用于下拉下一页数据 |<br>| onTabItemTap | 点击 tab 时触发，参数为Object |<br>| onShareAppMessage | 用户点击右上角分享 |<br>| onPageScroll | 监听页面滚动，参数为Object |<br>| onNavigationBarButtonTap | 监听原生标题栏按钮点击事件，参数为Object|<br>| onBackPress |    监听页面返回，返回 event = {from:backbutton、 navigateBack} ，backbutton 表示来源是左上角返回按钮或 android 返回键；navigateBack表示来源是 uni.navigateBack ；详细说明及使用：onBackPress 详解。支付宝小程序只有真机能触发，只能监听非navigateBack引起的返回，不可阻止默认行为。    |<br>| onNavigationBarSearchInputChanged | 监听原生标题栏搜索输入框输入内容变化事件     |<br>| onNavigationBarSearchInputConfirmed    监听原生标题栏搜索输入框搜索事件，用户点击软键盘上的“搜索”按钮时触发。    |<br>| onNavigationBarSearchInputClicked | 监听原生标题栏搜索输入框点击事件（pages.json 中的 searchInput 配置 disabled 为 true 时才会触发）|<br>| onShareTimeline |    监听用户点击右上角转发到朋友圈 |<br>| onAddToFavorites | 监听用户点击右上角收藏 |</p>
<p>3）、组件生命周期</p>
<pre><code>即vue2/vue3生命周期
</code></pre>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>uni-app</category>
      </categories>
      <tags>
        <tag>uni-app</tag>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>uni-app开发遇到问题</title>
    <url>/2020/08/10/uni-app/uni-app%E5%BC%80%E5%8F%91%E9%81%87%E5%88%B0%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<hr>
<span id="more"></span>
<h2 id="组件设置全屏覆盖"><a href="#组件设置全屏覆盖" class="headerlink" title="组件设置全屏覆盖"></a>组件设置全屏覆盖</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">设置宽度和高度<span class="number">100</span>%是没用的需要在里面加设置一层view，并且设置对应宽高分别为vw和vh</span><br><span class="line">&lt;uni-popup&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;wrap_test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line">&lt;/uni-popup&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.wrap_test</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">width</span>:<span class="number">100vw</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">height</span>:<span class="number">100vh</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h2 id="wx-onNetworkStatusChange、uni-onNetworkStatusChange网络状态监听不生效问题"><a href="#wx-onNetworkStatusChange、uni-onNetworkStatusChange网络状态监听不生效问题" class="headerlink" title="wx.onNetworkStatusChange、uni.onNetworkStatusChange网络状态监听不生效问题"></a>wx.onNetworkStatusChange、uni.onNetworkStatusChange网络状态监听不生效问题</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">该方法只能在手机上进行验证才能生效，小程序开发工具上面不生效</span><br><span class="line"></span><br><span class="line">该方法只能写在onLoad方法里面，写在mounted方法不生效</span><br><span class="line"></span><br><span class="line">错误写法❌</span><br><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    uni.onNetworkStatusChange(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;onNetworkStatusChange&#x27;</span>, res);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">正确写法✔，手机上打开关闭数据、切换wifi连接都可以看得到效果</span><br><span class="line"><span class="function"><span class="title">onLoad</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">    wx.onNetworkStatusChange(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;res&#x27;</span> , res);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<h2 id="接口请求写在哪里好？（即返回页面不刷新问题）"><a href="#接口请求写在哪里好？（即返回页面不刷新问题）" class="headerlink" title="接口请求写在哪里好？（即返回页面不刷新问题）"></a>接口请求写在哪里好？（即返回页面不刷新问题）</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、可以写在onShow、onLoad、created、mounted</span><br><span class="line"></span><br><span class="line">但是：写在onShow里面最好✔</span><br><span class="line"></span><br><span class="line">原因：在很多情况下跳转后都需要刷新页面数据。因为onshow是在页面展示时候触发，通过uni.navigateTo不会销毁页面，返回时候页面的onLoad不会触发。</span><br><span class="line"></span><br><span class="line">例如：通过导航栏返回按钮图标或者uni.navigateTo跳转到指定页面需要刷新页面数据时候，onShow只要页面展示了就会请求。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、需要通过onLoad的参数来发起请求怎么办？</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id><a href="#" class="headerlink" title></a></h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="-1"><a href="#-1" class="headerlink" title></a></h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="-2"><a href="#-2" class="headerlink" title></a></h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="-3"><a href="#-3" class="headerlink" title></a></h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="-4"><a href="#-4" class="headerlink" title></a></h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="-5"><a href="#-5" class="headerlink" title></a></h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="-6"><a href="#-6" class="headerlink" title></a></h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="-7"><a href="#-7" class="headerlink" title></a></h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="-8"><a href="#-8" class="headerlink" title></a></h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="-9"><a href="#-9" class="headerlink" title></a></h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="-10"><a href="#-10" class="headerlink" title></a></h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="-11"><a href="#-11" class="headerlink" title></a></h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="-12"><a href="#-12" class="headerlink" title></a></h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="-13"><a href="#-13" class="headerlink" title></a></h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>uni-app</category>
      </categories>
      <tags>
        <tag>uni-app</tag>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title>用到的一些东西</title>
    <url>/2020/03/30/vue3/vue3%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<hr>
<span id="more"></span>
<p>1、路由跳转</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = useRouter()</span><br><span class="line"></span><br><span class="line">router.push(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">query</span>: &#123;</span><br><span class="line">      <span class="attr">dataPkId</span>: xxx,</span><br><span class="line">      <span class="attr">num</span>: xxx,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>
<p>2、ref 与 reactive用法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">①、ref</span><br><span class="line"></span><br><span class="line">声明：<span class="keyword">const</span> open = ref(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">使用：ref.value = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">②、reactive</span><br><span class="line"></span><br><span class="line">声明：<span class="keyword">const</span> data = reactive(&#123;</span><br><span class="line">  <span class="attr">formReport</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">queryParams</span>: &#123;</span><br><span class="line">    <span class="attr">pageNum</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">pageSize</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">title</span>: <span class="literal">undefined</span>, </span><br><span class="line">    <span class="attr">level</span>: <span class="literal">undefined</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//弹框规则校验</span></span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="attr">deptId</span>: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请选择xxxx&#x27;</span>, <span class="attr">trigger</span>: [<span class="string">&#x27;blur&#x27;</span>, <span class="string">&#x27;change&#x27;</span>] &#125;],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">使用：<span class="keyword">const</span> &#123; queryParams, formReport, rules &#125; = toRefs(data)  <span class="comment">// 需要用toRefs转一下</span></span><br><span class="line">    queryParams.value.pageNum = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">tips：在模板中不用写.value</span><br></pre></td></tr></table></figure>
<p>3、elementplus序号</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;el-table-column label=<span class="string">&quot;序号&quot;</span> align=<span class="string">&quot;left&quot;</span> type=<span class="string">&quot;index&quot;</span> width=<span class="string">&quot;70&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;&#123; scope.$index + 1 + (queryParams.pageNum - 1) * queryParams.pageSize &#125;&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line">&lt;/el-table-column&gt;</span><br></pre></td></tr></table></figure>
<p>4、在setup中写方法,先引用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script setup name=<span class="string">&#x27;xxx&#x27;</span>&gt;</span><br><span class="line">    <span class="keyword">import</span> &#123; ref, reactive, toRefs, onMounted, onUnmounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line">①、方法</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    或</span><br><span class="line">    <span class="keyword">const</span> add = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> getList = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> data = <span class="keyword">await</span> PostApi.getPostPage(queryParams)</span><br><span class="line">            list.value = data.list</span><br><span class="line">            total.value = data.total</span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">  </span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            loading.value = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">②、初始化</span><br><span class="line"></span><br><span class="line">    onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;)</span><br><span class="line">    或</span><br><span class="line">    直接写在script标签里面最下面 </span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>5、根据el-tree树操作</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">①、给树节点添加disabled属性</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeDisabled</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  data.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    item.disabled = item.type == <span class="string">&#x27;00&#x27;</span> ? <span class="literal">true</span> : <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span> (item.children &amp;&amp; item.children !== <span class="literal">null</span> &amp;&amp; item.children.length !== <span class="number">0</span>) &#123;</span><br><span class="line">      changeDisabled(item.children)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> data</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">changeDisabled(树嵌套的data)</span><br><span class="line"></span><br><span class="line">②、根据树id获取对应的name</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 循环树获取选择的id所对应的对象 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTreeName</span>(<span class="params">id, tree</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; tree.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> ele = tree[i]</span><br><span class="line">    ele.id === id ? (res = ele) : <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> (res) <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> (ele.children &amp;&amp; ele.children.length) &#123;</span><br><span class="line">      res = getTreeName(id, ele.children)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = getTreeName(deptId, deptOptions.value)</span><br><span class="line"></span><br><span class="line">treeObj.value.deptName = obj.label</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>6、watch监听</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/** 监听从详情页面页面跳转回来刷新页面 */</span></span><br><span class="line">watch(</span><br><span class="line">  <span class="function">() =&gt;</span> router.currentRoute.value.path,</span><br><span class="line">  <span class="function">(<span class="params">toPath, fromPath</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//要执行的方法</span></span><br><span class="line">    <span class="keyword">if</span> (fromPath == <span class="string">&#x27;/opinionAnalysis/detail&#x27;</span>) &#123;</span><br><span class="line">      location.reload()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">immediate</span>: <span class="literal">true</span>, <span class="attr">deep</span>: <span class="literal">true</span> &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>7、使用 docx-preview 预览word文档流(二进制流)的时候</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; renderAsync &#125; <span class="keyword">from</span> <span class="string">&#x27;docx-preview&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染时候</span></span><br><span class="line"><span class="comment">// const previewContainer = document.getElementById(&#x27;fileShow&#x27;) // 不要用，多个页面预览的时候，预览容易出现白屏</span></span><br><span class="line"><span class="comment">// renderAsync(res.data, previewContainer) //渲染</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用这个</span></span><br><span class="line">&lt;div ref=<span class="string">&quot;file&quot;</span> id=<span class="string">&quot;fileShow&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="keyword">const</span> file = ref()</span><br><span class="line">renderAsync(res.data, proxy.$refs.file) <span class="comment">//渲染</span></span><br></pre></td></tr></table></figure>
<p>8、勾选框根据某个状态判断是否勾选</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;el-table-column type=<span class="string">&quot;selection&quot;</span> width=<span class="string">&quot;50&quot;</span> align=<span class="string">&quot;center&quot;</span> :selectable=<span class="string">&quot;checkSelectable&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 勾选框根据反馈状态判断是否勾选</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkSelectable</span>(<span class="params">row</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (row.feedbackState == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>9、复选框转单选框</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单选勾选框 </span></span><br><span class="line"><span class="comment">// &lt;el-table v-loading=&quot;loading&quot; ref=&quot;multipleTableRef&quot; @select=&quot;handlerSelect&quot; :data=&quot;feedbackList&quot; @selection-change=&quot;handleSelectionChange&quot; @row-click=&quot;rowClickHandle&quot; highlight-current-row&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> multipleTableRef = ref() <span class="comment">// 表格ref</span></span><br><span class="line"><span class="keyword">const</span> ids = ref([]) <span class="comment">// 表格多选id集合</span></span><br><span class="line"><span class="keyword">const</span> multiple = ref(<span class="literal">true</span>) <span class="comment">// 多选按钮是否禁用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 反馈弹出框form表单 和 多条件搜索 字段</span></span><br><span class="line"><span class="keyword">const</span> data = reactive(&#123;</span><br><span class="line">  <span class="comment">// 表格勾选数据</span></span><br><span class="line">  <span class="attr">selectCheckList</span>: [],</span><br><span class="line">  <span class="comment">// 多条件搜索</span></span><br><span class="line">  <span class="attr">queryParams</span>: &#123;</span><br><span class="line">    <span class="attr">pageNum</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">pageSize</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">title</span>: <span class="literal">undefined</span>, <span class="comment">// 标题</span></span><br><span class="line">    <span class="attr">level</span>: <span class="literal">undefined</span>, <span class="comment">// 等级</span></span><br><span class="line">   </span><br><span class="line">    <span class="attr">orderByColumn</span>: <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">isAsc</span>: <span class="literal">undefined</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//规则校验</span></span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="attr">deptId</span>: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请选择组织机构&#x27;</span>, <span class="attr">trigger</span>: [<span class="string">&#x27;blur&#x27;</span>, <span class="string">&#x27;change&#x27;</span>] &#125;],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; selectCheckList, queryParams, rules &#125; = toRefs(data)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表格某一行的单击事件</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">rowClickHandle</span>(<span class="params">row</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> selectData = data.selectCheckList</span><br><span class="line">        multipleTableRef.value.clearSelection()</span><br><span class="line">        <span class="keyword">if</span> (selectData.length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> [item] = selectData</span><br><span class="line">            <span class="keyword">const</span> shouldSelect = item !== row</span><br><span class="line">            multipleTableRef.value.toggleRowSelection(row, shouldSelect)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            multipleTableRef.value.toggleRowSelection(row, <span class="literal">true</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当用户手动勾选数据行的 Checkbox 时触发的事件</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handlerSelect</span>(<span class="params">selection, row</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 清除 所有勾选项</span></span><br><span class="line">        multipleTableRef.value.clearSelection()</span><br><span class="line">        <span class="keyword">if</span> (selection.length == <span class="number">0</span>) <span class="keyword">return</span></span><br><span class="line">        multipleTableRef.value.toggleRowSelection(row, <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 当选择项发生变化时会触发该事件</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handleSelectionChange</span>(<span class="params">selection</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;表格的选中 可以获得当前选中的数据&#x27;</span>, selection)</span><br><span class="line">        data.selectCheckList = selection</span><br><span class="line">        ids.value = selection.map(<span class="function">(<span class="params">item</span>) =&gt;</span> item.userId)</span><br><span class="line">        multiple.value = !selection.length</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// css</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 隐藏全选按钮</span></span><br><span class="line">:<span class="function"><span class="title">deep</span>(<span class="params">.el-table th.el-table__cell:nth-child(<span class="number">1</span>) .cell</span>)</span> &#123;</span><br><span class="line">  <span class="attr">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.circle&#123;</span><br><span class="line">  <span class="attr">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  display: block;</span><br><span class="line">  width: 4px;</span><br><span class="line">  height: 4px;</span><br><span class="line">  background-color: #b82c22;</span><br><span class="line">  border-radius: <span class="number">50</span>%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 筛选</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 覆盖默认的筛选图标样式 */</span></span><br><span class="line">    :<span class="function"><span class="title">deep</span>(<span class="params">.el-table .cell .el-table__column-filter-trigger</span>)</span> &#123;</span><br><span class="line">      <span class="attr">background</span>: url(<span class="string">&#x27;@/assets/icons/svg/filter.svg&#x27;</span>) no-repeat center;</span><br><span class="line">      background-size: contain;</span><br><span class="line">      width: 20px; <span class="comment">/* 自定义宽度 */</span></span><br><span class="line">      height: 20px; <span class="comment">/* 自定义高度 */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 当图标被激活时的样式 */</span></span><br><span class="line">    .el-table .cell .el-table__column-filter-trigger.active &#123;</span><br><span class="line">      background-image: url(<span class="string">&#x27;path/to/your/custom-icon-active.png&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>10、数组添加序号</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> originalArray = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;cherry&#x27;</span>];</span><br><span class="line"></span><br><span class="line">originalArray.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> <span class="string">`<span class="subst">$&#123;index + <span class="number">1</span>&#125;</span>、<span class="subst">$&#123;item&#125;</span>`</span>)</span><br><span class="line"><span class="comment">// [ &#x27;1、apple&#x27;, &#x27;2、banana&#x27;, &#x27;3、cherry&#x27; ] </span></span><br><span class="line"> </span><br><span class="line">originalArray.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> <span class="string">`<span class="subst">$&#123;index + <span class="number">1</span>&#125;</span>、<span class="subst">$&#123;item&#125;</span>`</span>).join(<span class="string">&#x27; &#x27;</span>) </span><br><span class="line"><span class="comment">// &#x27;1、apple 2、banana 3、cherry&#x27;</span></span><br></pre></td></tr></table></figure>
<p>11、Vue3 中 使用watch 监听路由中的值 会重复执行多次</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 遇到的问题：watch监听路由请求列表数据的时候会重复请求多次，累加请求</span></span><br><span class="line"><span class="comment">// 出现的原因：因为使用了keep-alive；</span></span><br><span class="line"><span class="comment">// 解决的办法：方法一：去掉keep-alive；方法二：在onDeactivated中销毁watch；</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> destroyWatch = watch(</span><br><span class="line">	<span class="function">() =&gt;</span> route.query.id,</span><br><span class="line">	<span class="function">(<span class="params">newVal, oldVal</span>) =&gt;</span> &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(newVal)</span><br><span class="line">        getData() <span class="comment">// 这个会请求多次</span></span><br><span class="line">        ....</span><br><span class="line">	&#125;,</span><br><span class="line">	&#123; <span class="attr">immediate</span>: <span class="literal">true</span>, <span class="attr">deep</span>: <span class="literal">true</span> &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">onDeactivated(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">	destroyWatch()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">....后续更新</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>tips</tag>
      </tags>
  </entry>
  <entry>
    <title>mac 共存 vue2和vue3，且可全局使用</title>
    <url>/2021/04/05/vue/mac%20%E5%85%B1%E5%AD%98%20vue2%E5%92%8Cvue3/</url>
    <content><![CDATA[<hr>
<p>可能你会遇到公司用Vue2开发的项目，你想用用vue3，当你兴冲冲的去安装vue-cli3的时候，会发现提示你要先卸载vue-li2,才能安装，这时的你是不是一脸懵逼😂，因为cli2与cli3不能一起使用，下面是一种可以解决二者共存的办法，且可以全局使用。（仅供参考）</p>
<span id="more"></span>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、找个地方创建空文件夹（vue-cli2，vue-cli3)</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、终端cd分别进入这两个文件初始化 npm init后，</span><br><span class="line">	vue2 执行npm install vue-cli@<span class="number">2.9</span><span class="number">.6</span>   <span class="comment">//指定需要的版本</span></span><br><span class="line">	vue3 执行npm install @vue/cli        <span class="comment">//局部安装，不要带-g</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、vscode(没有vscode,使用快捷键shift+command+.显示隐藏文件夹)修改文件node_modules下.bin 文件夹内vue文件分别改为vue(vue2不需要改，因为初始化vue2 init webpack projectName 创建,会vue2 init报错，所以直接用vue代替vue2)、vue3</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line"><span class="number">4</span>、终端输入open .zshrc，添加如下：(终端进入vue-cli2/vue-cli3，输入pwd即可查看路径)</span><br><span class="line">	<span class="keyword">export</span> PATH=安装vue2文件夹的路径/node_modules/.bin:$PATH</span><br><span class="line">	<span class="keyword">export</span> PATH=安装vue3文件夹的路径/node_modules/.bin:$PATH</span><br><span class="line"></span><br><span class="line">	保存后，需要执行source生效  source ~/.zshrc </span><br><span class="line"></span><br><span class="line">	通过下面的命令查看是否添加成功   echo $PATH</span><br><span class="line"></span><br><span class="line">	（</span><br><span class="line">	网上也有open -e .bash_profile 然后执行 source ~/.bash_profile 亲测，当时有效，重启终端查看版本就失效了，</span><br><span class="line">	经过查询，原来现在Mac的默认环境已经改成了zsh，而它加载的是~/.zshrc 文件，但在 .zshrc 中并没有定义任务环境变量。</span><br><span class="line">	所以最直接的解决办法是</span><br><span class="line">		在 ~<span class="regexp">/.zshrc 文件最后增加一行加上:  source ~/</span>.bash_profile  </span><br><span class="line"></span><br><span class="line">		首先在终端命令行执行 open .zshrc</span><br><span class="line">		如果提示没有 .zshrc 文件，则 执行 touch .zshrc 创建文件，再添加 source ~/.bash_profile</span><br><span class="line"></span><br><span class="line">		这样再重启电脑，配置的环境变量就自动生效了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		还不如直接在.zshrc里添加</span><br><span class="line">	）</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line"><span class="number">5</span>、查看版本 vue3 -V /  vue -V</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>、这样就可以全局使用了，</span><br><span class="line">	创建项目：</span><br><span class="line">		vue-cli2:  vue init webpack projectName <span class="comment">//创建(因为前面我们没更改vue为vue2,所以正常创建)</span></span><br><span class="line">		vue-cli3:  vue3 create projectName      <span class="comment">//创建(因为前面我们更改vue为vue3,所以要用vue3创建)</span></span><br><span class="line">     </span><br></pre></td></tr></table></figure>
<p>是不是使用windows的小伙伴也想拥有呢，那就继续往下看</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> 前面基本都一样，就是配置环境不一样而已</span><br><span class="line"></span><br><span class="line"> 右键我的电脑 --&gt; 属性 --&gt; 高级系统设置 --&gt; 下面 环境变量 --&gt;点击 新建</span><br><span class="line"></span><br><span class="line"> 变量名：VUE_CLI3</span><br><span class="line"> 变量值：目录就是我们安装vue的目录，而且找到.bin文件夹 D:\路径\..\路径\vue_cli3\node_modules\.bin</span><br><span class="line"></span><br><span class="line"> 变量名：VUE_CLI2</span><br><span class="line"> 变量值：目录就是我们安装vue的目录，而且找到.bin文件夹 D:\路径\..\路径\vue_cli2\node_modules\.bin</span><br><span class="line"></span><br><span class="line"> 都创建完后 ，最后修改Path变量</span><br><span class="line"></span><br><span class="line"> 这一步才是最重要的</span><br><span class="line"></span><br><span class="line"> 先找到Path的位置（这个不能新建，每台电脑都有的，下面的系统变量里的path）、然后点编辑</span><br><span class="line"></span><br><span class="line"> win10电脑下就直接在空白栏双击，然后填入刚才我们设置的变量名，保存、注意有 %%包着的 ，即：%VUE_CLI2% 和  %VUE_CLI3%</span><br><span class="line"></span><br><span class="line"> 如果不是win10的电脑</span><br><span class="line"> 编辑Path的时候。可以移到路径的输入框的最后面</span><br><span class="line"> 然后输入 ;%VUE_CLI2%;%VUE_CLI3%</span><br><span class="line">【重点】 win10以下的电脑环境变量是以 ; 分开的，所以不要漏了</span><br><span class="line"></span><br><span class="line"> 最后。重启电脑就行了</span><br><span class="line"> </span><br><span class="line"> 打开终端，输入vue3 -V /  vue -V  查看版本</span><br><span class="line"></span><br><span class="line"> 创建项目也是一样：</span><br><span class="line">		vue-cli2:  vue init webpack projectName <span class="comment">//创建(因为前面我们没更改vue为vue2,所以正常创建)</span></span><br><span class="line">		vue-cli3:  vue3 create projectName      <span class="comment">//创建(因为前面我们更改vue为vue3,所以要用vue3创建)</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-cli2工程目录</title>
    <url>/2021/04/15/vue/vue-cli2%E5%B7%A5%E7%A8%8B%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vue-cli <span class="number">3</span> 是基于 webpack <span class="number">4</span> 打造，vue-cli <span class="number">2</span> 还是 webapck <span class="number">3</span></span><br><span class="line">vue-cli <span class="number">3</span> 的设计原则是“<span class="number">0</span>配置”，移除的配置文件根目录下的，build和config等目录</span><br><span class="line">vue-cli <span class="number">3</span> 提供了 vue ui 命令，提供了可视化配置，更加人性化</span><br><span class="line">移除了<span class="keyword">static</span>文件夹，新增了public文件夹，并且index.html移动到public中</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vue init webpack projectName 创建</span><br><span class="line"></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line">npm run dev</span><br><span class="line"></span><br><span class="line">npm run build</span><br><span class="line"></span><br><span class="line">npm run build --report</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">├─build                                <span class="comment">// webpack配置文件(都已配好，一般不需要配置)</span></span><br><span class="line">		│ ├─builds.js                           <span class="comment">// 生产环境构建</span></span><br><span class="line">		│ ├─check-versions.js           <span class="comment">// 版本检查(node,npm)</span></span><br><span class="line">		│ ├─utils.js                              <span class="comment">// 构建相关工具</span></span><br><span class="line">		│ ├─vue-loader.conf.js          <span class="comment">//  css加载器配置</span></span><br><span class="line">		│ ├─webpack.base.conf.js    <span class="comment">//  webpack基础配置</span></span><br><span class="line">		│ ├─webpack.dev.conf.js      <span class="comment">//  webpack开发环境配置</span></span><br><span class="line">		│ ├─webpack.prod.conf.js    <span class="comment">//  webpack生产环境配置</span></span><br><span class="line">	├─config                              <span class="comment">// 项目打包路径(config内的文件其实是服务于build的，大部分是定义一个变量export出去)</span></span><br><span class="line">		│ ├─dev.env.js                        <span class="comment">//  项目开发环境配置</span></span><br><span class="line">		│ ├─index.js                           <span class="comment">//  项目主要配置(包括监听端口，打包路径等)</span></span><br><span class="line">		│ ├─prod.env.js                     <span class="comment">//  项目生产环境配置</span></span><br><span class="line">	├─dist                                  <span class="comment">// 打包文件</span></span><br><span class="line">	├─node_modules                <span class="comment">// 依赖包</span></span><br><span class="line">	├─src                                   <span class="comment">// 源码目录</span></span><br><span class="line">		│ ├─assets                            <span class="comment">// 静态资源 (样式类如css,less,scss,以及一些外部js文件)</span></span><br><span class="line">		│ ├─components                  <span class="comment">// 公共组件</span></span><br><span class="line">		│ ├─router                            <span class="comment">// 路由(配置项目路由)</span></span><br><span class="line">		│ ├─App.vue                        <span class="comment">// 页面入口文件(根组件)</span></span><br><span class="line">		│ ├─main.js                         <span class="comment">// 程序入口文件，加载各种公共组件</span></span><br><span class="line">	├─<span class="keyword">static</span>                              <span class="comment">// 静态资源 (一般放图片类)</span></span><br><span class="line">	├─.babelrc                          <span class="comment">// ES6语法编译配置</span></span><br><span class="line">	├─.editorconfig                  <span class="comment">// 代码编写规格</span></span><br><span class="line">	├─.gitignore                       <span class="comment">// git上传需要忽略的文件配置</span></span><br><span class="line">	├─.postcssrc.js                  <span class="comment">// 转换css的工具</span></span><br><span class="line">	├─index.html                      <span class="comment">// 入口html文件(主页)</span></span><br><span class="line">	├─package-lock.json</span><br><span class="line">	├─package.json                 <span class="comment">// 项目及工具的依赖配置文件</span></span><br><span class="line">	└─README.md                  <span class="comment">// 项目说明</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue-cli2</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-cli3工程目录</title>
    <url>/2021/04/16/vue/vue-cli3%E5%B7%A5%E7%A8%8B%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vue-cli <span class="number">3</span> 是基于 webpack <span class="number">4</span> 打造，vue-cli <span class="number">2</span> 还是 webapck <span class="number">3</span></span><br><span class="line">vue-cli <span class="number">3</span> 的设计原则是“<span class="number">0</span>配置”，移除的配置文件根目录下的，build和config等目录</span><br><span class="line">vue-cli <span class="number">3</span> 提供了 vue ui 命令，提供了可视化配置，更加人性化</span><br><span class="line">移除了<span class="keyword">static</span>文件夹，新增了public文件夹，并且index.html移动到public中</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vue create projectName 创建</span><br><span class="line"></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line">npm run serve</span><br><span class="line"></span><br><span class="line">npm run build</span><br><span class="line"></span><br><span class="line">npm run lint</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">初始目录</span><br><span class="line"></span><br><span class="line">    ├─dist                                <span class="comment">// 打包文件</span></span><br><span class="line">    ├─node_modules                        <span class="comment">// 依赖包</span></span><br><span class="line">	├─public                              <span class="comment">// public文件夹是用于存放项目使用到的一些静态资源（图片）等，在最后webpack打包时会直接放入dist文件夹内，和 vue-cli2 的static文件夹一样。</span></span><br><span class="line">	├─src                                 <span class="comment">// 源码目录(以后就在这里写)</span></span><br><span class="line">		│ ├─assets                        <span class="comment">// assets一般用于放置src里的组件所使用的静态资源（在webpack打包时会被当成一个模块打包到js文件夹里</span></span><br><span class="line">		│ ├─components                    <span class="comment">// 一般放置非路由组件（全局组件）</span></span><br><span class="line">        │ │  └── HelloWorld.vue                 <span class="comment">// 这是一个名叫HelloWorld.vue组件</span></span><br><span class="line">		│ ├─router                        <span class="comment">// 路由(配置项目路由)，路由配置文件</span></span><br><span class="line">        │ ├─store                         <span class="comment">// 存放vuex相关文件，里面的index.js是vuex的封装文件，用来设置通用变量和方法</span></span><br><span class="line">        │ ├─views                         <span class="comment">// 项目中各模块主要功能的存放文件夹，一般在这里添加新功能</span></span><br><span class="line">		│ ├─App.vue                       <span class="comment">// 页面入口文件(根组件)</span></span><br><span class="line">		│ ├─main.js                       <span class="comment">// 程序入口文件，加载各种公共组件</span></span><br><span class="line">	├─babel.config.js                     <span class="comment">// ES语法转换，比如把ES6相关语法转化为ES5，兼容性更好</span></span><br><span class="line">	├─jsconfig.json                       <span class="comment">//</span></span><br><span class="line">	├─package-lock.json                   <span class="comment">// 包版本控制文件，记录真实安装的包版本</span></span><br><span class="line">	├─package.json                        <span class="comment">// 项目及工具的依赖配置文件</span></span><br><span class="line">	├─vue.config.js                       <span class="comment">// </span></span><br><span class="line">	└─README.md                           <span class="comment">// 项目说明</span></span><br><span class="line"></span><br><span class="line">配置目录</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">├── <span class="string">&#x27;node_modules&#x27;</span>     <span class="comment">// npm下载包都在这个文件夹</span></span><br><span class="line">├── <span class="string">&#x27;public&#x27;</span>                </span><br><span class="line">│   ├── <span class="string">&#x27;favicon.ico&#x27;</span></span><br><span class="line">│   └── <span class="string">&#x27;index.html&#x27;</span>  <span class="comment">// 作为入口模板,最后打包文件所在地，也是main,js 绑定的 dom</span></span><br><span class="line">├── <span class="string">&#x27;src&#x27;</span>             <span class="comment">// 整个工程文件目录</span></span><br><span class="line">│   ├── <span class="string">&#x27;api&#x27;</span>         <span class="comment">// 创建用来管理接口的文件夹</span></span><br><span class="line">│   │   └── <span class="string">&#x27;index.js&#x27;</span>    <span class="comment">// axios 入口使用</span></span><br><span class="line">│   ├── <span class="string">&#x27;assets&#x27;</span>      <span class="comment">// 静态资源管理负责管理图片文字一类的</span></span><br><span class="line">│   │   ├── <span class="string">&#x27;font&#x27;</span>    <span class="comment">// 存放字体库文件夹</span></span><br><span class="line">│   │   └── <span class="string">&#x27;img&#x27;</span>     <span class="comment">// 存放图片的文件夹</span></span><br><span class="line">│   ├── <span class="string">&#x27;components&#x27;</span>  <span class="comment">// 存放组件(全局)文件夹</span></span><br><span class="line">│   │   └── <span class="string">&#x27;HelloWorld.vue&#x27;</span>     <span class="comment">// 这是一个名叫HelloWorld.vue组件</span></span><br><span class="line">│   ├── <span class="string">&#x27;config&#x27;</span>      <span class="comment">// 项目配置的文件夹</span></span><br><span class="line">│   │   └──  <span class="string">&#x27;index.js&#x27;</span>          <span class="comment">// 利用node 找包特性 起名index.js 可以快速导包</span></span><br><span class="line">│   ├── <span class="string">&#x27;directive&#x27;</span>   <span class="comment">// 自定义指令文件夹</span></span><br><span class="line">│   │   └── <span class="string">&#x27;index.js&#x27;</span>           <span class="comment">// 利用node 找包特性 起名index.js 可以快速导包</span></span><br><span class="line">│   ├── <span class="string">&#x27;lib&#x27;</span>         <span class="comment">//工具包</span></span><br><span class="line">│   │   ├── <span class="string">&#x27;tools.js&#x27;</span>           <span class="comment">// 存放和业务无关工具性质的js代码</span></span><br><span class="line">│   │   └── <span class="string">&#x27;util.js&#x27;</span>            <span class="comment">//存放和业务相关工具性质的js代码</span></span><br><span class="line">│   │   └── <span class="string">&#x27;axios.js&#x27;</span>            <span class="comment">//ajax 异步封装</span></span><br><span class="line">│   ├── <span class="string">&#x27;mixins&#x27;</span>      <span class="comment">//混入mixin文件夹            </span></span><br><span class="line">│   │   └── <span class="string">&#x27;mixin.js&#x27;</span>            <span class="comment">//mixin</span></span><br><span class="line">│   ├── <span class="string">&#x27;pages&#x27;</span>      <span class="comment">//页面组件 文件夹           </span></span><br><span class="line">│   ├── <span class="string">&#x27;plugin&#x27;</span>     <span class="comment">//插件文件夹 </span></span><br><span class="line">│   ├── <span class="string">&#x27;styles&#x27;</span>     <span class="comment">//样式文件夹            </span></span><br><span class="line">│   ├── <span class="string">&#x27;mock&#x27;</span>        <span class="comment">// 模拟返回数据文件夹</span></span><br><span class="line">│   │   └── <span class="string">&#x27;index.js&#x27;</span>           <span class="comment">// 利用node 找包特性 起名index.js 可以快速导包</span></span><br><span class="line">│   ├── <span class="string">&#x27;router&#x27;</span>      <span class="comment">// 路由相关</span></span><br><span class="line">│   │   ├── <span class="string">&#x27;index.js&#x27;</span>            <span class="comment">// 利用node 找包特性 起名index.js 可以快速导包</span></span><br><span class="line">│   │   └── <span class="string">&#x27;router.js&#x27;</span>           <span class="comment">// 路由配置</span></span><br><span class="line">│   ├── <span class="string">&#x27;store&#x27;</span>        <span class="comment">// Vuex状态管理文件夹</span></span><br><span class="line">│   │   ├── <span class="string">&#x27;plugin&#x27;</span>   <span class="comment">// Vuex配置文件夹</span></span><br><span class="line">│   │   │   └── <span class="string">&#x27;saveInLocal.js&#x27;</span>         <span class="comment">// vuex 文件内容本地化储存</span></span><br><span class="line">│   │   ├── <span class="string">&#x27;module&#x27;</span>   <span class="comment">// 提取的特定模块的文件夹</span></span><br><span class="line">│   │   │   └── <span class="string">&#x27;user.js&#x27;</span>         <span class="comment">// 保存user模块的vuex js</span></span><br><span class="line">│   │   ├── <span class="string">&#x27;actions.js&#x27;</span>          <span class="comment">// 提取出vuex actions模块</span></span><br><span class="line">│   │   ├── <span class="string">&#x27;index.js&#x27;</span>            <span class="comment">// 利用node 找包特性 起名index.js 可以快速导包</span></span><br><span class="line">│   │   ├── <span class="string">&#x27;mutations.js&#x27;</span>        <span class="comment">// 提取出vuex mutations模块</span></span><br><span class="line">│   │   ├── <span class="string">&#x27;getters.js&#x27;</span>          <span class="comment">// 提取出vuex getters模块</span></span><br><span class="line">│   │   └── <span class="string">&#x27;state.js&#x27;</span>            <span class="comment">// 提取出vuex state模块</span></span><br><span class="line">│   ├── <span class="string">&#x27;views&#x27;</span>        <span class="comment">// 视图组件 和 公共组件</span></span><br><span class="line">│   │   ├── <span class="string">&#x27;About.vue&#x27;</span></span><br><span class="line">│   │   └── <span class="string">&#x27;Home.vue&#x27;</span></span><br><span class="line">│   ├── App.vue     <span class="comment">// 由于render 特性 所以需要一个被渲染的vue文件</span></span><br><span class="line">│   ├── main.js     <span class="comment">// 项目入口，文件打包会找这个文件，并且将这个文件的内容打包</span></span><br><span class="line">├── .browserslistrc      <span class="comment">//目标浏览器配置表</span></span><br><span class="line">├── .editorconfig        <span class="comment">// 编辑器配置</span></span><br><span class="line">├── .gitignore           <span class="comment">// 忽略用git提交省略的提交目录</span></span><br><span class="line">├── babel.config.js      <span class="comment">//  高级语法转低级语法</span></span><br><span class="line">├── package.json</span><br><span class="line">├── package-lock.json    <span class="comment">// 锁版本包</span></span><br><span class="line">├── postcss.config.js    <span class="comment">//CSS预处理器</span></span><br><span class="line">├── README.md</span><br><span class="line">└── vue.config.js        <span class="comment">// 项目自定义配置</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">配置隐藏</span><br><span class="line">原本的webpack.config.js值vue cli3是隐藏起来的，具体目录在</span><br><span class="line">node_nodules/@vue/cli-serve/webpack.config.js</span><br><span class="line"></span><br><span class="line">vue.config.js</span><br><span class="line">vue.config.js 是一个可选的配置文件（我们需要自己创建），如果项目的 (和 package.json 同级的) 根目录中存在这个文件，那么它会被 @vue/cli-service 自动加载</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vue.config.js基础配置代码</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&quot;./&quot;</span>, <span class="comment">// 公共路径 默认为&quot;/&quot;，建议使用&quot;./&quot;相对路径</span></span><br><span class="line">    <span class="attr">devServer</span>: &#123;   <span class="comment">// 本地服务器配置(npm run serve)</span></span><br><span class="line">      <span class="attr">port</span>: <span class="number">8080</span>, <span class="comment">// 端口</span></span><br><span class="line">      <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>, <span class="comment">// 域名</span></span><br><span class="line">      <span class="attr">https</span>: <span class="literal">false</span>, <span class="comment">// 是否开启https</span></span><br><span class="line">      <span class="attr">open</span>: <span class="literal">true</span>	<span class="comment">// 是否在开启服务器后自动打开浏览器访问该服务器</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">lintOnSave</span>: <span class="literal">false</span>,  <span class="comment">// 取消lint语法检测，此处可不配置</span></span><br><span class="line">    <span class="attr">outputDir</span>:<span class="string">&quot;dist&quot;</span>, <span class="comment">// build打包输出目录</span></span><br><span class="line">    <span class="attr">assetsDir</span>:<span class="string">&quot;assets&quot;</span>, <span class="comment">// 静态文件输出目录，基于dist</span></span><br><span class="line">    <span class="attr">indexPath</span>: <span class="string">&quot;index.html&quot;</span>,  <span class="comment">// 输出html文件名</span></span><br><span class="line">    <span class="attr">productionSourceMap</span>: <span class="literal">false</span>, <span class="comment">// 取消.map文件的打包，加快打包速度</span></span><br><span class="line">    <span class="attr">configureWebpack</span>: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// process.env为环境变量，分别对应.env.development文件和.env.production文件 此处表示加快开发环境打包速度</span></span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">&#x27;production&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">      config.optimization.minimizer[<span class="number">0</span>].options.terserOptions.compress.drop_console = <span class="literal">true</span>;	<span class="comment">//生产环境去掉console.log</span></span><br><span class="line">      <span class="keyword">return</span> &#123;  <span class="comment">// 此处配置webpack.config.js的相关配置</span></span><br><span class="line">        <span class="attr">plugins</span>: [],</span><br><span class="line">        <span class="attr">performance</span>: &#123;&#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">补充说明：</span><br><span class="line"></span><br><span class="line">devServer： 所有 webpack-dev-server 的选项都支持。注意： 有些值像 host、port 和 https</span><br><span class="line">可能会被命令行参数覆写。 有些值像 publicPath 和 historyApiFallback</span><br><span class="line">不应该被修改，因为它们需要和开发服务器的 publicPath 同步以保障正常的工作。</span><br><span class="line">devServer.proxy： 如果你的前端应用和后端 API 服务器没有运行在同一个主机上，你需要在开发环境下将 API 请求代理到</span><br><span class="line">API 服务器。这个问题可以通过 vue.config.js 中的 devServer.proxy</span><br><span class="line">选项来配置。devServer.proxy 可以是一个指向开发环境 API 服务器的字符串</span><br><span class="line">pluginOptions： 这是一个不进行任何 schema 验证的对象，因此它可以用来传递任何第三方插件选项</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue-cli3</tag>
      </tags>
  </entry>
  <entry>
    <title>分享点自己搜集的前端有用的链接</title>
    <url>/2016/10/10/links/%E5%88%86%E4%BA%AB%E7%82%B9%E8%87%AA%E5%B7%B1%E6%90%9C%E9%9B%86%E7%9A%84%E5%89%8D%E7%AB%AF%E6%9C%89%E7%94%A8%E7%9A%84%E9%93%BE%E6%8E%A5/</url>
    <content><![CDATA[<hr>
<p>一些链接，觉着还不错，有的在用，有的在看，有的先记上，方便以后查找与使用</p>
<span id="more"></span>
<p><a href="http://www.swiper.com.cn/">swiper中文网</a><br><a href="http://www.jq22.com/">jQuery插件库</a><br><a href="http://www.htmleaf.com/">jQuery之家</a><br><a href="http://www.mycodes.net/">源码之家</a><br><a href="http://www.lanrenzhijia.com/">懒人之家</a><br><a href="http://www.qdfuns.com/">前端网</a><br><a href="http://code.cocoachina.com/">代码库</a><br><a href="http://www.17sucai.com/">中国素材网</a><br><a href="http://588ku.com/sucai/0-pxnum-0-0-0-1/?h=bd&sem=1">千库网</a><br><a href="http://www.58pic.com/">千图网</a></p>
<p><a href="https://tongji.baidu.com/web/welcome/login">百度统计</a><br><a href="http://echarts.baidu.com/examples.html">ECharts</a><br><a href="http://echarts.baidu.com/feature.html">ECharts 特性</a><br><a href="https://www.hcharts.cn/demo/highcharts">Highcharts</a><br><a href="https://tool.lu/">在线工具</a><br><a href="https://tool.lu/regex/">正则表达式在线测试（生成）工具</a><br> <a href="http://m.sui.taobao.org/">SUI Mobile</a><br> <a href="http://sui.taobao.org/sui/docs/index.html">SUI</a><br><a href="https://weui.io/">WeUI</a><br> <a href="http://amazeui.org/getting-started">Amaze UI</a><br> <a href="http://layer.layui.com/mobile/api.html">Layer For Mobile</a></p>
<p> <a href="http://www.jb51.net/Special/900.htm">脚 本 之 家</a><br> <a href="http://bbs.swiper.com.cn/forum.php">swiper中文论坛</a><br> <a href="http://mta.qq.com/">腾讯移动分析</a><br> <a href="https://www.rrxiu.net/content-cjjcbz">人人秀插件</a><br> <a href="https://www.aliyun.com/?spm=5176.doc29955.2.1.ZTChJT">阿里云</a><br> <a href="https://app.apicloud.com/signup">APICloud(APP定制平台)</a><br> <a href="http://www.iconfont.cn/plus/manage/index?manage_type=myprojects&projectId=274070">Iconfont</a><br><a href="http://m.sui.taobao.org/extends/#city-picker">省市区选择器</a></p>
<p><a href="http://www.cnblogs.com/tim-li/archive/2012/08/06/2580252.html">玩转html5<canvas>画图</canvas></a></p>
<p><strong>其他网站</strong><br><a href="https://tinypng.com/">图片压缩</a><br><a href="http://www.dayanzai.me/">大眼仔</a><br><a href="https://www.pigjian.com/">BLOG</a><br><a href="https://www.themepark.com.cn/category/themes/originalthemes/">免费WordPress主题</a><br><a href="https://msdn.itellyou.cn/">MSDN(电脑系统安装)</a><br><a href="https://mac.qq.com/?from=pcqq">腾讯Mac软件中心</a><br><a href="http://momentjs.cn/">momentjs(日期时间)</a><br><a href="http://element-cn.eleme.io/#/zh-CN/component/pagination">Element组件</a><br><a href="http://www.jisuapp.cn/">即速应用(小程序)</a><br><a href="http://www.henkuai.com/forum.php">微信小程序社区</a></p>
<p>待补充。。。</p>
]]></content>
      <categories>
        <category>链接</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>链接</tag>
      </tags>
  </entry>
  <entry>
    <title>mac安装webpack</title>
    <url>/2016/11/12/webpack/mac%E5%AE%89%E8%A3%85webpack/</url>
    <content><![CDATA[<hr>
<span id="more"></span>
<p>1、用npm的方式安装，首先你要安装node.js,<a href="https://nodejs.org/en/download/">地址</a>下载安装<br>2、安装完看有没有安装成功，看下版本,打开终端输入：node -v【查看node版本】、npm -v【查看npm版本】<br> 3(必)、在终端里输入： sudo -s 回车，输入你的开机密码回车<br>4、全局安装webpack：npm install webpack -g 回车</p>
]]></content>
      <categories>
        <category>Webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>electron应用</title>
    <url>/2022/04/23/electron/electron%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<p>讲electron之前先说下 B/S、C/S<br>虽然B/S是目前开发的主流，但是C/S仍然有很大的市场需求</p>
<p>C/S 即Client/Server,客户端/服务器 架构,主要应用于局域网内<br>是一种典型的两层架构。客户端:用户程序（表示层） 服务器端：一种是数据库服务器，一种是Socket服务器。（数据库层）</p>
<p>B/S 即Browser/Server,浏览器/服务器 架构,主要应用于广域网中<br>三层：Browser客户端、webapp服务器端和DB（数据库）端。</p>
<h2 id="什么是electron"><a href="#什么是electron" class="headerlink" title="什么是electron"></a>什么是<a href="https://www.electronjs.org/zh/docs/latest/tutorial/quick-start">electron</a></h2><p>Electron是一个基于Chromium和 Node.js，使用 HTML、CSS和JavaScript来构建跨平台应用的跨平台开发框架，</p>
<p>技术组成：Electron = Chromium + Node.js + Native API</p>
<p>兼容 Mac、Windows 和 Linux。</p>
<p>目前，Electron已经创建了包括 VScode 和 Atom 在内的大量应用</p>
<p>简单来说就是Electron是构建桌面应用(区别手机应用)的，再直白点比如电脑的酷狗音乐，在windows和mac上都能用</p>
<p>桌面端的开发方式主要有 Native 、 QT 、 Flutter 、 NW 、 Electron 、 Tarui </p>
<p>其各自优劣势如下表格<br>| 选型 | 性能 | 包体积 | 安全 | 迭代速度 | 跨平台 | 生态和社区 |<br>| :—— | :—— | :—— | :—— | :—— | :—— | :—— |<br>| Native | 高 | 小 | 安全 | 慢 | 不跨 | 强大 |<br>| QT | 高 | 小 | 安全 | 一般 | 跨 | 强大 |<br>| Tarui | 高 | 小 | 安全 | 慢 | 跨 | 小,不成熟 |<br>| Flutter | 暂无 | 暂无 | 暂无 | 暂无 | 跨 | 小 |<br>| NW | 一般 | 大 | 安全 | 快 | 跨 | 强大 |<br>| Electron | 一般 | 大 | 不安全 | 快 | 跨 | 非常强大 |</p>
<h3 id="数据库-lowdb"><a href="#数据库-lowdb" class="headerlink" title="数据库 lowdb"></a>数据库 lowdb</h3><p>electron 应用数据库有非常多的选择如 lowdb 、 sqlite3 、 electron-store 、 pouchdb 、 dedb 、 rxdb 、 dexie 、 ImmortalDB 等。这些数据库都有一个特性，那就是无服务器</p>
<p>electron 应用数据库技术选型考虑因素主要有以下3点：</p>
<pre><code>生态（使用者数量、维护频率、版本稳定度）
能力
性能
其他（和使用者技术匹配度）
</code></pre>
<p>四个最优选择，分别是 lowdb 、 sqlite3 、 nedb 、 electron-store ， 理由如下：</p>
<pre><code>lowdb： 生态、能力、性能三方面表现优秀， json 形式的存储结构， 支持 lodash 、 ramda 等 api 操作，利于备份和调用
sqlite3： 生态、能力、性能三方面表现优秀， Nodejs 关系型数据库第一选择方案
nedb： 能力、性能三方面表现优秀，缺点是基本不维护了，但底子还在，尤其操作是 MongoDB 的子集，对于熟悉 MongoDB 的使用者来说是绝佳选择。
electron-store： 生态表现优秀，轻量级持久化方案，简单易用
</code></pre>
<p>数据库选型是 lowdb 方案。</p>
<blockquote>
<p>PS：提一下 pouchdb ，如果需要将本地数据同步到远端数据库，可以使用 pouchdb ，其和 couchdb 可以轻松完成同步。</p>
</blockquote>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>创建Electron跨平台应用之前，需要先安装一些常用的工具，如Node、vue和Electron等<br>node(v16.14.2,高了会报错)、vue都不说了，都知道怎么安装</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//安装Electron</span></span><br><span class="line"></span><br><span class="line">npm install -g electron</span><br><span class="line"></span><br><span class="line"><span class="comment">//验证是否安装成功</span></span><br><span class="line"></span><br><span class="line">electron --version</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建运行项目</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//法一(cli2)(老旧,不推荐使用)</span></span><br><span class="line"><span class="comment">// 为什么不使用SimulatedGREG/electron-vue</span></span><br><span class="line"><span class="comment">// SimulatedGREG/electron-vue已经很久没有更新了，而且其生成的工程结构并不是vue-cli3。所以放弃使用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用vue-cli脚手架工具来创建项目</span></span><br><span class="line"></span><br><span class="line">    mkdir my-electron-demo &amp;&amp; cd my-electron-demo</span><br><span class="line"></span><br><span class="line">    vue init simulatedgreg/electron-vue</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 然后根据提示一步步选择自己所需的即可创建项目</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 再然后，使用npm install 安装依赖，安装完成之后，可以使用npm run dev或npm run build命令运行electron-vue模版应用程序</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//当你npm install时候可能会报如下错误</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// npm ERR! gyp info it worked if it ends with ok</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// npm ERR! gyp ERR! cwd C:\...\node_modules\node-sass</span></span><br><span class="line">    <span class="comment">// npm ERR! gyp ERR! node -v v16.14.0</span></span><br><span class="line">    <span class="comment">// npm ERR! gyp ERR! node-gyp -v v3.8.0</span></span><br><span class="line">    <span class="comment">// npm ERR! gyp ERR! not ok</span></span><br><span class="line">    <span class="comment">// npm ERR! Build failed with error code: 1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//解决方案：安装最新版本的node-sass</span></span><br><span class="line"></span><br><span class="line">    npm install node-sass@latest</span><br><span class="line"></span><br><span class="line"><span class="comment">//法二(cli3 推荐)</span></span><br><span class="line">    vue create myproject</span><br><span class="line"></span><br><span class="line">    cd myproject</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过运行以下命令安装并调用vue-cli-plugin-electron-builder的生成器</span></span><br><span class="line">    vue add electron-builder (如果看过我之前写的vue2和vue3共存的文章的话，这里要这么写：vue3 add electron-builder)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 安装依赖</span></span><br><span class="line">    npm install</span><br><span class="line"></span><br><span class="line">    <span class="comment">//启动</span></span><br><span class="line">    npm run electron:serve</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打包</span></span><br><span class="line">    npm run electron:build</span><br><span class="line"></span><br><span class="line"><span class="comment">//安装最新稳定版的 Electron</span></span><br><span class="line">npm install --save-dev electron</span><br><span class="line"><span class="comment">//现有项目更新到最新的稳定版本</span></span><br><span class="line">npm install --save-dev electron@latest</span><br></pre></td></tr></table></figure>
<h3 id="升级electron最新版-vue-cli安装后electron是13-0-0升级到最新版"><a href="#升级electron最新版-vue-cli安装后electron是13-0-0升级到最新版" class="headerlink" title="升级electron最新版(vue-cli安装后electron是13.0.0升级到最新版)"></a>升级electron最新版(vue-cli安装后electron是13.0.0升级到最新版)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//执行如下 现有项目更新到最新的稳定版本</span></span><br><span class="line">npm install --save-dev electron@latest</span><br><span class="line"></span><br><span class="line"><span class="comment">//①此时 npm run electron:serve 会报如下错</span></span><br><span class="line"></span><br><span class="line"><span class="attr">DeprecationWarning</span>: Invalid <span class="string">&#x27;main&#x27;</span> field <span class="keyword">in</span> <span class="string">&#x27;C:\Users\BEIBEI\Desktop\my-electron-vue\dist_electron\package.json&#x27;</span> <span class="keyword">of</span> <span class="string">&#x27;background.js&#x27;</span>. Please either fix that or report it to the <span class="built_in">module</span> author</span><br><span class="line"></span><br><span class="line">解决方法 修改根目录配置文件vue.config.js</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改前(只显示修改部分)</span></span><br><span class="line"><span class="built_in">module</span>.exports = defineConfig(&#123;</span><br><span class="line">  <span class="attr">transpileDependencies</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改后(只显示修改部分)</span></span><br><span class="line"><span class="built_in">module</span>.exports = defineConfig(&#123;</span><br><span class="line">  <span class="attr">pluginOptions</span>: &#123;</span><br><span class="line">    <span class="attr">electronBuilder</span>: &#123;</span><br><span class="line">      <span class="attr">chainWebpackMainProcess</span>: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">        config.output.filename(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (file.chunk.name === <span class="string">&quot;index&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;background.js&quot;</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;[name].js&quot;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">transpileDependencies</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">再次启动 npm run electron:serve 就可以了</span><br><span class="line"></span><br><span class="line"><span class="comment">//②还有可能报下面的错</span></span><br><span class="line">Vue Devtools failed to install: <span class="built_in">Error</span>: net::ERR_CONNECTION_TIMED_OUT</span><br><span class="line">这是因为没有安装vue devtools</span><br><span class="line"></span><br><span class="line"><span class="comment">//网上有说安装 electron-devtools-installer</span></span><br><span class="line">npm install electron-devtools-installer --save-dev (很久没更新了，不推荐)</span><br><span class="line"></span><br><span class="line">vue3安装electron vue-tools要装beta版本，</span><br><span class="line">详情参考下面这个地址</span><br><span class="line">(https:<span class="comment">//blog.csdn.net/ashin8032/article/details/122600345)</span></span><br></pre></td></tr></table></figure>

<h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><h4 id="编辑根目录文件package-json，添加描述和作者"><a href="#编辑根目录文件package-json，添加描述和作者" class="headerlink" title="编辑根目录文件package.json，添加描述和作者"></a>编辑根目录文件package.json，添加描述和作者</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//编辑前(只显示部分内容)</span></span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;my-electron-vue&quot;</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">//编辑后(只显示部分内容)</span></span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;my-electron-vue&quot;</span>,</span><br><span class="line"><span class="string">&quot;description&quot;</span>: <span class="string">&quot;my electron+vue project&quot;</span>,</span><br><span class="line"><span class="string">&quot;author&quot;</span>: <span class="string">&quot;author&quot;</span>,</span><br></pre></td></tr></table></figure>
<h4 id="添加图标"><a href="#添加图标" class="headerlink" title="添加图标"></a>添加图标</h4><blockquote>
<p>桌面应用图标:<br> 桌面应用图标大小256*256，且后缀为【.ico】。<a href="https://tool.520101.com/diannao/ico/">网页生成ico</a></p>
</blockquote>
<p> 在package.json中/vue.config.js中配置图标路径 <font color="#dd0000">（package.json中/vue.config.js中，这里配置的是控制打包后的桌面快捷方式的图标）</font>，如下，这是electron-builder（安装版方式），免安装版配置在执行命令中。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;build&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;appId&quot;</span>: <span class="string">&quot;com.example.app&quot;</span>, <span class="comment">//包名</span></span><br><span class="line">    <span class="string">&quot;productName&quot;</span>:<span class="string">&quot;aDemo&quot;</span>,<span class="comment">//项目名，也是生成的安装文件名，即aDemo.exe</span></span><br><span class="line">    <span class="string">&quot;copyright&quot;</span>: <span class="string">&quot;Copyright © 2019&quot;</span>,<span class="comment">//版权信息</span></span><br><span class="line">    <span class="string">&quot;directories&quot;</span>:&#123; <span class="comment">// 打包地址</span></span><br><span class="line">        <span class="string">&quot;output&quot;</span>:<span class="string">&quot;./dist&quot;</span><span class="comment">//输出文件路径</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">&quot;nsis&quot;</span>: &#123;  <span class="comment">// 安装过程的配置</span></span><br><span class="line">        <span class="string">&quot;oneClick&quot;</span>: <span class="literal">false</span>, <span class="comment">// 是否一键安装</span></span><br><span class="line">        <span class="string">&quot;allowElevation&quot;</span>: <span class="literal">true</span>, <span class="comment">// 允许请求提升。 如果为false，则用户必须使用提升的权限重新启动安装程序</span></span><br><span class="line">        <span class="string">&quot;allowToChangeInstallationDirectory&quot;</span>: <span class="literal">true</span>, <span class="comment">// 允许修改安装目录</span></span><br><span class="line">        <span class="string">&quot;installerIcon&quot;</span>: <span class="string">&quot;./XXX/logo.ico&quot;</span>, <span class="comment">// 安装图标</span></span><br><span class="line">        <span class="string">&quot;uninstallerIcon&quot;</span>: <span class="string">&quot;./XXX/logo.ico&quot;</span>, <span class="comment">//卸载图标</span></span><br><span class="line">        <span class="string">&quot;installerHeaderIcon&quot;</span>: <span class="string">&quot;./XXX/logo.ico&quot;</span>, <span class="comment">// 安装时头部图标</span></span><br><span class="line">        <span class="string">&quot;createDesktopShortcut&quot;</span>: <span class="literal">true</span>, <span class="comment">// 创建桌面图标</span></span><br><span class="line">        <span class="string">&quot;createStartMenuShortcut&quot;</span>: <span class="literal">true</span>, <span class="comment">// 创建开始菜单图标</span></span><br><span class="line">        <span class="string">&quot;shortcutName&quot;</span>: <span class="string">&quot;idea&quot;</span>, <span class="comment">// 图标名称</span></span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;include&quot;</span>: <span class="string">&quot;build/script/installer.nsh&quot;</span>, <span class="comment">// 包含的自定义nsis脚本 这个对于构建需求严格得安装过程相当有用。</span></span><br><span class="line">        <span class="string">&quot;script&quot;</span>: <span class="string">&quot;build/script/installer.nsh&quot;</span>, <span class="comment">// NSIS脚本的路径，用于自定义安装程序。 默认为build / installer.nsi。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//关于include 和 script 到底选择哪一个 ？</span></span><br><span class="line">        <span class="comment">//在对个性化安装过程需求并不复杂，只是需要修改一下安装位置，卸载提示等等的简单操作建议使用include配置,如果你需要炫酷的安装过程，建议使用script进行完全自定义</span></span><br><span class="line">        </span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">&quot;win&quot;</span>: &#123;   <span class="comment">// 图标路径</span></span><br><span class="line">        <span class="string">&quot;icon&quot;</span>: <span class="string">&quot;public/icons/icon.ico&quot;</span>,</span><br><span class="line">        <span class="string">&quot;target&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;target&quot;</span>: <span class="string">&quot;nsis&quot;</span>,<span class="comment">//利用nsis制作安装程序</span></span><br><span class="line">                <span class="string">&quot;arch&quot;</span>: [  <span class="comment">// 这个意思是打出来32 bit + 64 bit的包，但是要注意：这样打包出来的安装包体积比较大，所以建议直接打32的安装包。</span></span><br><span class="line">                    <span class="string">&quot;x64&quot;</span>,<span class="comment">//64位</span></span><br><span class="line">                    <span class="string">&quot;ia32&quot;</span><span class="comment">//32位</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ] </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;mac&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;icon&quot;</span>: <span class="string">&quot;public/icons/icon.ico&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;linux&quot;</span>: &#123; </span><br><span class="line">        <span class="string">&quot;icon&quot;</span>: <span class="string">&quot;public/icons/icon.ico&quot;</span></span><br><span class="line">    &#125;, </span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">vue3-Electron 窗口图标在测试时不变化，打包后改变，目前的现象是如此，配置可以写在vue.config.js中如下：</span><br><span class="line"><span class="attr">pluginOptions</span>: &#123;</span><br><span class="line">    <span class="attr">electronBuilder</span>: &#123;</span><br><span class="line">        <span class="attr">builderOptions</span>: &#123;</span><br><span class="line">            <span class="attr">appId</span>: <span class="string">&quot;com.example.app&quot;</span>, <span class="comment">//包名</span></span><br><span class="line">            <span class="attr">productName</span>:<span class="string">&quot;aDemo&quot;</span>,<span class="comment">//项目名，也是生成的安装文件名，即aDemo.exe</span></span><br><span class="line">            <span class="attr">copyright</span>: <span class="string">&quot;Copyright © 2019&quot;</span>,<span class="comment">//版权信息</span></span><br><span class="line">            <span class="attr">directories</span>:&#123;</span><br><span class="line">                <span class="attr">output</span>:<span class="string">&quot;./dist&quot;</span><span class="comment">//输出文件路径</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">nsis</span>: &#123;  <span class="comment">// 安装过程的配置</span></span><br><span class="line">                <span class="attr">oneClick</span>: <span class="literal">false</span>, <span class="comment">// 是否一键安装</span></span><br><span class="line">                <span class="attr">allowToChangeInstallationDirectory</span>: <span class="literal">true</span>, <span class="comment">// 允许修改安装目录</span></span><br><span class="line">                </span><br><span class="line">                <span class="attr">installerIcon</span>: <span class="string">&quot;./public/icon.ico&quot;</span>, <span class="comment">// 安装图标</span></span><br><span class="line">                <span class="attr">installerHeaderIcon</span>: <span class="string">&quot;./public/icon.ico&quot;</span> <span class="comment">// 安装时头部图标</span></span><br><span class="line">                <span class="attr">createDesktopShortcut</span>: <span class="literal">true</span>, <span class="comment">// 创建桌面图标</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">win</span>: &#123;</span><br><span class="line">                <span class="attr">icon</span>: <span class="string">&#x27;./public/icon.ico&#x27;</span> <span class="comment">//打包windows版本的logo</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;mac&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;icon&quot;</span>: <span class="string">&quot;./public/icon.ico&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;linux&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;icon&quot;</span>: <span class="string">&quot;./public/icon.ico&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">productName</span>: <span class="string">&quot;vfirstss&quot;</span>, <span class="comment">//应用的名称</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>窗口图标<br>在主进程文件index.js（可能你的主进程文件叫main.js或者别的,我的叫background.js，总之领会精神就好，哈哈哈）,这里配置的是窗口图标</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mainWindow = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    ......  <span class="comment">// 因为这篇文章重点讲解图标配置，所以此处省略别的配置代码</span></span><br><span class="line">    <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">    <span class="attr">width</span>: <span class="number">1020</span>,</span><br><span class="line">    <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">      ...</span><br><span class="line">      <span class="attr">nodeIntegration</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 下面这行代码就是配置窗口图标的核心代码了</span></span><br><span class="line">+   icon: path.join(__dirname, <span class="string">&#x27;./XXX/logo20.ico&#x27;</span>),    <span class="comment">// 注意，这里的path是一个node模块哦，需要npm安装并且引入使用。最直接的作用就是拼接字符串。</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">发现并没有变化？这个其实是正常的，BrowserWindow 对象的 icon 属性只对 windows/Linux 系统生效，对于 Mac OS 需要通过 app.dock.setIcon 进行设置</span><br><span class="line"></span><br><span class="line">mainWindow = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    ......  <span class="comment">// 因为这篇文章重点讲解图标配置，所以此处省略别的配置代码</span></span><br><span class="line">    <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">    <span class="attr">width</span>: <span class="number">1020</span>,</span><br><span class="line">    <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">      ...</span><br><span class="line">      <span class="attr">nodeIntegration</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 下面这行代码就是配置窗口图标的核心代码了</span></span><br><span class="line">++  icon: path.join(__dirname, <span class="string">&#x27;assets/images/facetime.png&#x27;</span>),  <span class="comment">//windows  // 注意，这里的path是一个node模块哦，需要npm安装并且引入使用。最直接的作用就是拼接字符串。</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">++  <span class="keyword">if</span> (process.platform === <span class="string">&#x27;darwin&#x27;</span>) &#123;  <span class="comment">//mac</span></span><br><span class="line">++      app.dock.setIcon(path.join(__dirname, <span class="string">&#x27;assets/images/facetime.png&#x27;</span>));</span><br><span class="line">++  &#125;</span><br></pre></td></tr></table></figure>

<h4 id="设置标识"><a href="#设置标识" class="headerlink" title="设置标识"></a>设置标识</h4><p>我们经常会发现图标右上方会有消息通知(Dock badges)，比如 App Store 有多少个已安装的软件可以更新，QQ 上有多少条未读的消息等等。这个 Dock 标识在 Electron 中要如何设置呢？</p>
<p>我们可以通过 <code>app.dock.setBadge</code> API 进行设置。下面我们实现当应用窗口失去焦点时让消息通知的标识加1的功能</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWindow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    mainWindow = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">        <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">        <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">            <span class="attr">nodeIntegration</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">icon</span>: path.join(__dirname, <span class="string">&#x27;assets/images/facetime.png&#x27;</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (process.platform === <span class="string">&#x27;darwin&#x27;</span>) &#123;</span><br><span class="line">        app.dock.setIcon(path.join(__dirname, <span class="string">&#x27;assets/images/facetime.png&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mainWindow.loadFile(<span class="string">&#x27;index.html&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    mainWindow.on(<span class="string">&#x27;close&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        mainWindow = <span class="literal">null</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">++  mainWindow.on(<span class="string">&#x27;blur&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">++      <span class="keyword">const</span> badgeString = app.dock.getBadge();</span><br><span class="line">++      <span class="keyword">if</span> (badgeString === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">++          app.dock.setBadge(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">++      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">++        app.dock.setBadge((<span class="built_in">parseInt</span>(badgeString) + <span class="number">1</span>).toString());</span><br><span class="line">++      &#125;</span><br><span class="line">++  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="在项目中运行以下命令打包项目"><a href="#在项目中运行以下命令打包项目" class="headerlink" title="在项目中运行以下命令打包项目"></a>在项目中运行以下命令打包项目</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm run electron:build</span><br></pre></td></tr></table></figure>
<p>等待打包完成<br>windows安装程序生成位置在 <code>dist_electron\项目名 Setup 0.1.0.exe</code><br>windows免安装程序生成位置在 <code>dist_electron\win-unpacked(绿色免安装包)\项目名</code></p>
<p>mac安装程序生成位置在 <code>dist_electron\项目名-0.1.0.dmg</code></p>
<h3 id="应用工程目录"><a href="#应用工程目录" class="headerlink" title="应用工程目录"></a>应用工程目录</h3><p>使用electron-vue(vue2)模版创建的Electron工程结构如下图</p>
<p><img src="/images/electron_vue_cli.jpg" alt="工程结构"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">和前端工程的项目结构类似，Electron项目的目录结构如下所示：</span><br><span class="line"></span><br><span class="line">    electron-vue：Electron模版配置。</span><br><span class="line"></span><br><span class="line">    build：文件夹，用来存放项目构建脚本。</span><br><span class="line"></span><br><span class="line">    config：中存放项目的一些基本配置信息，最常用的就是端口转发。</span><br><span class="line"></span><br><span class="line">    node_modules：这个目录存放的是项目的所有依赖，即 npm install 命令下载下来的文件。</span><br><span class="line"></span><br><span class="line">    src：这个目录下存放项目的源码，即开发者写的代码放在这里。</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>：用来存放静态资源。</span><br><span class="line"></span><br><span class="line">    index.html：则是项目的首页、入口页，也是整个项目唯一的HTML页面。</span><br><span class="line"></span><br><span class="line">    package.json：中定义了项目的所有依赖，包括开发时依赖和发布时依赖</span><br><span class="line"></span><br><span class="line">对于开发者来说， <span class="number">90</span>% 的工作都是在 src 中完成，src 中的文件目录如上图所示</span><br><span class="line"></span><br><span class="line">【主进程】</span><br><span class="line">    Electron 运行 package.json 的 main 脚本（background.js）的进程被称为主进程。在主进程中运行的脚本通过创建web页面来展示用户界面。一个 Electron 应用总是有且只有一个主进程。</span><br><span class="line"></span><br><span class="line">【渲染进程】</span><br><span class="line">    由于 Electron 使用了 Chromium 来展示 Web 页面，所以 Chromium 的多进程架构也被使用到。每个 Electron 中的 Web 页面运行在它自己的渲染进程中。在普通的浏览器中，Web页面通常在一个沙盒环境中运行，不被允许去接触原生的资源。然而 Electron 允许用户在 Node.js 的 API 支持下可以在页面中和操作系统进行一些底层交互</span><br><span class="line"></span><br><span class="line">【主进程与渲染进程通信】</span><br><span class="line">    主进程使用 BrowserWindow 实例创建页面。每个 BrowserWindow 实例都在自己的渲染进程里运行页面。当一个 BrowserWindow 实例被销毁后，相应的渲染进程也会被终止。主进程管理所有的Web页面和它们对应的渲染进程。每个渲染进程都是独立的，它只关心它所运行的 Web 页面</span><br><span class="line"></span><br><span class="line">src目录结构</span><br><span class="line">    在Electron目录中，src会包包含main和renderer两个目录</span><br><span class="line"></span><br><span class="line">main目录</span><br><span class="line">    main目录会包含index.js和index.dev.js两个文件。</span><br><span class="line"></span><br><span class="line">        index.js：应用程序的主文件，electron 也从这里启动的，它也被用作 webpack 产品构建的入口文件，所有的 main 进程工作都应该从这里开始。</span><br><span class="line"></span><br><span class="line">        index.dev.js：此文件专门用于开发阶段，因为它会安装 electron-debug 和 vue-devtools。一般不需要修改此文件，但它可以扩展开发的需求。</span><br><span class="line">渲染进程</span><br><span class="line">    renderer是渲染进程目录，平时项目开发源码的存放目录，包含assets、components、router、</span><br><span class="line">    </span><br><span class="line">    store、App.vue和main.js。</span><br><span class="line"></span><br><span class="line">        assets：assets下的文件如（js、css）都会在dist文件夹下面的项目目录分别合并到一个文件里面去。</span><br><span class="line"></span><br><span class="line">        components：此文件用于存放应用开发的组件，可以是自定义的组件。</span><br><span class="line"></span><br><span class="line">        router：如果你了解vue-router，那么Electron项目的路由的使用方式和vue-router的使用方式类似。</span><br><span class="line"></span><br><span class="line">        modules：electron-vue 利用 vuex 的模块结构创建多个数据存储，并保存在 src/renderer/store/modules 中。</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>




<h3 id="打包并分发应用程序"><a href="#打包并分发应用程序" class="headerlink" title="打包并分发应用程序"></a>打包并分发应用程序</h3><p>官网说 最快捷的打包方式是使用 Electron Forge</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将 Electron Forge 添加到您应用的开发依赖中，并使用其&quot;import&quot;命令设置 Forge 的脚手架：</span></span><br><span class="line"></span><br><span class="line">npm install --save-dev @electron-forge/cli</span><br><span class="line">npx electron-forge <span class="keyword">import</span></span><br><span class="line"></span><br><span class="line">✔ Checking your system</span><br><span class="line">✔ Initializing Git Repository</span><br><span class="line">✔ Writing modified package.json file</span><br><span class="line">✔ Installing dependencies</span><br><span class="line">✔ Writing modified package.json file</span><br><span class="line">✔ Fixing .gitignore</span><br><span class="line"></span><br><span class="line">We have ATTEMPTED to convert your app to be <span class="keyword">in</span> a format that electron-forge understands.</span><br><span class="line"></span><br><span class="line">Thanks <span class="keyword">for</span> using <span class="string">&quot;electron-forge&quot;</span>!!!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Forge 的 make 命令来创建可分发的应用程序</span></span><br><span class="line"></span><br><span class="line">npm run make</span><br><span class="line"></span><br><span class="line">&gt; my-electron-app@<span class="number">1.0</span><span class="number">.0</span> make /my-electron-app</span><br><span class="line">&gt; electron-forge make</span><br><span class="line"></span><br><span class="line">✔ Checking your system</span><br><span class="line">✔ Resolving Forge Config</span><br><span class="line">We need to package your application before we can make it</span><br><span class="line">✔ Preparing to Package Application <span class="keyword">for</span> arch: x64</span><br><span class="line">✔ Preparing native dependencies</span><br><span class="line">✔ Packaging Application</span><br><span class="line">Making <span class="keyword">for</span> the following targets: zip</span><br><span class="line">✔ Making <span class="keyword">for</span> target: zip - On platform: darwin - For arch: x64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Electron-forge 会创建 out 文件夹，您的软件包将在那里找到</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Example for macOS</span></span><br><span class="line">out/</span><br><span class="line">├── out/make/zip/darwin/x64/my-electron-app-darwin-x64-<span class="number">1.0</span><span class="number">.0</span>.zip</span><br><span class="line">├── ...</span><br><span class="line">└── out/my-electron-app-darwin-x64/my-electron-app.app/Contents/MacOS/my-electron-app</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Electron源码目录"><a href="#Electron源码目录" class="headerlink" title="Electron源码目录"></a>Electron源码目录</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Electron</span><br><span class="line">├──atom - Electron 的源代码</span><br><span class="line">|  ├── app - 系统入口代码</span><br><span class="line">|  ├── browser - 包含了主窗口、UI 和其他所有与主进程有关的东西，它会告诉渲染进程如何管理页面</span><br><span class="line">|  |   ├── lib - 主进程初始化代码中 JavaScript 部分的代码</span><br><span class="line">|  |   ├── ui - 不同平台上 UI 部分的实现</span><br><span class="line">|  |   |   ├── cocoa - Cocoa 部分的源代码</span><br><span class="line">|  |   |   ├── gtk - GTK+ 部分的源代码</span><br><span class="line">|  |   |   └── win - Windows GUI 部分的源代码</span><br><span class="line">|  |   ├── default_app - 在没有指定 app 的情况下 Electron 启动时默认显示的页面</span><br><span class="line">|  |   ├── api - 主进程 API 的实现</span><br><span class="line">|  |   |   └── lib - API 实现中 Javascript 部分的代码</span><br><span class="line">|  |   ├── net - 网络相关的代码</span><br><span class="line">|  |   ├── mac - 与 Mac 有关的 Objective-C 代码</span><br><span class="line">|  |   └── resources - 图标，平台相关的文件等</span><br><span class="line">|  ├── renderer - 运行在渲染进程中的代码</span><br><span class="line">|  |   ├── lib - 渲染进程初始化代码中 JavaScript 部分的代码</span><br><span class="line">|  |   └── api - 渲染进程 API 的实现</span><br><span class="line">|  |       └── lib - API 实现中 Javascript 部分的代码</span><br><span class="line">|  └── common - 同时被主进程和渲染进程用到的代码，包括了一些用来将 node 的事件循环</span><br><span class="line">|      |        整合到 Chromium 的事件循环中时用到的工具函数和代码</span><br><span class="line">|      ├── lib - 同时被主进程和渲染进程使用到的 Javascript 初始化代码</span><br><span class="line">|      └── api - 同时被主进程和渲染进程使用到的 API 的实现以及 Electron 内置模块的基础设施</span><br><span class="line">|          └── lib - API 实现中 Javascript 部分的代码</span><br><span class="line">├── chromium_src - 从 Chromium 项目中拷贝来的代码</span><br><span class="line">├── docs - 英语版本的文档</span><br><span class="line">├── docs-translations - 各种语言版本的文档翻译</span><br><span class="line">├── spec - 自动化测试</span><br><span class="line">├── atom.gyp - Electron 的构建规则</span><br><span class="line">└── common.gypi - 为诸如 <span class="string">`node`</span> 和 <span class="string">`breakpad`</span> 等其他组件准备的编译设置和构建规则</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">平时开发时，需要重点关注的就是src、package.json和appveyor.yml目录。除此之外，其他需要注意的目录如下：</span><br><span class="line"></span><br><span class="line">    · script - 用于诸如构建、打包、测试等开发用途的脚本</span><br><span class="line"></span><br><span class="line">    · tools - 在 gyp 文件中用到的工具脚本，但与 script 目录不同， 该目录中的脚本不应该被用户直接调用</span><br><span class="line"></span><br><span class="line">    · vendor - 第三方依赖项的源代码，为了防止人们将它与 Chromium 源码中的同名目录相混淆， 在这里我们不使用 third_party 作为目录名</span><br><span class="line"></span><br><span class="line">    · node_modules - 在构建中用到的第三方 node 模块</span><br><span class="line"></span><br><span class="line">    · out - ninja 的临时输出目录</span><br><span class="line"></span><br><span class="line">    · dist - 由脚本 script/create-dist.py 创建的临时发布目录</span><br><span class="line"></span><br><span class="line">    · external_binaries - 下载的不支持通过 gyp 构建的预编译第三方框架</span><br></pre></td></tr></table></figure>
<h3 id="热更新"><a href="#热更新" class="headerlink" title="热更新"></a>热更新</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 每次修改完代码，我们都需要重启，所以添加一个热更新依赖</span></span><br><span class="line">yarn add --dev electron-reloader</span><br><span class="line"></span><br><span class="line"><span class="comment">//main.js修改如下：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; app, BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">//热加载</span></span><br><span class="line"><span class="keyword">const</span> reLoader=<span class="built_in">require</span>(<span class="string">&quot;electron-reloader&quot;</span>)</span><br><span class="line">reLoader(<span class="built_in">module</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">//监听初始化完成的生命周期</span></span><br><span class="line">app.on(<span class="string">&quot;ready&quot;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> mainWindow = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">        <span class="attr">width</span>: <span class="number">700</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="number">700</span></span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    mainWindow.loadFile(<span class="string">&#x27;./src/index.html&#x27;</span>).then()</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<h3 id="菜单的使用-参考文件"><a href="#菜单的使用-参考文件" class="headerlink" title="菜单的使用 参考文件"></a>菜单的使用 <a href="https://blog.csdn.net/qq_50909707/article/details/127917163">参考文件</a></h3><p><a href="https://blog.csdn.net/haoaiqian/article/details/128207673">1</a></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h3><h4 id="APP窗口大小"><a href="#APP窗口大小" class="headerlink" title="APP窗口大小"></a>APP窗口大小</h4><p>修改background.js：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWindow</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Create the browser window.</span></span><br><span class="line">    win = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">+       width: <span class="number">1200</span>,</span><br><span class="line">+       height: <span class="number">620</span>,</span><br><span class="line">        <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">            <span class="attr">nodeIntegration</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="取消跨域限制"><a href="#取消跨域限制" class="headerlink" title="取消跨域限制"></a>取消跨域限制</h4><p>修改background.js：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWindow</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Create the browser window.</span></span><br><span class="line">    win = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">        <span class="attr">width</span>: <span class="number">1200</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="number">620</span>,</span><br><span class="line">        <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">+           webSecurity: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">nodeIntegration</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="取消菜单栏"><a href="#取消菜单栏" class="headerlink" title="取消菜单栏"></a>取消菜单栏</h4><p>在我们生成的桌面APP中，我们可以看到默认的菜单栏。</p>
<p>在windows中，菜单栏在APP窗口内的顶部；在macOS中，菜单栏位于电脑屏幕顶部。</p>
<p>为了方便项目将来也能直接生成纯web应用，尽量把APP的全部功能都做到渲染进程里，这里我们取消菜单栏。</p>
<p>由于macOS的特殊性，顶部菜单栏无法删除，所以我们针对macOS特殊处理，把菜单栏只保留“关于”和“退出”。</p>
<p>修改background.js：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">+   <span class="keyword">import</span> &#123; app, protocol, BrowserWindow, Menu &#125; <span class="keyword">from</span> <span class="string">&#x27;electron&#x27;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWindow</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    win.on(<span class="string">&#x27;closed&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        win = <span class="literal">null</span></span><br><span class="line">    &#125;)     </span><br><span class="line">+   createMenu()</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">+   <span class="comment">// 设置菜单栏</span></span><br><span class="line">+   <span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">+       <span class="comment">// darwin表示macOS，针对macOS的设置</span></span><br><span class="line">+       <span class="keyword">if</span> (process.platform === <span class="string">&#x27;darwin&#x27;</span>) &#123;</span><br><span class="line">+           <span class="keyword">const</span> template = [</span><br><span class="line">+           &#123;</span><br><span class="line">+               label: <span class="string">&#x27;App Demo&#x27;</span>,</span><br><span class="line">+               submenu: [</span><br><span class="line">+                   &#123;</span><br><span class="line">+                       role: <span class="string">&#x27;about&#x27;</span></span><br><span class="line">+                   &#125;,</span><br><span class="line">+                   &#123;</span><br><span class="line">+                       role: <span class="string">&#x27;quit&#x27;</span></span><br><span class="line">+                   &#125;]</span><br><span class="line">+           &#125;]</span><br><span class="line">+           <span class="keyword">let</span> menu = Menu.buildFromTemplate(template)</span><br><span class="line">+           Menu.setApplicationMenu(menu)</span><br><span class="line">+       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">+           <span class="comment">// windows及linux系统</span></span><br><span class="line">+           Menu.setApplicationMenu(<span class="literal">null</span>)</span><br><span class="line">+       &#125;</span><br><span class="line">+   &#125;</span><br><span class="line"></span><br><span class="line">macOS菜单栏名称label的“App Demo”会在build版本生效，dev版本会显示“Electron”</span><br></pre></td></tr></table></figure>
<h4 id="Vue-Devtools-failed-to-install-Error-net-ERR-CONNECTION-TIMED-OUT"><a href="#Vue-Devtools-failed-to-install-Error-net-ERR-CONNECTION-TIMED-OUT" class="headerlink" title="Vue Devtools failed to install: Error: net::ERR_CONNECTION_TIMED_OUT"></a>Vue Devtools failed to install: Error: net::ERR_CONNECTION_TIMED_OUT</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>electron</category>
      </categories>
      <tags>
        <tag>electron</tag>
      </tags>
  </entry>
  <entry>
    <title>基于nodejs的express搭建后端服务器</title>
    <url>/2022/05/30/express/express/</url>
    <content><![CDATA[<hr>
<span id="more"></span>
<h2 id="什么是express？"><a href="#什么是express？" class="headerlink" title="什么是express？"></a>什么是<a href>express</a>？</h2><p>express是node.js的一个库，可以让我们搭建一个后端的服务器<br>通俗的讲：express负责后端，vue负责前端，它俩之间使用HTTP来进行数据交换</p>
<h2 id="搭建项目-前后端分离-vue-express"><a href="#搭建项目-前后端分离-vue-express" class="headerlink" title="搭建项目(前后端分离 vue + express )"></a>搭建项目(前后端分离 vue + express )</h2><p>新建项目文件夹express_vue</p>
<h3 id="后端-express环境搭建"><a href="#后端-express环境搭建" class="headerlink" title="后端 - express环境搭建"></a>后端 - express环境搭建</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// cd 进入文件夹express_vue</span></span><br><span class="line">cd express_vue</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局安装express</span></span><br><span class="line">npm install express -g</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局安装Express 脚手架工</span></span><br><span class="line">npm install express-generator -g</span><br><span class="line"></span><br><span class="line"><span class="comment">// express --version 来检测是否安装成功</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 express项目, 利用express-generator 脚手架快速生成项目</span></span><br><span class="line">express --no-view server</span><br><span class="line"><span class="comment">// 该命令即创建了一个名为 server的无视图 express 项目,项目目录如下：</span></span><br><span class="line">├─bin                              </span><br><span class="line">    ├─www                     <span class="comment">// 启动项目，默认监听3000端口         </span></span><br><span class="line">├─public                      <span class="comment">// 存放静态文件（images, js, css）          </span></span><br><span class="line">    ├─images文件夹                     </span><br><span class="line">    ├─javascripts文件夹                         </span><br><span class="line">    ├─stylesheets文件夹</span><br><span class="line">       ├─style.css</span><br><span class="line">    ├─index.html                 </span><br><span class="line">├─routes                     <span class="comment">// 存放路由文件，路由就是用来确定URL和资源的对应关系的，这里面的代码主要用来接收前端的请求，然后进行响应 ，我们需要在里面写后台的那些接口           </span></span><br><span class="line">    ├─index.js                            </span><br><span class="line">    ├─users.js                              </span><br><span class="line">├─app.js                    <span class="comment">// 整个项目的入口文件，在这里面引入一些项目需要的模块，创建 express 实例，进行总体路由设置等</span></span><br><span class="line">├─package-lock.json         <span class="comment">// 执行完 npm install 后生成的，里面是已经安装的依赖包的详细描述，需要上传到 git 上，以保证其他人在 install 的时候，大家的依赖版本相同</span></span><br><span class="line">└─package.json              <span class="comment">// 依赖包描述文件，这里面有的依赖包可以通过 npm install 一键安装</span></span><br><span class="line">views 目录存放模板引擎文件，这里面的文件最终会渲染为html页面</span><br><span class="line"></span><br><span class="line"><span class="comment">//进入项目目录下(/server)，执行 npm install 来安装项目所需的依赖模块</span></span><br><span class="line">cd server</span><br><span class="line"></span><br><span class="line">npm install </span><br><span class="line"></span><br><span class="line"><span class="comment">//执行命令 npm start 启动项目，通过浏览器访问 http://localhost:3000/</span></span><br><span class="line">npm start</span><br><span class="line"></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//localhost:3000/ (显示welcome to Express即启动成功)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//法二</span></span><br><span class="line"><span class="comment">//创建项目也可以使用下面的创建，不用express --no-view server</span></span><br><span class="line">express 想要创建的项目名   <span class="comment">//express 项目名称</span></span><br><span class="line">cd 创建的项目名 <span class="comment">//进入项目</span></span><br><span class="line">npm install   </span><br><span class="line">npm  run start</span><br></pre></td></tr></table></figure>
<p>###nodejs插件 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、nodemon 代码热更新</span><br><span class="line"><span class="comment">//调试Nodejs项目时，修改代码，要手动close掉，再重新启动，非常繁琐</span></span><br><span class="line"><span class="comment">//可使用[nodemon](https/www.npmis.com/package/nodemon)这个工具，它能够监听项目文件的变动，当代码被修改后，nodemon会自动帮我们重启项目，极大方便了开发和调试</span></span><br><span class="line"></span><br><span class="line">npm install -g nodemon <span class="comment">//全局安装</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 项目根目录下创建nodemon.json文件</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;restartable&quot;</span>: <span class="string">&quot;rs&quot;</span>, <span class="comment">//设置重启模式</span></span><br><span class="line">    <span class="string">&quot;ignore&quot;</span>: [ <span class="comment">//设置热更新忽略的文件</span></span><br><span class="line">        <span class="string">&quot;.git&quot;</span>,</span><br><span class="line">        <span class="string">&quot;.svn&quot;</span>,</span><br><span class="line">        <span class="string">&quot;node_modules/**/node_modules&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;verbose&quot;</span>: <span class="literal">true</span>, <span class="comment">//设置日志输出模式，true 详细模式</span></span><br><span class="line">    <span class="string">&quot;execMap&quot;</span>: &#123; <span class="comment">//设置运行服务的后缀名与对应的命令</span></span><br><span class="line">        <span class="string">&quot;js&quot;</span>: <span class="string">&quot;node --harmony&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;watch&quot;</span>: [],  <span class="comment">//监听哪些文件的变化，当变化的时候自动重启</span></span><br><span class="line">    <span class="string">&quot;env&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;NODE_ENV&quot;</span>: <span class="string">&quot;development&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;ext&quot;</span>: <span class="string">&quot;ejs js json&quot;</span> <span class="comment">//监控指定的后缀文件名</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更改启动命令</span></span><br><span class="line">更改package.json中的scripts下的start、把node换成nodemon</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;start&quot;</span>: <span class="string">&quot;nodemon ./bin/www&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//上述步骤全部成功之后重启服务验证,关闭当前服务后我们从新npm start启动服务</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、body-parser</span><br><span class="line"><span class="comment">//express中没有内置的获取post请求体的api，需要第三方包 body-parser,body-parser是解析req.body，不然body不会被解析</span></span><br><span class="line"></span><br><span class="line">cnpm i body-parser -save</span><br><span class="line"><span class="comment">//app.js配置</span></span><br><span class="line"><span class="keyword">var</span> jsonParser = bodyParser.json();</span><br><span class="line"><span class="keyword">var</span> urlencodedParser = bodyParser.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、加密包 bcryptjs</span><br><span class="line">npm i bcryptjs@<span class="number">2.4</span><span class="number">.3</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、表单验证的包</span><br><span class="line">npm install @escook/express-joi</span><br><span class="line">npm install @hapi/joi@<span class="number">17.1</span><span class="number">.0</span>   </span><br><span class="line">npm i joi    <span class="comment">//Cannot mix different versions of joi schemas</span></span><br><span class="line"><span class="keyword">const</span> joi = <span class="built_in">require</span>(<span class="string">&#x27;joi&#x27;</span>)  <span class="comment">//用joi代替@hapi/joi@17.1.0</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、项目集成babel，支持ES6等新语法</span><br><span class="line"><span class="comment">//写着写着，你发现连基础的Import都无法使用，await async也不能用。比如，我const一个常用，它就报错了</span></span><br><span class="line"><span class="comment">//因为你用的语法太新了，是ES6以后的新语法，我们需要用babel转换一下</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//安装babel相关的库支持。cmd执行以下命令：</span></span><br><span class="line">npm install babel babel-node babel-cli --save-dev</span><br><span class="line">npm install --save-dev babel-core babel-loader babel-preset-env babel-preset-react</span><br><span class="line">npm install babel-preset-env --save-dev</span><br><span class="line"><span class="comment">//以上命令请自行百度用途，先照着做，npm会自安装相关的包。其中 --save -dev表示仅保存到当前项目和调试环境。</span></span><br><span class="line">安装完以后，会自动更新package.json文件，在devDependencies中增加了相关的babel库支持</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改start脚本。</span></span><br><span class="line">在package.json，将scripts的start命令，增加 --exec babel-node命令，完整如下：</span><br><span class="line"><span class="string">&quot;start&quot;</span>: <span class="string">&quot;nodemon --watch src --watch config src/index.js --exec babel-node&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//重新运行项目 就可以去玩代码了 ，写你需要的代码，扩充你的项目</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="前端-vue环境搭建"><a href="#前端-vue环境搭建" class="headerlink" title="前端 - vue环境搭建"></a>前端 - vue环境搭建</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// cd 进入文件夹express_vue</span></span><br><span class="line">cd express_vue</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正常用脚手架创建vue项目</span></span><br><span class="line"><span class="comment">//安装axios等插件</span></span><br><span class="line">npm install axios --save</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动项目</span></span><br><span class="line">npm run dev / npm run serve</span><br></pre></td></tr></table></figure>
<h3 id="前后端交互（跨域问题）"><a href="#前后端交互（跨域问题）" class="headerlink" title="前后端交互（跨域问题）"></a>前后端交互（跨域问题）</h3><p><code>注意：使用这两种方法时需要在Express使用路由前修改</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//解决跨域方式一 -- 官方推荐的中间件cros</span></span><br><span class="line"><span class="comment">// 使用cros中间件实现跨域</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//安装中间件</span></span><br><span class="line">npm install cors   <span class="comment">//运行npm install cors安装中间件</span></span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>)   <span class="comment">//使用const cors=require(’cors‘)导入中间件</span></span><br><span class="line">app.use(cors())   <span class="comment">//在路由之前调用app.use(cors())配置中间件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> express, &#123; Express, Router  &#125; <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> app: Express = express();</span><br><span class="line"><span class="keyword">const</span> router: Router = express.Router();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cors = <span class="built_in">require</span>(<span class="string">&quot;cors&quot;</span>);</span><br><span class="line">app.use(cors());</span><br><span class="line"><span class="comment">//注意：使用这两种方法时需要在Express使用路由前修改</span></span><br><span class="line">app.get(<span class="string">&#x27;/list&#x27;</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意事项：</span></span><br><span class="line">①CORS 主要在服务器端进行配置。客户端浏览器无须做任何额外的配置，即可请求开启了CORS的接口。</span><br><span class="line">②CORS在浏览器中有兼容。只有支持XMLHttpRequest Level2的浏览器，才能正常访问开启了CORS的服务端接口（例如：IE10+、Chrome4+、FireFox3<span class="number">.5</span>+）。</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置响应头，处理跨域请求(setHeader)</span></span><br><span class="line">app.all(<span class="string">&#x27;/cors-server&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">	res.setHeader(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="comment">// 允许客户端额外想服务器发送 Content-Type 请求头和 X-Custom-Header 请求头</span></span><br><span class="line">    res.setHeader(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;X-PINGOTHER,Content-type,X-Requested-With,Authorization&quot;</span>)</span><br><span class="line">	res.setHeader(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="string">&quot;PUT,POST,GET,DELETE,OPTIONS&quot;</span>)</span><br><span class="line">	res.send(<span class="string">&#x27;CORS 跨域请求&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//解决跨域方式二 -- 手动添加头信息</span></span><br><span class="line"><span class="comment">//实现跨域访问,要想前后端可以交互，要配置跨域访问</span></span><br><span class="line">express文件夹中的app.js文件中粘贴如下代码</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> express, &#123; Express, Router&#125; <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> app: Express = express();</span><br><span class="line"></span><br><span class="line">app.all(<span class="string">&#x27;*&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 设置允许跨域的域名,*代表允许任意域名跨域</span></span><br><span class="line">    res.header(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>); <span class="comment">//包含本域地址</span></span><br><span class="line">    <span class="comment">// 允许的header类型</span></span><br><span class="line">    res.header(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;X-PINGOTHER,Content-type,X-Requested-With,Authorization&quot;</span>);</span><br><span class="line">    <span class="comment">// 跨域允许的请求方式</span></span><br><span class="line">    res.header(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="string">&quot;PUT,POST,GET,DELETE,OPTIONS&quot;</span>);</span><br><span class="line">    res.header(<span class="string">&quot;X-Powered-By&quot;</span>, <span class="string">&#x27; 3.2.1&#x27;</span>)</span><br><span class="line">    <span class="comment">// 让options 尝试请求快速结束</span></span><br><span class="line">    res.header(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">    next();</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//注意：使用这两种方法时需要在Express使用路由前修改</span></span><br><span class="line">app.use(<span class="string">&quot;/api&quot;</span>, router);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/list&quot;</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">	<span class="comment">// 请求内容</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//连接mysql数据库</span></span><br><span class="line">cd到后端文件夹根目录，安装数据库模块</span><br><span class="line">npm i mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接数据库</span></span><br><span class="line">新建一个utils文件夹，创建pool.js（名字随便取），用于配置数据库连接，粘贴下面代码</span><br><span class="line"><span class="comment">// 连接mysql数据库</span></span><br><span class="line"><span class="comment">// 数据库连接池</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;babel-polyfill&#x27;</span>); <span class="comment">// 兼容性问题</span></span><br><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>);</span><br><span class="line"><span class="comment">//建立连接池</span></span><br><span class="line"><span class="keyword">var</span> pool = mysql.createPool(&#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="attr">user</span>: <span class="string">&#x27;*****&#x27;</span>, <span class="comment">//用户名</span></span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;*****&#x27;</span>, <span class="comment">//密码</span></span><br><span class="line">    <span class="attr">database</span>: <span class="string">&#x27;*****&#x27;</span>, <span class="comment">//要连接数据库名</span></span><br><span class="line">    <span class="comment">//设置超时时间解决握手不活动超时问题</span></span><br><span class="line">    <span class="attr">connectionLimit</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="attr">connectTimeout</span>: <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>,</span><br><span class="line">    <span class="attr">acquireTimeout</span>: <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 取出连接</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPoolConnection</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 从连接池中取出连接 err:错误信息 conn：从连接池中取出的连接对象，通过这个对象去访问数据库</span></span><br><span class="line">        pool.getConnection(<span class="function">(<span class="params">err, conn</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 成功信息</span></span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="comment">// 失败信息</span></span><br><span class="line">                reject(<span class="string">&quot;mysql数据库连接失败!失败原因：&quot;</span> + err);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                resolve(conn);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行sql</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params">sql</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> connection;</span><br><span class="line">        <span class="comment">//then中有2个参数，第⼀个参数是状态变为成功后应该执⾏的回调函数，第⼆个参数是状态变为失败后应该执⾏的回调函数</span></span><br><span class="line">        getPoolConnection().then(<span class="function"><span class="keyword">function</span>(<span class="params">conn</span>) </span>&#123;</span><br><span class="line">            conn.query(sql, <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&quot;sql错误&quot;</span>);</span><br><span class="line">                    <span class="built_in">console</span>.log(err);</span><br><span class="line">                    reject(err);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    resolve(result);</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&quot;sql执行完成&quot;</span>);</span><br><span class="line">                    <span class="comment">// console.log(result)</span></span><br><span class="line">                    conn.release();</span><br><span class="line">                    <span class="comment">// console.log(&quot;释放完成&quot;);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">            reject(err)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    getPoolConnection,</span><br><span class="line">    execute</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="项目打包-–-Vue项目安装打包上传到Express服务器"><a href="#项目打包-–-Vue项目安装打包上传到Express服务器" class="headerlink" title="项目打包 – Vue项目安装打包上传到Express服务器"></a>项目打包 – Vue项目安装打包上传到Express服务器</h3><p>项目写好了，如何发布到服务器部署呢？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、vue项目执行打包,生成dist文件夹</span><br><span class="line">npm run build</span><br><span class="line"></span><br><span class="line">进入到dist/index.html,使用浏览器运行，页面如果空白报错，解决方法</span><br><span class="line">修改，项目根目录下config/index.js，修改一处</span><br><span class="line">    <span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="comment">// Template for index.html</span></span><br><span class="line">    <span class="attr">index</span>: path.resolve(__dirname, <span class="string">&#x27;../dist/index.html&#x27;</span>),</span><br><span class="line">    <span class="comment">// Paths</span></span><br><span class="line">    <span class="attr">assetsRoot</span>: path.resolve(__dirname, <span class="string">&#x27;../dist&#x27;</span>),</span><br><span class="line">    <span class="attr">assetsSubDirectory</span>: <span class="string">&#x27;static&#x27;</span>,</span><br><span class="line">    <span class="attr">assetsPublicPath</span>: <span class="string">&#x27;./&#x27;</span>, <span class="comment">//  未修改前是 / 修改之后 ./</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Source Maps</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">vue项目打包后css背景图路径不对的问题，解决办法为：在build/utils.js文件中添加一行代  publicPath:<span class="string">&#x27;../../&#x27;</span>    </span><br><span class="line">    <span class="keyword">if</span> (options.extract) &#123;</span><br><span class="line">        <span class="keyword">return</span> ExtractTextPlugin.extract(&#123;</span><br><span class="line">        <span class="attr">use</span>: loaders,</span><br><span class="line">        <span class="attr">fallback</span>: <span class="string">&#x27;vue-style-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">publicPath</span>: <span class="string">&#x27;../../&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&#x27;vue-style-loader&#x27;</span>].concat(loaders)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、将vue打包的文件放到Nodejs下运行</span><br><span class="line">①将vue打包生成dist文件下所有的文件复制到express项目的public中</span><br><span class="line">②express项目中，打开app.js文件，将“app.use(<span class="string">&#x27;/&#x27;</span>, indexRouter);”注释掉。（如果要展示vue项目，忽略此步）</span><br><span class="line">③改完后，重新启动express项目 npm start</span><br><span class="line">④运行express，在浏览器中输入localhost:<span class="number">3000</span></span><br><span class="line">⑤如果express运行错误，回到vue项目gw_demo/build/ vue-loader.conf.js将isProduction 改成<span class="literal">false</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">loaders</span>: utils.cssLoaders(&#123;</span><br><span class="line">    <span class="attr">sourceMap</span>: sourceMapEnabled,</span><br><span class="line">    <span class="attr">extract</span>: <span class="literal">false</span> <span class="comment">//isProduction 改成false</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//运维如何管理？</span></span><br><span class="line"><span class="comment">//你需要把package.json+dist文件夹一起打包给运维。运维执行直接执行：npm i ，就可以安装所有的包。</span></span><br><span class="line"><span class="comment">//然后执行npm run serve命令运行相关后端服务。</span></span><br><span class="line"><span class="comment">//当然，一般运维会用pm2来部署，即pm2 start dist/index.js --name server </span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、关闭终端 ,云服务就断了，网页无法访问</span><br><span class="line">可以使用pm2</span><br><span class="line"><span class="comment">//安装pm2</span></span><br><span class="line">npm i pm2 -g</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动项目</span></span><br><span class="line">pm2 start ./bin/www</span><br><span class="line"></span><br><span class="line"><span class="comment">//项目运行的时候一刷新页面就会报404</span></span><br><span class="line">使用connect-history-api-fallback中间件解决</span><br><span class="line">npm install --save connect-history-api-fallback</span><br><span class="line"></span><br><span class="line">修改express创建项目下app.js文件</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express();   <span class="comment">//express框架模块</span></span><br><span class="line"><span class="keyword">var</span> history = <span class="built_in">require</span>(<span class="string">&#x27;connect-history-api-fallback&#x27;</span>); <span class="comment">//这个是重点</span></span><br><span class="line"></span><br><span class="line">app.use(history());  <span class="comment">//使用history   最好放到pubic静态目录前</span></span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">&#x27;public&#x27;</span>)));</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="express中间件"><a href="#express中间件" class="headerlink" title="express中间件"></a>express中间件</h3><p>Express的中间件，本质上是function处理函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> zjj = <span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</span><br><span class="line">    next()  <span class="comment">//当前业务处理完后，必须调用next函数，把关系转交给下一个中间件或路由</span></span><br><span class="line">&#125;)</span><br><span class="line">注：</span><br><span class="line">①中间件函数的形参列表中，必须包含next参数，而路由处理函数只包含req和res</span><br><span class="line"></span><br><span class="line">②next函数是实现多个中间件连续调用的关键，它表示把流转关系转交给下一个中间件或路由。</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局生效的中间件</span></span><br><span class="line">客户端发起的任何请求，到达服务器之后，都会触发的中间件，叫做全局生效的中间件</span><br><span class="line"><span class="keyword">const</span> mw = <span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;交给下一个,lm，popst&#x27;</span>)</span><br><span class="line">  next()</span><br><span class="line">&#125;</span><br><span class="line">app.use(mw)</span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;   <span class="comment">//全局中间件的简化形式</span></span><br><span class="line">    next()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//中间件作用</span></span><br><span class="line">多个中间件之间，共享同一份req和res。基于这样的特性，我们可以在上游的中间件中，统一为req 或res对象添加自定义的属性或方法，供下游的中间件或路由进行使用</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义多个全局中间件</span></span><br><span class="line">使用app.use()连续定义多个全局中间件，按定义的顺序执行</span><br><span class="line"></span><br><span class="line"><span class="comment">//局部生效的中间件</span></span><br><span class="line">不使用app.use()定义的中间件，叫做局部生效的中间件</span><br><span class="line"><span class="keyword">const</span> mw1 = <span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;局部中间件&#x27;</span>)</span><br><span class="line">  next()</span><br><span class="line">&#125;</span><br><span class="line">app.get(<span class="string">&#x27;/user&#x27;</span>,mw1,<span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">&#x27;请求&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义多个局部中间件</span></span><br><span class="line">app.get(<span class="string">&#x27;/user&#x27;</span>,mw1,mw2,<span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">&#x27;请求&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意事项</span></span><br><span class="line">①一定要在路由之前注册中间件</span><br><span class="line"></span><br><span class="line">②客户端发送过来的请求，可以连续调用多个中间件进行处理</span><br><span class="line"></span><br><span class="line">④执行完中间件的业务代码之后，不要忘记调用next()函数</span><br><span class="line"></span><br><span class="line">④为了防止代码逻辑混乱，调用next()函数后不要再写额外的代码</span><br><span class="line"></span><br><span class="line">⑤连续调用多个中间件时，多个中间件之间，共享req和res对象</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>中间件的分类</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>）应用级别的中间件</span><br><span class="line"></span><br><span class="line">通过app.use()或app.get()或app.post()，绑定到app实例上的中间件，叫做应用级别的中间件</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>）路由级别的中间件</span><br><span class="line"></span><br><span class="line">绑定到express.Router0实例上的中间件，叫做路由级别的中间件。router.use()</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>）错误级别的中间件</span><br><span class="line"></span><br><span class="line">错误级别中间件的作用：专门用来捕获整个项目中发生的异常错误，从而防止项目异常崩溃的问题。</span><br><span class="line"></span><br><span class="line">参数格式有：（err,req,res,next)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/url&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;服务器发生错误了wl&#x27;</span>)</span><br><span class="line">  res.send(<span class="string">&#x27;新请求&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">err,req,res,next</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;中间件&#x27;</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;错误&#x27;</span> + err.message)</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">注意：错误级别的中间件，必须注册在所有路由之后！</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>）Express内置的中间件</span><br><span class="line"></span><br><span class="line">①express.static 快速托管静态资源的内置中间件，例如：HTML文件、图片、CSS样式等（无兼容性）</span><br><span class="line"></span><br><span class="line">②express.json 解析<span class="built_in">JSON</span>格式的请求体数据（有兼容性，仅在<span class="number">4.16</span><span class="number">.0</span>+版本中可用）③expres.urlencoded 解析URL-encoded 格式的请求体数据（有兼容性，仅在<span class="number">4.16</span><span class="number">.0</span>+版本中可用）</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认情况下，如果不配置解折表单数据的中间件，则req.body默认等于undefined</span></span><br><span class="line">app.use(express.json())  </span><br><span class="line">app.use(express.urlencoded(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;))</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>）第三方的中间件</span><br><span class="line"></span><br><span class="line">按需下载并配置中间件，提高开发效率</span><br><span class="line">npm install body-parser</span><br><span class="line"><span class="keyword">const</span> bodyPaser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line">app.use(bodyPaser)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>自定义中间件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">自己手动模拟一个类似于express.urlencoded这样的中间件，来解析POST提交到服务器的表单数据。</span><br><span class="line"></span><br><span class="line">步骤：</span><br><span class="line"></span><br><span class="line">①定义中间件</span><br><span class="line"></span><br><span class="line">②监听req的data事件</span><br><span class="line"></span><br><span class="line">③监听req的end事件</span><br><span class="line"></span><br><span class="line">④使用querystring 模块解析请求体数据</span><br><span class="line"></span><br><span class="line">⑤将解析出来的数据对象挂载为req，body</span><br><span class="line"></span><br><span class="line">⑥将自定义中间件封装为模块</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>express</category>
      </categories>
      <tags>
        <tag>express</tag>
        <tag>node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试题-css(补充中...)</title>
    <url>/2018/05/10/interview/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98css/</url>
    <content><![CDATA[<hr>
<span id="more"></span>
<h3 id="css3新特性"><a href="#css3新特性" class="headerlink" title="css3新特性"></a>css3新特性</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、选择器</span><br><span class="line">    伪类选择器(有时候同一个元素在不同动作下有不同的样式)</span><br><span class="line">        </span><br><span class="line">    伪类主要有两方面的用处，</span><br><span class="line">        一方面是标记一些特殊的状态；</span><br><span class="line">            <span class="attr">a</span>:&#123;</span><br><span class="line">                text-decoration: none;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="attr">a</span>:link&#123; ... &#125;</span><br><span class="line">            <span class="attr">a</span>:visited&#123; ... &#125;</span><br><span class="line">            <span class="attr">a</span>:hover&#123;</span><br><span class="line">                text-decoration: underline;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="attr">a</span>:active&#123; ... &#125;</span><br><span class="line">        另外还有一类伪类是有筛选的功能</span><br><span class="line">            <span class="attr">li</span>:first-child &#123;&#125; <span class="comment">//选取当前选择器下第一个元素</span></span><br><span class="line">            <span class="attr">li</span>:last-child&#123;&#125;</span><br><span class="line"></span><br><span class="line">            <span class="attr">li</span>:nth-<span class="function"><span class="title">child</span>(<span class="params"><span class="number">5</span></span>)</span> &#123;&#125; <span class="comment">//选取指定位置的元素</span></span><br><span class="line"></span><br><span class="line">            <span class="attr">li</span>:first-<span class="keyword">of</span>-type &#123;&#125;</span><br><span class="line">            <span class="attr">li</span>:last-<span class="keyword">of</span>-type &#123;&#125;</span><br><span class="line"></span><br><span class="line">            <span class="attr">li</span>:nth-<span class="keyword">of</span>-<span class="function"><span class="title">type</span>(<span class="params">n</span>)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    伪元素选择器(伪元素选择器是用于向某些元素设置特殊效果。伪元素选择器选中的并不是真实的 DOM 元素，所以叫伪元素选择器。伪元素选择器构造的元素是虚拟的，所以不能用 JS 去操作它)</span><br><span class="line">    ::first-line <span class="comment">// 为某个元素的第一行文字使用样式。</span></span><br><span class="line">    </span><br><span class="line">    ::first-letter <span class="comment">// 为某个元素中的文字的首字母或第一个字使用样式。</span></span><br><span class="line">    </span><br><span class="line">    ::selection <span class="comment">// 对光标选中的元素添加样式</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">p</span>::before &#123; <span class="comment">// 在某个元素之前插入一些内容</span></span><br><span class="line">        <span class="attr">content</span>: <span class="string">&quot;前面插入的内容&quot;</span>;</span><br><span class="line">        color: red;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attr">p</span>::after &#123; <span class="comment">// 在某个元素之后插入一些内容</span></span><br><span class="line">        <span class="attr">content</span>:<span class="string">&quot;后面插入的内容&quot;</span>;</span><br><span class="line">        color: purple;</span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、圆角边框</span><br><span class="line">    border-radius:25px;</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、阴影效果</span><br><span class="line">    语法(box-shadow: x-shadow y-shadow blur spread color inset;)</span><br><span class="line"></span><br><span class="line">    box-shadow: 10px 10px 5px #<span class="number">888888</span>;</span><br><span class="line"></span><br><span class="line">    text-shadow: 5px 5px 5px #FF0000; 文本阴影</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、transform 变换效果</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、animation 动画效果</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>、transition 过渡效果</span><br><span class="line"></span><br><span class="line">等</span><br></pre></td></tr></table></figure>
<h3 id="HTML5新特性"><a href="#HTML5新特性" class="headerlink" title="HTML5新特性"></a>HTML5新特性</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、语义化标签</span><br><span class="line">    header/footer/nav/dialog</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、视频和音频</span><br><span class="line">    audio和video</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、Canvas绘图</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、svg绘图(可伸缩的矢量图形)</span><br><span class="line">    区别：svg使用xml描述2d图形，canvas使用js来描绘</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、拖放api(drag,任何元素都能够进行缩放)</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>、web worker</span><br><span class="line"></span><br><span class="line"><span class="number">7</span>、web storage</span><br><span class="line">    客户端存储数据的两个对象为</span><br><span class="line">    <span class="built_in">localStorage</span></span><br><span class="line">    sessionStorage</span><br><span class="line"></span><br><span class="line"><span class="number">8</span>、webSocket</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="ES6新特性"><a href="#ES6新特性" class="headerlink" title="ES6新特性"></a>ES6新特性</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、变量声明(<span class="keyword">let</span>和<span class="keyword">const</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、解构</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、拓展运算符(...)</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、箭头函数</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、类的概念</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="css布局方式"><a href="#css布局方式" class="headerlink" title="css布局方式"></a>css布局方式</h3><p>flex布局</p>
<p>float布局</p>
<p>响应式布局</p>
<h3 id="标准盒模型和IE盒模型"><a href="#标准盒模型和IE盒模型" class="headerlink" title="标准盒模型和IE盒模型"></a>标准盒模型和IE盒模型</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">box-sizing: content-box; <span class="comment">/* 标准盒模型 */</span></span><br><span class="line"></span><br><span class="line">盒子实际宽/高 = content(宽/高)  </span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">box-sizing: border-box; <span class="comment">/* IE盒模型 */</span></span><br><span class="line"></span><br><span class="line">盒子实际宽/高 = content(宽/高) + padding*<span class="number">2</span> + border*<span class="number">2</span> </span><br></pre></td></tr></table></figure>
<h3 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">BFC 即 Block Formatting Contexts (块级格式化上下文)，它属于普通流，即：元素按照其在 HTML 中的先后位置至上而下布局，在这个过程中，行内元素水平排列，直到当行被占满然后换行，块级元素则会被渲染为完整的一个新行，除非另外指定，否则所有元素默认都是普通流定位，也可以说，普通流中元素的位置由该元素在 HTML 文档中的位置决定。</span><br><span class="line">可以把 BFC 理解为一个封闭的大箱子，箱子内部的元素无论如何翻江倒海，都不会影响到外部。</span><br><span class="line">只要元素满足下面任一条件即可触发 BFC 特性</span><br><span class="line"></span><br><span class="line">body 根元素</span><br><span class="line">浮动元素：float 除 none 以外的值</span><br><span class="line">绝对定位元素：position (absolute、fixed)</span><br><span class="line">display 为 inline-block、table-cells、flex</span><br><span class="line">overflow 除了 visible 以外的值 (hidden、auto、scroll)</span><br><span class="line">表格单元格，table-cell</span><br><span class="line">弹性布局，flex</span><br><span class="line"></span><br><span class="line">解决问题：</span><br><span class="line"><span class="number">1</span>、外边距margin的塌陷问题(两个盒子设置margin,相邻的margin会重叠)</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、BFC来清除浮动(overflow:hidden,解决父级高度塌陷)</span><br></pre></td></tr></table></figure>

<h3 id="浏览器运行机制-渲染过程-重绘和重排在渲染过程中的哪一部分？"><a href="#浏览器运行机制-渲染过程-重绘和重排在渲染过程中的哪一部分？" class="headerlink" title="浏览器运行机制(渲染过程),重绘和重排在渲染过程中的哪一部分？"></a>浏览器运行机制(渲染过程),重绘和重排在渲染过程中的哪一部分？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">基本流程：</span><br><span class="line">解析 HTML Source，生成 DOM 树。</span><br><span class="line"></span><br><span class="line">解析 CSS，生成 CSSOM 树。</span><br><span class="line"></span><br><span class="line">将 DOM 树和 CSSOM 树结合，去除不可见元素(很重要)，生成渲染树( Render Tree )。</span><br><span class="line"></span><br><span class="line">Layout (布局)：根据生成的渲染树，进行布局( Layout )，得到节点的几何信息(宽度、高度和位置等)。</span><br><span class="line"></span><br><span class="line">Painting (重绘)：根据渲染树以及回流得到的几何信息，将 Render Tree 的每个像素渲染到屏幕上</span><br><span class="line"></span><br><span class="line">重绘：元素的视觉表现属性被改变即触发重绘，如visibility、opacity ，不会影响到 dom 结构。改变某个元素的背景色、文字颜色、边框颜色等等</span><br><span class="line">不影响它周围或内部布局的属性时，屏幕的一部分要重画，但是元素的几何尺寸没有变。</span><br><span class="line"></span><br><span class="line">重排/回流：就是渲染树的一部分必须要更新，并且节点的尺寸发生了变化。重排也会触发重绘。常见情况：</span><br><span class="line"><span class="number">1</span>) DOM 操作,添加或者删除可见的DOM元素等</span><br><span class="line"><span class="number">2</span>) 元素位置改变</span><br><span class="line"><span class="number">3</span>) 修改 width、display 等 CSS 属性</span><br><span class="line"><span class="number">4</span>) 内容改变——比如文本改变或者图片大小改变而引起的计算值宽度和高度改变</span><br><span class="line"><span class="number">5</span>) 浏览器窗口变化（滚动或缩放）</span><br><span class="line"><span class="number">6</span>) 页面渲染初始化</span><br><span class="line">注意：重排(回流)必将引起重绘，而重绘不一定会引起回流。 display:none会触发reflow，而visibility:hidden只会触发repaint，因为没有发现位置变化。</span><br><span class="line"></span><br><span class="line">减少回流：</span><br><span class="line">减少dom的操作</span><br><span class="line">读写分离（获取元素放一块， 修改元素的宽度高度放一块）</span><br><span class="line">样式集中修改： divStyle.cssText = ‘width:100px;height:100px;border:1px solid black’</span><br><span class="line">元素批量修改：使用文档碎片，createDocumentFragment 将需要创建的元素一次性创建再一次性拼接到dom上</span><br><span class="line">动画效果应用到position 属性为absolute或fixed的元素上（脱离文档流）</span><br><span class="line">减少table布局</span><br></pre></td></tr></table></figure>
<h3 id="在地址栏里输入一个地址回车会发生那些事情"><a href="#在地址栏里输入一个地址回车会发生那些事情" class="headerlink" title="在地址栏里输入一个地址回车会发生那些事情"></a>在地址栏里输入一个地址回车会发生那些事情</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>)将域名进行DNS解析</span><br><span class="line">- 浏览器DNS缓存</span><br><span class="line">- 系统DNS缓存</span><br><span class="line">- 路由器DNS缓存</span><br><span class="line">- 网络运营商的DNS缓存</span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>)Tcp 三次握手</span><br><span class="line">- 客户端发送一个带有SYN（synchronize）标志的数据包给服务端</span><br><span class="line">- 服务端接收成功后，回传一个带有SYN/ACK标志的数据包传递确认信息，表示我收到了</span><br><span class="line">- 客户端再回传一个带有ACK标志的数据包，表示我知道了，握手结束</span><br><span class="line"></span><br><span class="line">(<span class="number">3</span>)发送响应</span><br><span class="line"></span><br><span class="line">(<span class="number">4</span>)接受响应</span><br><span class="line"></span><br><span class="line">(<span class="number">5</span>)浏览器解析渲染页面（也就是浏览器的运行机制）</span><br><span class="line"></span><br><span class="line">(<span class="number">6</span>)Tcp 四次挥手</span><br><span class="line">- 客户端发送一个FIN，用来关闭客户端到服务端的数据传送，客户端进入FIN_WAIT_1状态</span><br><span class="line">- 服务端收到FIN后，发送一个ACK给客户端，确认序号为收到序号+<span class="number">1</span>（与SYN相同，一个FIN占用一个序号），服务端进入CLOSE_WAIT状态</span><br><span class="line">- 服务端发送一个FIN，用来关闭服务端到客户端的数据传送，服务端进入LAST_ACK状态</span><br><span class="line">- 客户端收到FIN后，客户端t进入TIME_WAIT状态，接着发送一个ACK给Server，确认序号为收到序号+<span class="number">1</span>，服务端进入CLOSED状态，完成四次挥手</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="rem、em、vh、px各自代表的含义？"><a href="#rem、em、vh、px各自代表的含义？" class="headerlink" title="rem、em、vh、px各自代表的含义？"></a>rem、em、vh、px各自代表的含义？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">px：绝对单位，像素</span><br><span class="line"></span><br><span class="line">em：相对单位，</span><br><span class="line">em根据自身，如果自身没有设置字体大小，那么就会寻找最近具有字体大小的父盒子(基准点为父节点字体的大小，如果自身定义了font-size按自身来计算，整个页面内1em不是一个固定的值)</span><br><span class="line">比如父元素font-size:12px;</span><br><span class="line">　　自身元素如果写成：font-sise:2em;则自身元素用px表示就是24px（相对父元素字体大小）;</span><br><span class="line">　　但是自身元素设置：width:2rem,那么自身元素用px表示就是48px（相对自身字体大小）；</span><br><span class="line"></span><br><span class="line">em做弹性布局的缺点还在于牵一发而动全身，一旦某个节点的字体大小发生变化，那么其后代元素都得重新计算</span><br><span class="line"></span><br><span class="line">rem：相对单位, 相对根节点html的字体大小来计算</span><br><span class="line">比如根元素（html）设置font-size=12px; 非根元素设置width:2rem;则换成px表示就是24px；</span><br><span class="line"></span><br><span class="line">rem布局的本质是等比缩放，一般是基于宽度</span><br><span class="line"></span><br><span class="line">vh、vw：主要用于页面视口大小布局，在页面布局上更加方便简单</span><br><span class="line">比rem更好的方案</span><br><span class="line">vw —— 视口宽度的 <span class="number">1</span>/<span class="number">100</span>；vh —— 视口高度的 <span class="number">1</span>/<span class="number">100</span></span><br><span class="line"></span><br><span class="line">vw和百分比有什么区别？</span><br><span class="line">百分比有继承关系，继承至父级；vw只和设备的宽度有关系；</span><br></pre></td></tr></table></figure>

<h3 id="什么是响应式设计？"><a href="#什么是响应式设计？" class="headerlink" title="什么是响应式设计？"></a>什么是响应式设计？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">响应式设计就是 在不同屏幕分辨率的终端上浏览网页的不同展示方式</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实现响应式布局的方式有如下：</span><br><span class="line"></span><br><span class="line">媒体查询（设置不同类型的媒体条件，并根据对应的条件，给相应符合条件的媒体调用相对应的样式表）</span><br><span class="line">百分比</span><br><span class="line">vw/vh</span><br><span class="line">rem</span><br></pre></td></tr></table></figure>
<h3 id="css选择器有哪些？优先级？"><a href="#css选择器有哪些？优先级？" class="headerlink" title="css选择器有哪些？优先级？"></a>css选择器有哪些？优先级？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">优先级  内联 &gt; ID选择器 &gt; 类选择器 &gt; 标签选择器</span><br><span class="line"></span><br><span class="line">关于css属性选择器常用的有：</span><br><span class="line"></span><br><span class="line">id选择器（#box），选择id为box的元素</span><br><span class="line">类选择器（.box），选择类名为one的所有元素</span><br><span class="line">标签选择器（div），选择标签为div的所有元素</span><br><span class="line">后代选择器（#box div），选择id为box元素内部所有的div元素</span><br><span class="line">子选择器（.one&gt;one_1），选择父元素为.one的所有.one_1的元素</span><br><span class="line">相邻同胞选择器（.one+.two），选择紧接在.one之后的所有.two元素</span><br><span class="line">群组选择器（div,p），选择div、p的所有元素</span><br><span class="line"></span><br><span class="line">还有一些使用频率相对没那么多的选择器：</span><br><span class="line"></span><br><span class="line">伪类选择器</span><br><span class="line">:link ：选择未被访问的链接</span><br><span class="line">:visited：选取已被访问的链接</span><br><span class="line">:active：选择活动链接</span><br><span class="line">:hover ：鼠标指针浮动在上面的元素</span><br><span class="line">:focus ：选择具有焦点的</span><br><span class="line">:first-child：父元素的首个子元素</span><br><span class="line">伪元素选择器</span><br><span class="line">:first-letter ：用于选取指定选择器的首字母</span><br><span class="line">:first-line ：选取指定选择器的首行</span><br><span class="line">:before : 选择器在被选元素的内容前面插入内容</span><br><span class="line">:after : 选择器在被选元素的内容后面插入内容</span><br><span class="line">属性选择器</span><br><span class="line">[attribute] 选择带有attribute属性的元素</span><br><span class="line">[attribute=value] 选择所有使用attribute=value的元素</span><br><span class="line">[attribute~=value] 选择attribute属性包含value的元素</span><br><span class="line">[attribute|=value]：选择attribute属性以value开头的元素</span><br><span class="line">在CSS3中新增的选择器有如下：</span><br><span class="line"></span><br><span class="line">层次选择器（p~ul），选择前面有p元素的每个ul元素</span><br><span class="line">伪类选择器</span><br><span class="line">:first-<span class="keyword">of</span>-type 父元素的首个元素</span><br><span class="line">:last-<span class="keyword">of</span>-type 父元素的最后一个元素</span><br><span class="line">:only-<span class="keyword">of</span>-type 父元素的特定类型的唯一子元素</span><br><span class="line">:only-child 父元素中唯一子元素</span><br><span class="line">:nth-child(n) 选择父元素中第N个子元素</span><br><span class="line">:nth-last-<span class="keyword">of</span>-type(n) 选择父元素中第N个子元素，从后往前</span><br><span class="line">:last-child 父元素的最后一个元素</span><br><span class="line">:root 设置HTML文档</span><br><span class="line">:empty 指定空的元素</span><br><span class="line">:enabled 选择被禁用元素</span><br><span class="line">:disabled 选择被禁用元素</span><br><span class="line">:checked 选择选中的元素</span><br><span class="line">:not(selector) 选择非 &lt;selector&gt; 元素的所有元素</span><br><span class="line">属性选择器</span><br><span class="line">[attribute*=value]：选择attribute属性值包含value的所有元素</span><br><span class="line">[attribute^=value]：选择attribute属性开头为value的所有元素</span><br><span class="line">[attribute$=value]：选择attribute属性结尾为value的所有元素</span><br></pre></td></tr></table></figure>
<h3 id="清除浮动的方法"><a href="#清除浮动的方法" class="headerlink" title="清除浮动的方法"></a>清除浮动的方法</h3><p>为什么要清除浮动？<br>清除浮动主要是为了解决，父元素因为子级元素浮动引起的内部高度为0的问题</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">方法一：使用带 clear 属性的空元素</span><br><span class="line"></span><br><span class="line">在浮动元素后使用一个空元素,并在 CSS 中赋 予.clear&#123;<span class="attr">clear</span>:both;&#125;属性即可清理浮动。</span><br><span class="line"></span><br><span class="line">方法二：使用 CSS 的 overflow 属性</span><br><span class="line"></span><br><span class="line">给浮动元素的父级容器添加 overflow:hidden;或 overflow:auto;可以清除浮动，另外在 IE6 中还 需要触发 hasLayout ，例如为父元素设置容器宽高或设置 zoom:<span class="number">1</span>。 在添加 overflow 属性后，浮动元素又回到了容器层，把容器高度撑起，达到了清理浮动 的效果。</span><br><span class="line"></span><br><span class="line">方法三：给浮动的元素的容器添加浮动</span><br><span class="line"></span><br><span class="line">给浮动元素的容器也添加上浮动属性即可清除内部浮动，但是这样会使其整体浮动，影 响布局，不推荐使用。</span><br><span class="line"></span><br><span class="line">方法四：使用 CSS 的:after 伪元素</span><br><span class="line"></span><br><span class="line">给浮动元素的父级容器添加一个 clearfix 的 <span class="class"><span class="keyword">class</span>，然后给这个 <span class="title">class</span> 添加一个:<span class="title">after</span> 伪元素实 现元素末尾添加一个看不见的块元素清除浮动</span></span><br><span class="line"><span class="class">.<span class="title">clearfix</span>:<span class="title">after</span></span>&#123;</span><br><span class="line">    <span class="attr">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    display: block;</span><br><span class="line">    height: <span class="number">0</span>;</span><br><span class="line">    clear: both;</span><br><span class="line">    visibility: hidden;</span><br><span class="line">&#125;</span><br><span class="line">.clearfix&#123;</span><br><span class="line">    *zoom: <span class="number">1</span>; <span class="comment">//IE6清除浮动的方式， *号只有IE6-IE7执行，其他浏览器不执行</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">方法五： 还有一种更为简单的方式，给父元素定义好height高度，就解决了父级元素无法获取到高度的问题</span><br></pre></td></tr></table></figure>
<h3 id="常见的行内元素、块级元素、空-void-元素"><a href="#常见的行内元素、块级元素、空-void-元素" class="headerlink" title="常见的行内元素、块级元素、空(void)元素"></a>常见的行内元素、块级元素、空(void)元素</h3><p>CSS规范规定，每个元素都有display属性，确定该元素的类型，每个元素都有默认的display值，分别为块级（block）、行内（inline）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">块级元素（div,p,h1...h6,ol,ul,table）</span><br><span class="line"></span><br><span class="line">每个块级元素都是独自占一行、元素的高度宽度都是可以设置的</span><br><span class="line"></span><br><span class="line">行内元素（span,a,img,input,strong）</span><br><span class="line"></span><br><span class="line">可以和其他元素处于一行上，元素的高度宽度顶部和底部边距不可设置</span><br><span class="line"></span><br><span class="line">空元素：</span><br><span class="line">即没有内容的html元素。空元素是在开始标签中关闭的，也就是空元素没有闭合标签；</span><br><span class="line">常见的有：br hr img input link meta</span><br><span class="line">鲜见的有：area base col colgroup param</span><br></pre></td></tr></table></figure>
<h3 id="如何让谷歌浏览器支持小字体"><a href="#如何让谷歌浏览器支持小字体" class="headerlink" title="如何让谷歌浏览器支持小字体"></a>如何让谷歌浏览器支持小字体</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//利用缩放来让字体变小，字体为12px的时候就小不了了。</span></span><br><span class="line">.small-font&#123;</span><br><span class="line">	<span class="attr">transform</span>:scale(<span class="number">0.5</span>);</span><br><span class="line">	-webkit-transform:scale(<span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="画一条0-5px的直线"><a href="#画一条0-5px的直线" class="headerlink" title="画一条0.5px的直线"></a>画一条0.5px的直线</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//考查的是css3的transform</span></span><br><span class="line"><span class="attr">height</span>: 1px;</span><br><span class="line">transform: scale(<span class="number">0.5</span>);</span><br></pre></td></tr></table></figure>
<h3 id="画一个三角形"><a href="#画一个三角形" class="headerlink" title="画一个三角形"></a>画一个三角形</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这属于简单的css考查，平时在用组件库的同时，也别忘了原生的css</span></span><br><span class="line">border-color: red green blue pink; 可以把物体分为四个三角形区域，</span><br><span class="line">               上   右    下   左，每个区域有一种颜色，如果把其他三个区域设定成透明色，就制作出来一个三角形</span><br><span class="line">.a &#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">0</span>;</span><br><span class="line">    height: <span class="number">0</span>;</span><br><span class="line">    border: 100px solid;</span><br><span class="line">    border-color: transparent transparent #0099CC transparent; <span class="comment">//transparent透明</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;a&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="垂直居中的方式"><a href="#垂直居中的方式" class="headerlink" title="垂直居中的方式"></a>垂直居中的方式</h3><a href="/2017/04/15/css/CSS%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%84%E6%96%B9%E5%BC%8F/" title="几种垂直居中的方法">几种垂直居中的方法</a>

<p>垂直居中主要分为了两种类型：居中元素宽高已知 和 居中元素宽高未知</p>
<p>以下的方法都围绕着该HTML展开</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div  <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;wrap&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>  <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h4 id="居中元素宽高元素未知"><a href="#居中元素宽高元素未知" class="headerlink" title="居中元素宽高元素未知"></a>居中元素宽高元素未知</h4><h5 id="（常用）：display：flex-（①）"><a href="#（常用）：display：flex-（①）" class="headerlink" title="（常用）：display：flex （①）"></a>（常用）：display：flex （①）</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.wrap&#123;</span><br><span class="line">	<span class="attr">width</span>:300px;</span><br><span class="line">	height:300px;</span><br><span class="line">    border: 1px solid red;</span><br><span class="line">    <span class="comment">/* 核心代码 */</span></span><br><span class="line">    display:flex;</span><br><span class="line">    justify-content:center;</span><br><span class="line">    align-items:center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box&#123;<span class="comment">//子元素宽高可设可不设</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="常用）：display：flex-margin-auto（②）"><a href="#常用）：display：flex-margin-auto（②）" class="headerlink" title="常用）：display：flex  + margin auto（②）"></a>常用）：display：flex  + margin auto（②）</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.wrap&#123;</span><br><span class="line">	<span class="attr">width</span>:300px;</span><br><span class="line">	height:300px;</span><br><span class="line">    border: 1px solid red;</span><br><span class="line">    <span class="comment">/* 核心代码 */</span></span><br><span class="line">    display:flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box&#123;<span class="comment">//子元素宽高可设可不设</span></span><br><span class="line">    <span class="comment">/* 核心代码 */</span></span><br><span class="line">    <span class="attr">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="absolute-transform"><a href="#absolute-transform" class="headerlink" title="absolute + transform"></a>absolute + transform</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.wrap &#123;</span><br><span class="line">    <span class="attr">width</span>: 300px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    position: relative;</span><br><span class="line">    background-color: plum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box &#123;<span class="comment">//子元素宽高可设可不设</span></span><br><span class="line">    <span class="comment">/* 核心代码 */</span></span><br><span class="line">    <span class="attr">position</span>: absolute;</span><br><span class="line">    left: <span class="number">50</span>%;</span><br><span class="line">    top: <span class="number">50</span>%;</span><br><span class="line">    transform: translate(-<span class="number">50</span>%,-<span class="number">50</span>%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="table-cell"><a href="#table-cell" class="headerlink" title="table-cell"></a>table-cell</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.wrap&#123;</span><br><span class="line">    <span class="attr">width</span>: 300px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    border: 1px solid red;</span><br><span class="line">    <span class="comment">/* 核心代码 */</span></span><br><span class="line">    display: table-cell;</span><br><span class="line">    text-align: center;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box&#123; <span class="comment">//在子元素里加上display: inline-block;</span></span><br><span class="line">    <span class="comment">/* 核心代码 */</span></span><br><span class="line">    <span class="attr">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="grid-网格布局"><a href="#grid-网格布局" class="headerlink" title="grid 网格布局"></a>grid 网格布局</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.wrap &#123;</span><br><span class="line">    <span class="attr">width</span>: 300px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    background-color: plum;</span><br><span class="line">    <span class="comment">/* 核心代码 */</span></span><br><span class="line">    display: grid;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">.box &#123;<span class="comment">//子元素宽高可设可不设</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="居中元素宽高元素已知"><a href="#居中元素宽高元素已知" class="headerlink" title="居中元素宽高元素已知"></a>居中元素宽高元素已知</h4><h5 id="absolute-margin-auto"><a href="#absolute-margin-auto" class="headerlink" title="absolute + margin:auto"></a>absolute + margin:auto</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.wrap&#123;</span><br><span class="line">    <span class="attr">width</span>: 300px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    position: relative;</span><br><span class="line">    background-color: plum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box&#123;<span class="comment">//子元素设置宽高</span></span><br><span class="line">    <span class="attr">width</span>: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color: powderblue;</span><br><span class="line">    <span class="comment">/* 核心代码 */</span></span><br><span class="line">    position: absolute;</span><br><span class="line">    left: <span class="number">0</span>;</span><br><span class="line">    top: <span class="number">0</span>;</span><br><span class="line">    bottom:<span class="number">0</span>;</span><br><span class="line">    right:<span class="number">0</span>;</span><br><span class="line">    margin:auto; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="absolute-负margin"><a href="#absolute-负margin" class="headerlink" title="absolute + 负margin"></a>absolute + 负margin</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.wrap&#123;</span><br><span class="line">    <span class="attr">width</span>: 300px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    position: relative;</span><br><span class="line">    background-color: plum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box&#123;<span class="comment">//子元素设置宽高</span></span><br><span class="line">    <span class="attr">width</span>: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color: powderblue;</span><br><span class="line">    <span class="comment">/* 核心代码 */</span></span><br><span class="line">    position: absolute;</span><br><span class="line">    left: <span class="number">50</span>%;</span><br><span class="line">    top: <span class="number">50</span>%;</span><br><span class="line">    <span class="comment">/*宽高的一半*/</span></span><br><span class="line">    margin-left: -50px;</span><br><span class="line">    margin-top: -50px; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="margin，transform配合"><a href="#margin，transform配合" class="headerlink" title="margin，transform配合"></a>margin，transform配合</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.wrap&#123;</span><br><span class="line">    <span class="attr">width</span>: 300px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    background-color: pink;</span><br><span class="line">    <span class="comment">/* 核心代码 */</span></span><br><span class="line">    <span class="comment">/*防止外边距塌陷。解决外边距塌陷的方法：</span></span><br><span class="line"><span class="comment">    父元素加overflow:hidden或加上边框*/</span></span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line">.box&#123; <span class="comment">//子元素设置宽高</span></span><br><span class="line">    <span class="attr">width</span>: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color: plum;</span><br><span class="line">    <span class="comment">/* 核心代码 */</span></span><br><span class="line">    margin:<span class="number">50</span>% auto;</span><br><span class="line">    transform: translateY(-<span class="number">50</span>%); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="实现两栏布局-左侧固定-右侧自适应布局"><a href="#实现两栏布局-左侧固定-右侧自适应布局" class="headerlink" title="实现两栏布局(左侧固定 + 右侧自适应布局)"></a>实现两栏布局(左侧固定 + 右侧自适应布局)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//html</span></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;outer&quot;</span>&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>左侧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>右侧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、左边元素宽度固定 ，设置向左浮动。将右边元素的 margin-left 设为固定宽度 。注意，因为右边元素的 width 默认为 auto ，所以会自动撑满父元素</span><br><span class="line">.outer &#123;</span><br><span class="line">    <span class="attr">height</span>: 100px;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">.left &#123;</span><br><span class="line">    background-color: lightblue;</span><br><span class="line">    height: 100px;</span><br><span class="line">    <span class="comment">//核心</span></span><br><span class="line">    width: 300px;</span><br><span class="line">    float: left;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">.right &#123;</span><br><span class="line">    <span class="attr">height</span>: 100px;</span><br><span class="line">    background-color: saddlebrown;</span><br><span class="line">    <span class="comment">//核心</span></span><br><span class="line">    margin-left: 300px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、同样利用浮动，左边元素宽度固定 ，设置向左浮动。右侧元素设置 overflow: hidden; 这样右边就触发了 BFC ，BFC 的区域不会与浮动元素发生重叠，所以两侧就不会发生重叠</span><br><span class="line"></span><br><span class="line">.outer &#123;</span><br><span class="line">    <span class="attr">height</span>: 100px;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">.left &#123;</span><br><span class="line">    background-color: lightblue;</span><br><span class="line">    height: 100px;</span><br><span class="line">    <span class="comment">//核心</span></span><br><span class="line">    width: 300px;</span><br><span class="line">    float: left;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">.right &#123;</span><br><span class="line">    <span class="attr">height</span>: 100px;</span><br><span class="line">    background-color: saddlebrown;</span><br><span class="line">    <span class="comment">//核心</span></span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、利用 flex 布局，左边元素固定宽度，右边的元素设置 flex: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">.outer &#123;</span><br><span class="line">    <span class="attr">height</span>: 100px;</span><br><span class="line">    <span class="comment">//核心</span></span><br><span class="line">    display: flex;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">.left &#123;</span><br><span class="line">    background-color: lightblue;</span><br><span class="line">    height: 100px;</span><br><span class="line">    <span class="comment">//核心</span></span><br><span class="line">    width: 300px;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">.right &#123;</span><br><span class="line">    <span class="attr">height</span>: 100px;</span><br><span class="line">    background-color: saddlebrown;</span><br><span class="line">    <span class="comment">//核心</span></span><br><span class="line">    flex: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="实现三栏布局-左右侧固定-中间自适应布局"><a href="#实现三栏布局-左右侧固定-中间自适应布局" class="headerlink" title="实现三栏布局(左右侧固定 + 中间自适应布局)"></a>实现三栏布局(左右侧固定 + 中间自适应布局)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//html</span></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;father&quot;</span>&gt;</span><br><span class="line">    &#123;<span class="comment">/* center在哪个位置都可以 */</span>&#125;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;center&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、利用position ,左右盒子分别设置绝对定位，给固定宽高，中间宽度自适应，设置高度，margin左右盒子的宽度</span><br><span class="line"></span><br><span class="line">.left,</span><br><span class="line">.right &#123;</span><br><span class="line">    <span class="attr">height</span>: 300px;</span><br><span class="line">    width: 200px;</span><br><span class="line">    top: <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//核心</span></span><br><span class="line">     position: absolute;</span><br><span class="line">&#125;</span><br><span class="line">.left &#123;</span><br><span class="line">    <span class="attr">left</span>: <span class="number">0</span>;</span><br><span class="line">    background-color: bisque;</span><br><span class="line">&#125;</span><br><span class="line">.right &#123;</span><br><span class="line">    <span class="attr">right</span>: <span class="number">0</span>;</span><br><span class="line">    background-color: blueviolet;</span><br><span class="line">&#125;</span><br><span class="line">.center &#123;</span><br><span class="line">    <span class="attr">height</span>: 300px;</span><br><span class="line">    background-color: aqua;</span><br><span class="line">    <span class="comment">//核心</span></span><br><span class="line">    margin: <span class="number">0</span> 200px;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、利用浮动，左右设置固定宽高，并设置左右浮动，中间一栏设置高度并margin左右栏的宽度 </span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;father&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#123;<span class="comment">/* 注意：中间一栏center必须放在必须放在最后,不然右边div会掉下来 */</span>&#125;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;center&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.left,</span><br><span class="line">.right &#123;</span><br><span class="line">    <span class="attr">height</span>: 300px;</span><br><span class="line">    width: 200px;</span><br><span class="line">&#125;</span><br><span class="line">.left&#123;  </span><br><span class="line">    background-color: bisque;</span><br><span class="line">    <span class="comment">//核心</span></span><br><span class="line">    float: left;</span><br><span class="line">&#125;</span><br><span class="line">.right&#123;</span><br><span class="line">    background-color: blueviolet;</span><br><span class="line">    <span class="comment">//核心</span></span><br><span class="line">    float: right;</span><br><span class="line">&#125;</span><br><span class="line">.center &#123;</span><br><span class="line">    <span class="attr">height</span>: 300px;</span><br><span class="line">    background-color: aqua;</span><br><span class="line">    <span class="comment">//核心</span></span><br><span class="line">    margin: <span class="number">0</span> 200px;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、利用flex，左右栏设置固定宽高，中间设为flex:<span class="number">1</span></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;father&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#123;<span class="comment">/* center在中间 */</span>&#125;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;center&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.father&#123;</span><br><span class="line">     <span class="comment">//核心</span></span><br><span class="line">    <span class="attr">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line">.left,</span><br><span class="line">.right &#123;</span><br><span class="line">    <span class="attr">height</span>: 300px;</span><br><span class="line">    width: 200px;</span><br><span class="line">&#125;</span><br><span class="line">.left&#123;</span><br><span class="line">    background-color: bisque;</span><br><span class="line">&#125;</span><br><span class="line">.right&#123;</span><br><span class="line">    background-color: blueviolet;</span><br><span class="line">&#125;</span><br><span class="line">.center &#123;</span><br><span class="line">    <span class="attr">height</span>: 300px;</span><br><span class="line">    background-color: aqua;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//核心</span></span><br><span class="line">    flex: <span class="number">1</span>;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、圣杯布局，利用浮动和负边距实现</span><br><span class="line"></span><br><span class="line">将三列都放在同一个父元素里，父元素设置左右的padding,然后中间的盒子放在最前面，</span><br><span class="line"></span><br><span class="line">三个盒子都设置左浮动，中间盒子宽度<span class="number">100</span>%，左右盒子固定宽高，然后会把左右盒子挤下去,</span><br><span class="line"></span><br><span class="line">通过设置负值回到上一行,左盒子负值<span class="number">100</span>%，右盒子负值自身宽度</span><br><span class="line"></span><br><span class="line">再利用相对定位，定位到两边，左盒子设置左边距-<span class="number">100</span>%，右盒子设置右边距-自身宽度</span><br><span class="line"></span><br><span class="line">最后父盒子设置清除浮动 </span><br><span class="line"></span><br><span class="line">注：圣杯布局中间盒子宽度不能小于左盒子宽度，不然左盒子上不去</span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;father&quot;</span>&gt;</span><br><span class="line">    &#123;<span class="comment">/* center放在最前面 */</span>&#125;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;center&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.left,</span><br><span class="line">.right &#123;</span><br><span class="line">    <span class="attr">height</span>: 300px;</span><br><span class="line">    <span class="comment">//核心</span></span><br><span class="line">    position: relative;</span><br><span class="line">    float: left;</span><br><span class="line">    width: 200px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.father&#123;</span><br><span class="line">    <span class="comment">//核心</span></span><br><span class="line">    <span class="attr">overflow</span>: hidden;</span><br><span class="line">    padding: <span class="number">0</span> 200px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.left &#123;</span><br><span class="line">    background-color: bisque;</span><br><span class="line">    <span class="comment">//核心</span></span><br><span class="line">    left: -200px;</span><br><span class="line">    margin-left: -<span class="number">100</span>%;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.right &#123;</span><br><span class="line">    background-color: blueviolet;</span><br><span class="line">    <span class="comment">//核心</span></span><br><span class="line">    right: -200px;</span><br><span class="line">    margin-left: -200px;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.center &#123;</span><br><span class="line">    <span class="attr">height</span>: 300px;</span><br><span class="line">    background-color: aqua;</span><br><span class="line">    <span class="comment">//核心</span></span><br><span class="line">    float: left;</span><br><span class="line">    width: <span class="number">100</span>%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、双飞翼布局，同圣杯布局，利用浮动和负边距实现，不同的是左右盒子位置的保留不是通过父盒子的padding，而是中间盒子内部元素的margin，且此布局无需用到相对定位</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;father&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;incenter&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.left,</span><br><span class="line">.right &#123;</span><br><span class="line">    <span class="attr">float</span>: left;</span><br><span class="line">    height: 300px;</span><br><span class="line">    width: 200px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.father &#123;</span><br><span class="line">    <span class="attr">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.left &#123;</span><br><span class="line">    margin-left: -<span class="number">100</span>%;</span><br><span class="line">    background-color: bisque;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.right &#123;</span><br><span class="line">    margin-left: -200px;</span><br><span class="line">    background-color: blueviolet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.center &#123;</span><br><span class="line">    <span class="attr">float</span>: left;</span><br><span class="line">    width: <span class="number">100</span>%;</span><br><span class="line">    height: 300px;</span><br><span class="line">    background-color: aqua;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.incenter &#123;</span><br><span class="line">    <span class="attr">margin</span>: <span class="number">0</span> 200px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Less、scss、stylus-对比"><a href="#Less、scss、stylus-对比" class="headerlink" title="Less、scss、stylus 对比"></a>Less、scss、stylus 对比</h3><p>都有变量、混入、函数、嵌套、继承、颜色函数等的概念</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、关于声明变量</span><br><span class="line"></span><br><span class="line">Less使用@变量名：值  </span><br><span class="line">例如：</span><br><span class="line">    @maincolor : #<span class="number">092873</span>;</span><br><span class="line">    body &#123;</span><br><span class="line">        <span class="attr">color</span>: @maincolor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">Scss使用$变量名：值  </span><br><span class="line">例如：</span><br><span class="line">    <span class="attr">$maincolor</span> : #<span class="number">092873</span>;</span><br><span class="line">    body &#123;</span><br><span class="line">        <span class="attr">color</span>: $maincolor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">Stylus使用 变量名=值，$可加可不加  </span><br><span class="line">例如：</span><br><span class="line">    maincolor = #<span class="number">092873</span>;</span><br><span class="line">    body <span class="comment">//不加大括号，有点费眼</span></span><br><span class="line">        color mainColor</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、关于作用域</span><br><span class="line">Scss没有全局作用域的概念，在Sass样式中定义变量，调用变量是没有全局变量一个概念存在，因此在Sass中定义了相同变量名时，在调用之时千万要多加小心，不然会给你的样式带来错误。</span><br><span class="line"></span><br><span class="line">Less和Styuls中的作用域和其他程序语言中的作用域非常的相同，他首先会查找局部定义的变量，如果没有找到，会像冒泡一样，一级一级往下查找，直到根为止</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、关于混合——Mixins</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>）Scss的混合：</span><br><span class="line"></span><br><span class="line">Sass样式中声明Mixins时需要使用“@mixin”，然后后面紧跟Mixins的名，他也可以定义参数，同时可以给这个参数设置一个默认值，但参数名是使用“$”符号开始，而且和参数值之间需要使用冒号：分开。</span><br><span class="line"></span><br><span class="line">调用时使用“@include”，然后在其后紧跟你要调用的Mixins名</span><br><span class="line"><span class="comment">/*声明一个Mixin叫作“error”*/</span></span><br><span class="line">@mixin <span class="function"><span class="title">error</span>(<span class="params">$borderWidth:2px</span>)</span>&#123;	</span><br><span class="line">  <span class="attr">border</span>:$borderWidth solid #f00;</span><br><span class="line">  color: #f00;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*调用error Mixins*/</span></span><br><span class="line">.generic-error &#123;</span><br><span class="line">  @include error();<span class="comment">/*直接调用error mixins*/</span></span><br><span class="line">&#125;</span><br><span class="line">.login-error &#123;</span><br><span class="line">  @include error(5px);<span class="comment">/*调用error mixins，并将参数$borderWidth的值重定义为5px*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>）Less的混合：</span><br><span class="line"></span><br><span class="line">在Less中可以将Mixins看成是一个类选择器，当然Mixins也可以设置参数，并给参数设置默认值。不过设置参数的变量名是使用“@”开头，同样参数和默认参数值之间需要使用冒号：分隔开。</span><br><span class="line"></span><br><span class="line">调用时直接.mixinName()。</span><br><span class="line"></span><br><span class="line"><span class="comment">/*声明一个Mixin叫作“error”*/</span></span><br><span class="line">.error(@borderWidth:2px)&#123;</span><br><span class="line">  <span class="attr">border</span>:@borderWidth solid #f00;</span><br><span class="line">  color: #f00;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*调用error Mixins*/</span></span><br><span class="line">.generic-error &#123;</span><br><span class="line">  .error();<span class="comment">/*直接调用error mixins*/</span></span><br><span class="line">&#125;</span><br><span class="line">.login-error &#123;</span><br><span class="line">  .error(5px);<span class="comment">/*调用error mixins，并将参数@borderWidth的值重定义为5px*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>）Stylus的混合：</span><br><span class="line"></span><br><span class="line">可以不使用任何符号，就是直接声明Mixins名，然后在定义参数和默认值之间用等号=来连接。</span><br><span class="line"></span><br><span class="line"><span class="comment">/*声明一个Mixin叫作“error”*/</span></span><br><span class="line"><span class="function"><span class="title">error</span>(<span class="params">borderWidth=2px</span>)</span>&#123;</span><br><span class="line">  <span class="attr">border</span>:borderWidth solid #f00;</span><br><span class="line">  color: #f00;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*调用error Mixins*/</span></span><br><span class="line">.generic-error &#123;</span><br><span class="line">  error();<span class="comment">/*直接调用error mixins*/</span></span><br><span class="line">&#125;</span><br><span class="line">.login-error &#123;</span><br><span class="line">  error(5px);<span class="comment">/*调用error mixins，并将参数$borderWidth的值重定义为5px*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、关于嵌套</span><br><span class="line"></span><br><span class="line">嵌套指的是在一个选择器中嵌套另一个选择器来实现继承，从而减少代码量，并且增加了代码的可读性。</span><br><span class="line"></span><br><span class="line">使用CSS预处理器语言的嵌套特性，我们可以在父元素的大括号｛｝里写这些元素。同时可以使用“&amp;”符号来引用父选择器</span><br><span class="line"></span><br><span class="line">Scss、LESS和Stylus这三款CSS预处理器语言的嵌套选择器来说，他们都具有相同的语法：</span><br><span class="line"></span><br><span class="line">section &#123;</span><br><span class="line">  <span class="attr">margin</span>:10px;</span><br><span class="line">  nav &#123;</span><br><span class="line">    <span class="attr">height</span>:25px;</span><br><span class="line">    a &#123;</span><br><span class="line">      <span class="attr">color</span>:#0982c1;</span><br><span class="line">      &amp;:hover &#123;</span><br><span class="line">        text-decoration:underline;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、关于继承</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>）Sass和Stylus的继承</span><br><span class="line"></span><br><span class="line">Sass和Stylus的继承是把一个选择器的所有样式继承到另个选择器上。在继承另个选择器的样式时需要使用“@extend”开始，后面紧跟被继承的选择器：</span><br><span class="line"></span><br><span class="line">.block &#123;</span><br><span class="line">  <span class="attr">margin</span>: 10px 5px;</span><br><span class="line">  padding: 2px;</span><br><span class="line">&#125;</span><br><span class="line">p &#123;</span><br><span class="line">  @extend .block;<span class="comment">/*继承.block选择器下所有样式*/</span></span><br><span class="line">  border: 1px solid #eee;</span><br><span class="line">&#125;</span><br><span class="line">ul,ol &#123;</span><br><span class="line">  @extend .block; <span class="comment">/*继承.block选择器下所有样式*/</span></span><br><span class="line">  color: #<span class="number">333</span>;</span><br><span class="line">  text-transform: uppercase;</span><br><span class="line">&#125;	</span><br><span class="line"></span><br><span class="line">编译为CSS后代码如下：</span><br><span class="line"></span><br><span class="line">.block,p,ul,ol &#123;</span><br><span class="line">  <span class="attr">margin</span>: 10px 5px;</span><br><span class="line">  padding:2px;</span><br><span class="line">&#125;</span><br><span class="line">p &#123;</span><br><span class="line">  <span class="attr">border</span>: 1px solid #eee</span><br><span class="line">&#125;</span><br><span class="line">ul,ol &#123;</span><br><span class="line">  <span class="attr">color</span>:#<span class="number">333</span>;</span><br><span class="line">  text-transform:uppercase;</span><br><span class="line">&#125;	</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>）Less的继承</span><br><span class="line"></span><br><span class="line">LESS支持的继承和Scss与Stylus不一样，他不是在选择器上继承，而是将Mixins中的样式嵌套到每个选择器里面。</span><br><span class="line">这种方法的缺点就是在每个选择器中会有重复的样式产生。</span><br><span class="line"></span><br><span class="line">.block &#123;</span><br><span class="line">  <span class="attr">margin</span>: 10px 5px;</span><br><span class="line">  padding: 2px;</span><br><span class="line">&#125;</span><br><span class="line">p &#123;</span><br><span class="line">  .block;<span class="comment">/*继承.block选择器下所有样式*/</span></span><br><span class="line">  border: 1px solid #eee;</span><br><span class="line">&#125;</span><br><span class="line">ul,ol &#123;</span><br><span class="line">  .block; <span class="comment">/*继承.block选择器下所有样式*/</span></span><br><span class="line">  color: #<span class="number">333</span>;</span><br><span class="line">  text-transform: uppercase;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">编译为CSS后代码如下：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.block &#123;</span><br><span class="line">  <span class="attr">margin</span>: 10px 5px;</span><br><span class="line">  padding:2px;</span><br><span class="line">&#125;</span><br><span class="line">p &#123;</span><br><span class="line">  <span class="attr">margin</span>: 10px 5px;</span><br><span class="line">  padding:2px;</span><br><span class="line">  border: 1px solid #eee</span><br><span class="line">&#125;</span><br><span class="line">ul,ol &#123;</span><br><span class="line">  <span class="attr">margin</span>: 10px 5px;</span><br><span class="line">  padding:2px;</span><br><span class="line">  color:#<span class="number">333</span>;</span><br><span class="line">  text-transform:uppercase;</span><br><span class="line">&#125;	</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>、关于运算符</span><br><span class="line"></span><br><span class="line">Less可以对数值型的Value（如：数字、颜色、变量等）进行加减乘除四则运算。</span><br><span class="line"></span><br><span class="line">Scss在数字运算上要比LESS更专业，他可以直接换算单位了。Scss可以处理无法识别的度量单位，并将其输出。</span><br><span class="line"></span><br><span class="line">Stylus的运算是三款预处理器语言中最强大的一款，他拥有其他程序语言一样的运算功能，简单点的加减乘除，复杂的有关系运算、逻辑运算等。</span><br><span class="line"></span><br><span class="line">body &#123;</span><br><span class="line">  <span class="attr">margin</span>: (14px/<span class="number">2</span>);</span><br><span class="line">  top: 50px + 100px;</span><br><span class="line">  right: <span class="number">80</span> * <span class="number">10</span>%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">7</span>、关于颜色函数</span><br><span class="line"></span><br><span class="line">Scss、LESS和Stylus都具有强大的颜色函数功能，功能特性上都大同小异，只是在使用方法上略有不同。而且他们都具有相同的一个目的，就是方便操作样式中的颜色值</span><br><span class="line"></span><br><span class="line"><span class="number">8</span>、关于导入</span><br><span class="line"></span><br><span class="line">在CSS中，并不喜欢用@<span class="keyword">import</span>来导入样式，因为这样的做法会增加http的请求。但是在CSS预处理器中的导入(@<span class="keyword">import</span>)规则和CSS的有所不同，它只是在语义上导入不同的文件，但最终结果是生成一个CSS文件。</span><br><span class="line"></span><br><span class="line">但是，如果你是通过“@<span class="keyword">import</span> ‘file.css’”导入“file.css”样式文件，那效果跟普通CSS导入样式文件一样。</span><br><span class="line"></span><br><span class="line">注意：导入文件中定义了变量、混合等信息也将会被引入到主样式文件中，因此需要避免他们的相互冲突</span><br><span class="line"></span><br><span class="line"><span class="number">9</span>、关于判断语句 <span class="keyword">if</span> 和 循环语句 <span class="keyword">for</span></span><br><span class="line"></span><br><span class="line">Sass和Stylus具有类似于语言处理的能力，比如说条件语句、循环语句等，而LESS需要通过When等关键词模拟这些功能，在这一方面略逊一层</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">...补充中</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试题-other(补充中...)</title>
    <url>/2018/05/22/interview/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98other/</url>
    <content><![CDATA[<hr>
<span id="more"></span>
<h3 id="在地址栏里输入一个地址回车会发生那些事情"><a href="#在地址栏里输入一个地址回车会发生那些事情" class="headerlink" title="在地址栏里输入一个地址回车会发生那些事情"></a>在地址栏里输入一个地址回车会发生那些事情</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>)将域名进行DNS解析</span><br><span class="line">- 浏览器DNS缓存</span><br><span class="line">- 系统DNS缓存</span><br><span class="line">- 路由器DNS缓存</span><br><span class="line">- 网络运营商的DNS缓存</span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>)Tcp 三次握手</span><br><span class="line">- 客户端发送一个带有SYN（synchronize）标志的数据包给服务端</span><br><span class="line">- 服务端接收成功后，回传一个带有SYN/ACK标志的数据包传递确认信息，表示我收到了</span><br><span class="line">- 客户端再回传一个带有ACK标志的数据包，表示我知道了，握手结束</span><br><span class="line"></span><br><span class="line">(<span class="number">3</span>)发送响应</span><br><span class="line"></span><br><span class="line">(<span class="number">4</span>)接受响应</span><br><span class="line"></span><br><span class="line">(<span class="number">5</span>)浏览器解析渲染页面 （也就是浏览器的运行机制）</span><br><span class="line"></span><br><span class="line">(<span class="number">6</span>)Tcp 四次挥手</span><br><span class="line">- 客户端发送一个FIN，用来关闭客户端到服务端的数据传送，客户端进入FIN_WAIT_1状态</span><br><span class="line">- 服务端收到FIN后，发送一个ACK给客户端，确认序号为收到序号+<span class="number">1</span>（与SYN相同，一个FIN占用一个序号），服务端进入CLOSE_WAIT状态</span><br><span class="line">- 服务端发送一个FIN，用来关闭服务端到客户端的数据传送，服务端进入LAST_ACK状态</span><br><span class="line">- 客户端收到FIN后，客户端t进入TIME_WAIT状态，接着发送一个ACK给Server，确认序号为收到序号+<span class="number">1</span>，服务端进入CLOSED状态，完成四次挥手</span><br></pre></td></tr></table></figure>
<h3 id="浏览器缓存机制"><a href="#浏览器缓存机制" class="headerlink" title="浏览器缓存机制"></a>浏览器缓存机制</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">浏览器缓存策略分为两种：强缓存和协商缓存，并且缓存策略都是通过设置 HTTP Header 来实现的，强缓存优先于协商缓存进行</span><br><span class="line"></span><br><span class="line">若强制缓存(Expires和Cache-Control)生效则直接使用缓存，不再走协商缓存路线</span><br><span class="line"></span><br><span class="line">若时间已过期则进行协商缓存(Last-Modified / If-Modified-Since和Etag / If-None-Match)</span><br><span class="line"></span><br><span class="line">协商缓存由服务器决定是否使用缓存，若协商缓存失效，那么代表该请求的缓存失效了，返回<span class="number">200</span>，重新返回资源和缓存标识，再存入浏览器缓存中；</span><br><span class="line">生效则返回<span class="number">304</span>，继续使用缓存。</span><br><span class="line"></span><br><span class="line">实际场景应用缓存策略：</span><br><span class="line"></span><br><span class="line"><span class="comment">//不使用缓存资源</span></span><br><span class="line">meta 缓存头设置为禁止缓存</span><br><span class="line">    在 html 的 head 标签中加入下面内容，就可以禁止浏览器读取缓存</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;Cache-Control&quot;</span> content=<span class="string">&quot;no-cache, no-store, must-revalidate&quot;</span> /&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Pragma&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-cache&quot;</span> /&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Expires&quot;</span> <span class="attr">content</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span>   </span><br><span class="line"></span><br><span class="line">js、css 加上版本号</span><br><span class="line">    当请求 js、css 的时候，给他们最后加上版本号，浏览器发现版本高了，就自然而然不会读取低版本的缓存了 版本号并不需要改变文件名，只需要在调用 js、css 的时候在最末尾加上?v=<span class="number">1.0</span>即可</span><br><span class="line">    custom.css?v=<span class="number">1.0</span></span><br><span class="line">    main.js?v=<span class="number">2.0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//不使用缓存资源</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">频繁变动的资源：将Cache-Control字段设置为no-cache，表示每次请求都要验证资源的有效性</span><br><span class="line">不常变化的资源：Cache-Control: max-age=<span class="number">31536000</span>，将过期时间设置为<span class="number">1</span>年。其实实际上在发送请求的时候会在路径中添加hash来更改url，发起新的请求。</span><br><span class="line">输入url，回车：按照整个缓存机制进行，先走强缓存，再走协商缓存。</span><br><span class="line">浏览器点击刷新按钮或者按F5刷新：发送的请求头带有：Cache-Control:max-age=<span class="number">0</span>，表示不走强制缓存这条路，可以走协商缓存向服务器发起数据请求。</span><br><span class="line">ctrl+F5强制刷新：发送的请求头带有Cache-Control:no-cache ，表示不走缓存这条路。直接向服务器发送新的请求。</span><br><span class="line">浏览器的前进，后退，跳转是直接从缓存里取数据。</span><br><span class="line"></span><br><span class="line">浏览器缓存的好处：</span><br><span class="line">    避免了冗余的数据传输，节省流量；</span><br><span class="line">    加快了用户访问网页的速度；</span><br><span class="line">    减小了服务器的压力</span><br><span class="line"></span><br><span class="line"><span class="comment">//拓展</span></span><br><span class="line">缓存的位置：</span><br><span class="line">service worker:单独的一个线程，用来实现缓存功能；</span><br><span class="line"></span><br><span class="line">memory cache:内存中的缓存；容量小，存储时间短；</span><br><span class="line"></span><br><span class="line">disk cache:硬盘上的缓存，容量大，时效性长；（绝大部分的缓存都来自 Disk Cache，与HTTP的缓存策略有很大的关联）</span><br><span class="line"></span><br><span class="line">缓存过程的分析：</span><br><span class="line">浏览器每次发起请求，都会先在浏览器缓存中查找该请求的结果以及缓存标识。</span><br><span class="line"></span><br><span class="line">如果找不到则向服务器发送请求，拿到请求结果后又会根据资源响应头决定是否将该结果和缓存标识存入浏览器缓存中</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">强缓存</span><br><span class="line">强缓存：客户端再次请求资源时，不会向服务器发送请求，而是直接从缓存中读取资源</span><br><span class="line"></span><br><span class="line">两种实现方式：</span><br><span class="line">（<span class="number">1</span>）Expires方法（设置过期时间）</span><br><span class="line">（<span class="number">2</span>）Cache-Control方法（设置过期时间）</span><br><span class="line">两者同时存在的话，Cache-Control优先级高于Expires；</span><br><span class="line"></span><br><span class="line">协商缓存：</span><br><span class="line">协商缓存：客户端再次请求资源时时，会向服务器发送请求验证当前资源的有效性</span><br><span class="line"></span><br><span class="line">两种实现方法：</span><br><span class="line">（<span class="number">1</span>）Last-Modified（根据文件修改时间来决定是否从缓存取数据）</span><br><span class="line">（<span class="number">2</span>）Etag方法（根据文件内容是否修改来决定是否从缓存取数据）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="HTTP和HTTPS协议的区别"><a href="#HTTP和HTTPS协议的区别" class="headerlink" title="HTTP和HTTPS协议的区别"></a>HTTP和HTTPS协议的区别</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">HTTP  超文本传输协议，信息是明文传输的</span><br><span class="line">HTTPS 则是具有安全性的SSL加密传输协议，比http更安全</span><br><span class="line">HTTPS 协议需要CA证书,费用较高;而HTTP协议不需要</span><br><span class="line"></span><br><span class="line">HTTP  协议端口是<span class="number">80</span>, HTTPS  协议端口是<span class="number">443</span>;</span><br></pre></td></tr></table></figure>
<h3 id="WebSocket-的应用场景主要有哪些"><a href="#WebSocket-的应用场景主要有哪些" class="headerlink" title="WebSocket 的应用场景主要有哪些"></a>WebSocket 的应用场景主要有哪些</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">即时通信 数据监控 大文件下载</span><br></pre></td></tr></table></figure>

<h2 id="Webpack类"><a href="#Webpack类" class="headerlink" title="Webpack类"></a>Webpack类</h2><h3 id="谈谈你对Webpack的理解（Webpack是什么？）"><a href="#谈谈你对Webpack的理解（Webpack是什么？）" class="headerlink" title="谈谈你对Webpack的理解（Webpack是什么？）"></a>谈谈你对Webpack的理解（Webpack是什么？）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Webpack 是一个 模块打包器，可以分析各个模块的依赖关系，最终打包成bundle静态文件（js、css、jpg）</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Webpack的打包过程-打包原理-构建流程？"><a href="#Webpack的打包过程-打包原理-构建流程？" class="headerlink" title="Webpack的打包过程/打包原理/构建流程？"></a>Webpack的打包过程/打包原理/构建流程？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">初始化：启动构建，读取与合并配置参数，加载plugin,实例化Compiler</span><br><span class="line">编译：从Entry出发，针对每个Module串行调用对应的Loader去翻译文件中的内容，再找到该Module依赖的Module，递归的进行编译处理</span><br><span class="line">输出：将编译后的Module组合成Chunk,将Chunk转换成文件，输出到文件系统中</span><br></pre></td></tr></table></figure>

<h3 id="loader的作用"><a href="#loader的作用" class="headerlink" title="loader的作用"></a>loader的作用</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">webpack中的loader是一个函数，主要为了实现源码的转换，所以loader函数会以源码作为参数，比如，将ES6转换为ES5，将less转换为css，然后再将css转换为js，以便能嵌入到html文件中</span><br></pre></td></tr></table></figure>
<h3 id="有哪些常见的Loader？他们是解决什么问题的？"><a href="#有哪些常见的Loader？他们是解决什么问题的？" class="headerlink" title="有哪些常见的Loader？他们是解决什么问题的？"></a>有哪些常见的Loader？他们是解决什么问题的？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">file-loader：把文件输出到一个文件夹中，在代码中通过相对 URL 去引用输出的文件</span><br><span class="line">url-loader：和 file-loader 类似，但是能在文件很小的情况下以 base64 的方式把文件内容注入到代码中去</span><br><span class="line">source-map-loader：加载额外的 Source <span class="built_in">Map</span> 文件，以方便断点调试</span><br><span class="line">image-loader：加载并且压缩图片文件</span><br><span class="line">babel-loader：把 ES6 转换成 ES5</span><br><span class="line">css-loader：加载 CSS，支持模块化、压缩、文件导入等特性</span><br><span class="line">style-loader：把 CSS 代码注入到 JavaScript 中，通过 DOM 操作去加载 CSS。</span><br><span class="line">eslint-loader：通过 ESLint 检查 JavaScript 代码</span><br></pre></td></tr></table></figure>
<h3 id="plugin的作用"><a href="#plugin的作用" class="headerlink" title="plugin的作用"></a>plugin的作用</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">plugin是一个类，类中有一个apply()方法，主要用于Plugin的安装，可以在其中监听一些来自编译器发出的事件，在合适的时机做一些事情。</span><br></pre></td></tr></table></figure>

<h3 id="有哪些常见的Plugin？他们是解决什么问题的？"><a href="#有哪些常见的Plugin？他们是解决什么问题的？" class="headerlink" title="有哪些常见的Plugin？他们是解决什么问题的？"></a>有哪些常见的Plugin？他们是解决什么问题的？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">html-webpack-plugin：可以复制一个有结构的html文件，并自动引入打包输出的所有资源（JS/CSS）</span><br><span class="line">clean-webpack-plugin：重新打包自动清空 dist 目录</span><br><span class="line">mini-css-extract-plugin：提取 js 中的 css 成单独文件</span><br><span class="line">optimize-css-assets-webpack-plugin：压缩css</span><br><span class="line">uglifyjs-webpack-plugin：压缩js</span><br><span class="line">commons-chunk-plugin：提取公共代码</span><br><span class="line">define-plugin：定义环境变量</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Webpack中Loader和Plugin的区别"><a href="#Webpack中Loader和Plugin的区别" class="headerlink" title="Webpack中Loader和Plugin的区别"></a>Webpack中Loader和Plugin的区别</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、在 webpack 的 watch 模式下，文件系统中某一个文件发生修改，webpack 监听到文件变化，根据配置文件对模块重新编译打包，并将打包后的代码通过简单的 JavaScript 对象保存在内存中。</span><br><span class="line"><span class="number">2</span>、webpack-dev-server 和 webpack 之间的接口交互，而在这一步，主要是 dev-server 的中间件webpack-dev-middleware 和 webpack 之间的交互，webpack-dev-middleware 调用 webpack 暴露的 API对代码变化进行监控，并且告诉 webpack，将代码打包到内存中。</span><br><span class="line"><span class="number">3</span>、webpack-dev-server 对文件变化的一个监控，这一步不同于第一步，并不是监控代码变化重新打包。当我们在配置文件中配置了devServer.watchContentBase 为 <span class="literal">true</span> 的时候，Server 会监听这些配置文件夹中静态文件的变化，变化后会通知浏览器端对应用进行 live reload。注意，这儿是浏览器刷新，和 HMR 是两个概念</span><br><span class="line"><span class="number">4</span>、webpack-dev-server 代码的工作，该步骤主要是通过 sockjs（webpack-dev-server 的依赖）在浏览器端和服务端之间建立一个 websocket 长连接，将 webpack 编译打包的各个阶段的状态信息告知浏览器端，</span><br><span class="line">同时也包括第三步中 Server 监听静态文件变化的信息。浏览器端根据这些 socket 消息进行不同的操作。当然服务端传递的最主要信息还是新模块的 hash 值，后面的步骤根据这一 hash 值来进行模块热替换。</span><br><span class="line">webpack-dev-server/client 端并不能够请求更新的代码，也不会执行热更模块操作，而把这些工作又交回给了 webpack，webpack/hot/dev-server 的工作就是根据 webpack-dev-server/client 传给它的信息以及 dev-server 的配置决定是刷新浏览器呢还是进行模块热更新。当然如果仅仅是刷新浏览器，也就没有后面那些步骤了。HotModuleReplacement.runtime 是客户端 HMR 的中枢，它接收到上一步传递给他的新模块的 hash 值，它通过 JsonpMainTemplate.runtime 向 server 端发送 Ajax 请求，服务端返回一个 json，该 json 包含了所有要更新的模块的 hash 值，获取到更新列表后，该模块再次通过 jsonp 请求，获取到最新的模块代码。</span><br><span class="line"><span class="number">5</span>、决定 HMR 成功与否的关键步骤，在该步骤中，HotModulePlugin 将会对新旧模块进行对比，决定是否更新模块，在决定更新模块后，检查模块之间的依赖关系，更新模块的同时更新模块间的依赖引用。最后一步，当 HMR 失败后，回退到 live reload 操作，也就是进行浏览器刷新来获取最新打包代码。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="如何解决循环依赖问题"><a href="#如何解决循环依赖问题" class="headerlink" title="如何解决循环依赖问题"></a>如何解决循环依赖问题</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Webpack 中将 <span class="built_in">require</span> 替换为 webpack_require，会根据 moduleId 到 installedModules 找是否加载过，加载过则直接返回之前的 <span class="keyword">export</span>，不会重复加载</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="如何提高Webpack构建速度"><a href="#如何提高Webpack构建速度" class="headerlink" title="如何提高Webpack构建速度"></a>如何提高Webpack构建速度</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">组件懒加载、路由懒加载、开启gzip、公共的第三方包上cdn、配置include/exclude缩小Loader对文件的搜索范围、配置cache缓存Loader对文件的编译副本、配置resolve提高文件的搜索速度（@: src）</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Git代码冲突怎么处理"><a href="#Git代码冲突怎么处理" class="headerlink" title="Git代码冲突怎么处理"></a>Git代码冲突怎么处理</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">一、暂存到暂存区，更新后，从暂存区取出合并解决冲突</span><br><span class="line"></span><br><span class="line">    <span class="number">1</span>、git pull 出现冲突后可以暂存本地修改git stash</span><br><span class="line"></span><br><span class="line">    <span class="number">2</span>、然后git pull 更新代码</span><br><span class="line"></span><br><span class="line">    <span class="number">3</span>、git stash list 可查看暂存记录列表</span><br><span class="line"></span><br><span class="line">    <span class="number">4</span>、释放本地暂存 git stash apply stash@&#123;<span class="number">0</span>&#125; 就是刚才保存的标记</span><br><span class="line"></span><br><span class="line">    <span class="number">5</span>、出现冲突文件，找到并解决</span><br><span class="line"></span><br><span class="line">    <span class="number">6</span>、然后可以提交git add . 加入索引库</span><br><span class="line"></span><br><span class="line">    <span class="number">7</span>、然后本地提交git commit -m <span class="string">&#x27;注释&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="number">8</span>、最后git push到远程</span><br><span class="line">二、更新发现冲突，提交本地，再更新，找到冲突地方解决后，再次提交推送远程</span><br><span class="line"></span><br><span class="line">    <span class="number">1</span>、git pull更新代码，发现error: Your local changes to the following files would be overwritten by merge:pom.xmlPlease commit your changes or stash them before you merge.这说明你的pom.xml与远程有冲突，你需要先提交本地的修改然后更新。</span><br><span class="line"></span><br><span class="line">    <span class="number">2</span>、git add pom.xml</span><br><span class="line"></span><br><span class="line">       git commit -m <span class="string">&#x27;冲突解决&#x27;</span></span><br><span class="line"></span><br><span class="line">       提交本地的pom.xml文件，不进行推送远程</span><br><span class="line"></span><br><span class="line">    <span class="number">3</span>、git pull</span><br><span class="line"></span><br><span class="line">        更新代码Auto-merging pom.xmlCONFLICT (content): Merge conflict <span class="keyword">in</span> pom.xmlAutomatic merge failed; fix conflicts and then commit the result.更新后你的本地分支上会出现 (develop|MERGING)类似这种标志。</span><br><span class="line"></span><br><span class="line">    <span class="number">4</span>、找到你本地的test.txt文件，并打开你会在文件中发现&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD ，======= ，&gt;&gt;&gt;&gt;&gt;&gt;&gt; ae24sgwmfp2m2ojr2jaagwhhfawe2类似这样的标记。</span><br><span class="line">    &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD和=======中间的是你自己的代码， ======= 和&gt;&gt;&gt;&gt;&gt;&gt;&gt;中间的是其他人修改的代码自己确定保留那一部分代码，最后删除&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD ，======= ，&gt;&gt;&gt;&gt;&gt;&gt;&gt;这种标志。</span><br><span class="line">    <span class="number">5</span>、git add test.txt &amp;&amp; git commit -m <span class="string">&#x27;冲突解决结束&#x27;</span>  再次将本地的test.txt文件提交。</span><br><span class="line"></span><br><span class="line">    <span class="number">6</span>、git push将解决冲突后的文件推送到远程。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="echarts"><a href="#echarts" class="headerlink" title="echarts"></a>echarts</h2><h3 id="echarts问题"><a href="#echarts问题" class="headerlink" title="echarts问题"></a>echarts问题</h3><p>VUE引用和使用echarts4/echarts5的差别</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、echarts引用区别</span><br><span class="line"><span class="attr">v4</span>:</span><br><span class="line">    <span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">&#x27;echarts&#x27;</span></span><br><span class="line">    Vue.prototype.$echarts = echarts</span><br><span class="line"><span class="attr">v5</span>:</span><br><span class="line">    <span class="keyword">import</span> * <span class="keyword">as</span> echarts <span class="keyword">from</span> <span class="string">&#x27;echarts&#x27;</span></span><br><span class="line">    Vue.prototype.$echarts = echarts</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><h3 id="WebSocket即时通讯"><a href="#WebSocket即时通讯" class="headerlink" title="WebSocket即时通讯"></a>WebSocket即时通讯</h3><p>要实现客户端与服务器端的通信，最常接触的是http（https）协议，http通信只能是客户端发起请求，服务器响应。服务器不能主动向客户端传递消息。<br>HTTP 协议无法做到服务器主动向客户端推送信息，2008年诞生的WebSocket 协议可以实现客户端与服务器端的双向对话，即：服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">WebSocket 协议的底层协议也是TCP协议</span><br><span class="line"></span><br><span class="line">WebSocket 协议的标识符为ws,加密后为wss</span><br><span class="line"></span><br><span class="line">WebSocket 协议没有同源限制，即WebSocket 协议可以跨域通信</span><br><span class="line"></span><br><span class="line">WebSocket 协议是有状态的，是前后端交互的长连接，即建立连接后可以保持连接状态，通信时可以省略部分状态信息</span><br><span class="line"></span><br><span class="line">WebSocket 协议可以发送文本，也可以发送二进制数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">建立WebSocket 连接，我们要知道 WebSocket 在前端工程 支持 <span class="number">4</span>种属性</span><br><span class="line"></span><br><span class="line">OnOpen 【建立连接】</span><br><span class="line">OnClose 【关闭连接】</span><br><span class="line">OnError 【错误信息】</span><br><span class="line">OnMessage 【接收处理】</span><br><span class="line"></span><br><span class="line">后端的WebSocket 支持五种：</span><br><span class="line"></span><br><span class="line">OnOpen 【建立连接】</span><br><span class="line">OnClose 【关闭连接】</span><br><span class="line">OnError 【错误信息】</span><br><span class="line">OnMessage 【连接处理】</span><br><span class="line">connection 【信息处理函数】</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">客户端实现</span><br><span class="line">    客户端可以通过WebSocket 构造函数创建WebSocket 对象创建和管理 WebSocket 连接，并通过该连接发送和接收数据的 API</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123; </span><br><span class="line">    <span class="comment">// 页面创建 生命周期函数              </span></span><br><span class="line">    <span class="built_in">this</span>.initWebSocket()        </span><br><span class="line">&#125;,        </span><br><span class="line"><span class="attr">destroyed</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">	<span class="comment">// 页面销毁生命周期函数              </span></span><br><span class="line">	<span class="built_in">this</span>.websocketclose();        </span><br><span class="line">&#125;, </span><br><span class="line"><span class="attr">methods</span>: &#123;            </span><br><span class="line">	<span class="attr">initWebSocket</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;                </span><br><span class="line">		<span class="comment">// WebSocket与普通的请求所用协议有所不同，ws等同于http，wss等同于https                </span></span><br><span class="line">		<span class="built_in">this</span>.websock = <span class="keyword">new</span> WebSocket(<span class="string">&quot;ws://127.0.0.1:9007/websocket&quot;</span>);                </span><br><span class="line">		<span class="built_in">this</span>.websock.onopen = <span class="built_in">this</span>.websocketonopen;                </span><br><span class="line">		<span class="built_in">this</span>.websock.onerror = <span class="built_in">this</span>.websocketonerror;                </span><br><span class="line">		<span class="built_in">this</span>.websock.onmessage = <span class="built_in">this</span>.websocketonmessage;                </span><br><span class="line">		<span class="built_in">this</span>.websock.onclose = <span class="built_in">this</span>.websocketclose;              </span><br><span class="line">	&#125;,              </span><br><span class="line">	<span class="attr">websocketonopen</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;                </span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&quot;WebSocket连接成功...&quot;</span>);              </span><br><span class="line">	&#125;,              </span><br><span class="line">	<span class="attr">websocketonerror</span>: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;                </span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&quot;WebSocket连接发生错误...&quot;</span>);</span><br><span class="line">		<span class="built_in">console</span>.log(e)              </span><br><span class="line">	&#125;,              </span><br><span class="line">	<span class="attr">websocketonmessage</span>: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;                </span><br><span class="line">		<span class="built_in">console</span>.log(e.data);</span><br><span class="line">		<span class="keyword">var</span> alarm = <span class="built_in">JSON</span>.parse(e.data)</span><br><span class="line">		<span class="built_in">console</span>.log(alarm.alarmName)</span><br><span class="line">		<span class="keyword">if</span> (e.data !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">			<span class="built_in">this</span>.onlineUser = e.data</span><br><span class="line">		&#125;         </span><br><span class="line">	&#125;,              </span><br><span class="line">	<span class="attr">websocketclose</span>: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;                </span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&quot;connection closed (&quot;</span> + e.code + <span class="string">&quot;)&quot;</span>);              </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="前端支付功能实现（如何唤起支付页面）"><a href="#前端支付功能实现（如何唤起支付页面）" class="headerlink" title="前端支付功能实现（如何唤起支付页面）"></a>前端支付功能实现（如何唤起支付页面）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">判断用户所属环境，根据环境不同，执行不同的支付程序</span><br><span class="line"><span class="keyword">if</span> (<span class="regexp">/MicroMessenger/</span>.test(<span class="built_in">window</span>.navigator.userAgent)) &#123;</span><br><span class="line">    <span class="comment">// alert(&#x27;微信&#x27;);</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/AlipayClient/</span>.test(<span class="built_in">window</span>.navigator.userAgent)) &#123;</span><br><span class="line">    <span class="comment">//alert(&#x27;支付宝&#x27;);</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//alert(&#x27;其他浏览器&#x27;);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、在H5中唤起微信支付和支付宝支付</span><br><span class="line"><span class="comment">//微信支付</span></span><br><span class="line">H5页面调起微信支付有两种办法，</span><br><span class="line">一是利用内置接口(WeixinJSBridge)，二是通过引用微信的js sdk(使用wx.chooseWXpay()调起支付页面),从写法上来看用内置对象方法比较简单</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>)内置接口(WeixinJSBridge),在从后台拿到签名、时间戳这些数据后，直接调用微信浏览器提供的内置接口WeixinJSBridge即可完成支付功能。</span><br><span class="line"><span class="function"><span class="title">getRequestPayment</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">onBridgeReady</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        WeixinJSBridge.invoke(</span><br><span class="line">            <span class="string">&quot;getBrandWCPayRequest&quot;</span>, &#123;</span><br><span class="line">                <span class="string">&quot;appId&quot;</span>: data.appId, <span class="comment">//公众号ID，由商户传入     </span></span><br><span class="line">                <span class="string">&quot;timeStamp&quot;</span>: data.timeStamp, <span class="comment">//时间戳，自1970年以来的秒数     </span></span><br><span class="line">                <span class="string">&quot;nonceStr&quot;</span>: data.nonceStr, <span class="comment">//随机串     </span></span><br><span class="line">                <span class="string">&quot;package&quot;</span>: data.package,</span><br><span class="line">                <span class="string">&quot;signType&quot;</span>: data.signType, <span class="comment">//微信签名方式：     </span></span><br><span class="line">                <span class="string">&quot;paySign&quot;</span>: data.paySign <span class="comment">//微信签名 </span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">                alert(<span class="built_in">JSON</span>.stringify(res));</span><br><span class="line">                <span class="comment">// get_brand_wcpay_request</span></span><br><span class="line">                <span class="keyword">if</span> (res.err_msg == <span class="string">&quot;get_brand_wcpay_request:ok&quot;</span>) &#123;</span><br><span class="line">                    <span class="comment">// 使用以上方式判断前端返回,微信团队郑重提示：</span></span><br><span class="line">                    <span class="comment">//res.err_msg将在用户支付成功后返回ok，但并不保证它绝对可靠。</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> WeixinJSBridge == <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">document</span>.addEventListener) &#123;</span><br><span class="line">            <span class="built_in">document</span>.addEventListener(</span><br><span class="line">                <span class="string">&quot;WeixinJSBridgeReady&quot;</span>,</span><br><span class="line">                onBridgeReady,</span><br><span class="line">                <span class="literal">false</span></span><br><span class="line">            );</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.attachEvent) &#123;</span><br><span class="line">            <span class="built_in">document</span>.attachEvent(<span class="string">&quot;WeixinJSBridgeReady&quot;</span>, onBridgeReady);</span><br><span class="line">            <span class="built_in">document</span>.attachEvent(<span class="string">&quot;onWeixinJSBridgeReady&quot;</span>, onBridgeReady);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        onBridgeReady();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// wxPay(userId,Id,grade_id)&#123;//发起请求，参数：价格、id、商品id、等自己写的方法，点击微信支付按钮调用&lt;br&gt;</span></span><br><span class="line"><span class="comment">//  $.ajax(&#123;</span></span><br><span class="line"><span class="comment">//    type: &quot;post&quot;,</span></span><br><span class="line"><span class="comment">//    url: URLS.WXPAY_URL,//后端给的接口</span></span><br><span class="line"><span class="comment">//    data: &#123;id: Id,user_id:userId,grade_id:grade_id&#125;,//传递后端需要的参数id什么的</span></span><br><span class="line"><span class="comment">//    success: function (res) &#123;</span></span><br><span class="line"><span class="comment">//            var resData = JSON.parse(res);//先转换一下格式&lt;br&gt;                               </span></span><br><span class="line"><span class="comment">//            window.location.href = resData.data //直接跳转到接口返回来的支付链接</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//  &#125;)</span></span><br><span class="line"><span class="comment">// &#125;,</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//支付宝支付</span></span><br><span class="line">支付宝支付相对于微信来说，前端这块工作更简单 ，后台会返回给前端一个form表单，我们要做的就是把这个表单进行提交(唤起支付宝)即可</span><br><span class="line"><span class="function"><span class="title">AliPay</span>(<span class="params">userId,Id,grade_id</span>)</span>&#123;<span class="comment">//自己写的点击事件，点击支付宝支付按钮调用</span></span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">        <span class="attr">url</span>: URLS.ALIPAY_URL,<span class="comment">//后端给的支付宝支付请求接口</span></span><br><span class="line">        <span class="attr">data</span>: &#123;<span class="attr">id</span>: Id,<span class="attr">user_id</span>:userId,<span class="attr">grade_id</span>:grade_id&#125;,<span class="comment">//需要的参数</span></span><br><span class="line">        <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> resData = <span class="built_in">JSON</span>.parse(res);<span class="comment">//转换一下格式 </span></span><br><span class="line">            <span class="keyword">const</span> div = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)<span class="comment">//后端返回的数据类似一个form表单，创建一个div后执行表单的submit就OK了</span></span><br><span class="line">            div.id = <span class="string">&#x27;alipay&#x27;</span></span><br><span class="line">            div.innerHTML = resData.data</span><br><span class="line">            <span class="built_in">document</span>.body.appendChild(div)</span><br><span class="line">            <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#alipay&#x27;</span>).children[<span class="number">0</span>].submit() <span class="comment">// 执行后会唤起支付宝</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// this.$api.alipayPay(data).then((res) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     // console.log(&#x27;支付宝参数&#x27;, res.data)</span></span><br><span class="line"><span class="comment">//     if (res.code == 200) &#123;</span></span><br><span class="line"><span class="comment">//         var resData =res.data</span></span><br><span class="line"><span class="comment">//         const div = document.createElement(&#x27;div&#x27;)</span></span><br><span class="line"><span class="comment">//         div.id = &#x27;alipay&#x27;</span></span><br><span class="line"><span class="comment">//         div.innerHTML = resData</span></span><br><span class="line"><span class="comment">//         document.body.appendChild(div)</span></span><br><span class="line"><span class="comment">//         document.querySelector(&#x27;#alipay&#x27;).children[0].submit() // 执行后会唤起支付宝</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#125;).catch((err) =&gt; &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、uniapp支付之微信支付和支付宝支付</span><br><span class="line">uni.requestPayment</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="支付如何用户重复点击"><a href="#支付如何用户重复点击" class="headerlink" title="支付如何用户重复点击"></a>支付如何用户重复点击</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、防抖</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、变量控制</span><br><span class="line">在按钮点击事件处理函数中，可以使用变量来控制按钮是否可以被点击。当按钮被点击后，设置变量为 <span class="literal">true</span>，在事件处理函数执行完毕后再将其设置为 <span class="literal">false</span>。这样可以防止用户重复点击按钮</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> buttonClicked = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (buttonClicked) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  buttonClicked = <span class="literal">true</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 执行其他代码...</span></span><br><span class="line">  </span><br><span class="line">  buttonClicked = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、禁用按钮</span><br><span class="line">在按钮点击事件处理函数中，可以将按钮设置为禁用状态，防止用户重复点</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> button = event.target;</span><br><span class="line">  button.disabled = <span class="literal">true</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 执行其他代码...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、使用定时器</span><br><span class="line">在按钮点击事件处理函数中，可以使用定时器延迟一段时间后再次启用按钮。这样可以确保用户不会在按钮被禁用期间重复点击</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> button = event.target;</span><br><span class="line">  button.disabled = <span class="literal">true</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 在 2 秒后启用按钮</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    button.disabled = <span class="literal">false</span>;</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 执行其他代码...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="后端返回大量数据到前端，前端如何展示-像地图热点图"><a href="#后端返回大量数据到前端，前端如何展示-像地图热点图" class="headerlink" title="后端返回大量数据到前端，前端如何展示(像地图热点图)"></a>后端返回大量数据到前端，前端如何展示(像地图热点图)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">普通</span><br><span class="line"><span class="number">1</span>、防抖节流</span><br><span class="line">该防抖函数可以实现 <span class="built_in">this</span>指向，参数，立即执行，取消功能，返回值</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, delay, immediate = <span class="literal">false</span>,resultCall</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> isInvoke = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="literal">null</span>;<span class="comment">//返回给元素的真正函数</span></span><br><span class="line">    <span class="keyword">const</span> _debounce = <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;<span class="comment">//取消上一次的操作</span></span><br><span class="line">        <span class="keyword">if</span> (timer) <span class="built_in">clearTimeout</span>(timer);<span class="comment">//如果是第一次执行或者已经执行完的，采取立即执行</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (immediate &amp;&amp; !isInvoke) &#123;</span><br><span class="line">            result =fn.apply(<span class="built_in">this</span>, args);</span><br><span class="line">            <span class="keyword">if</span>(resultCall)&#123;</span><br><span class="line">                resultCall(result)</span><br><span class="line">            &#125;</span><br><span class="line">            isInvoke = <span class="literal">true</span>;&#125;<span class="comment">//开启防抖</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;<span class="comment">//执行真正的函数</span></span><br><span class="line">                result =fn.apply(<span class="built_in">this</span>, args);</span><br><span class="line">                <span class="keyword">if</span>(resultCall)&#123;</span><br><span class="line">                    resultCall(result)</span><br><span class="line">                &#125;</span><br><span class="line">                isInvoke = <span class="literal">false</span>;</span><br><span class="line">            &#125;, delay);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//取消事件</span></span><br><span class="line">    _debounce.cancel = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (timer) <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> _debounce;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">该节流函数可以实现 <span class="built_in">this</span>指向，参数，立即执行，取消功能，返回值</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, interval, options = &#123; leading: <span class="literal">true</span>, trailing: <span class="literal">false</span> &#125;</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1.记录上一次的开始时间</span></span><br><span class="line">    <span class="comment">//leading记录要不要第一次触发,即要不要同步执行</span></span><br><span class="line">    <span class="comment">//trailing记录要不要进行定时器触发</span></span><br><span class="line">    <span class="keyword">const</span> &#123; leading, trailing &#125; = optionslet </span><br><span class="line">    lastTime = 0<span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">    <span class="comment">// 2.事件触发时, 真正执行的函数</span></span><br><span class="line">    <span class="keyword">const</span> _throttle = <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 2.1.获取当前事件触发时的时间</span></span><br><span class="line">        <span class="keyword">const</span> nowTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()<span class="comment">//要不要同步执行</span></span><br><span class="line">        <span class="keyword">if</span> (!lastTime &amp;&amp; !leading) lastTime = nowTime</span><br><span class="line">        <span class="comment">// 2.2.使用当前触发的时间和之前的时间间隔以及上一次开始的时间, 计算出还剩余多长事件需要去触发函数</span></span><br><span class="line">        <span class="keyword">const</span> remainTime = interval - (nowTime - lastTime)</span><br><span class="line">        <span class="keyword">if</span> (remainTime &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">                <span class="built_in">clearTimeout</span>(timer)timer = <span class="literal">null</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2.3.真正触发函数</span></span><br><span class="line">            fn.apply(<span class="built_in">this</span>, args)</span><br><span class="line">            <span class="comment">// 2.4.保留上次触发的时间</span></span><br><span class="line">            lastTime = nowTimereturn</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (trailing &amp;&amp; !timer) &#123;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                timer = nulllastTime = !leading ? <span class="number">0</span>: <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</span><br><span class="line">                fn.apply(<span class="built_in">this</span>, args)&#125;</span><br><span class="line">            , remainTime)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    _throttle.cancel = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(timer) <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        timer = nulllastTime = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _throttle</span><br><span class="line">&#125; </span><br><span class="line"><span class="number">2</span>、分页处理</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、懒加载</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、定时处理</span><br><span class="line">当我们接受到成千上万的数据要进行渲染时，可能较多的人会使用setTineout来作为定时器，通过分块的方式定时渲染。 但使用 _requestAnimationFrame_的效果是会比 <span class="built_in">setTimeout</span> 的性能更好，因为使用前者的时候浏览器会帮我们进行处理优化，在最优的时候进行调用，而不是像后者设置一个时间。</span><br><span class="line"></span><br><span class="line">另外，让我们往一个dom节点插入数据的时候，我们<span class="number">99</span>%都会使用<span class="built_in">document</span>.createELement,但是如果在该场景下，你插入一条数据都会造成DOM树的重新渲染，当插入的元素多时会造成没必要的开销。但是我们可以使用<span class="built_in">document</span>.Fragment来使用，它就像vue里面的template后者react的&lt;&gt;&lt;/&gt;，不是一个真实的元素标签。</span><br><span class="line"></span><br><span class="line">与_createElement_相比，它最大的好处就是不会触发DOM树的重新渲染，且不会对性能造成影响。因为所有的节点会被_一次性_插入到文档中，所以仅会发生一个重渲染的操作，而不是每个节点分别被插入到文档中从而发生多次重渲染的操作</span><br><span class="line"></span><br><span class="line">&lt;ul id=<span class="string">&quot;list&quot;</span>&gt;&lt;/ul&gt;</span><br><span class="line">      </span><br><span class="line"><span class="keyword">const</span> total = <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">const</span> num = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">const</span> times = <span class="built_in">Math</span>.ceil(total / num);</span><br><span class="line"><span class="keyword">let</span> currentNums = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#list&quot;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> frag = <span class="keyword">new</span> DocumentFragment();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> li = <span class="built_in">document</span>.createElement(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">        li.innerHTML = <span class="built_in">Math</span>.floor(i + currentNums * num);</span><br><span class="line">        frag.appendChild(li);</span><br><span class="line">    &#125;</span><br><span class="line">    currentNums++;</span><br><span class="line">    ul.appendChild(frag);</span><br><span class="line">    <span class="keyword">if</span> (currentNums &lt; times) &#123;</span><br><span class="line">        <span class="built_in">window</span>.requestAnimationFrame(add);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.requestAnimationFrame(add); </span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、想全部展示，还不分页(例如热力图之类的)</span><br><span class="line">MapVGL，是一款基于WebGL的地理信息可视化库，可以用来展示大量基于3D的地理信息点线面数据</span><br></pre></td></tr></table></figure>
<h3 id="ios开发H5页面怎么结合的-交互方法"><a href="#ios开发H5页面怎么结合的-交互方法" class="headerlink" title="ios开发H5页面怎么结合的 交互方法"></a>ios开发H5页面怎么结合的 <a href="https://www.jianshu.com/p/fec29596b8e7">交互方法</a></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">APP 可以通过 WebView 组件来嵌入 H5 页面。WebView 是一种原生组件，可以在 APP 中加载网页，并支持与网页的交互。</span><br><span class="line"></span><br><span class="line">在 Android 中，可以使用 Android 的 WebView 组件，</span><br><span class="line"></span><br><span class="line">在 iOS 中，可以使用 iOS 的 UIWebView 或者 WKWebView 组件。</span><br><span class="line"></span><br><span class="line">将 H5 页面嵌入 APP 中的一般流程如下：</span><br><span class="line"></span><br><span class="line">在 APP 中创建 WebView 组件，并将其放置在需要显示 H5 页面的位置。使用 WebView 的 loadUrl() 方法加载 H5 页面的 URL 地址。也可以使用 loadData() 方法加载页面的 HTML 内容。在 H5 页面中添加相应的 JavaScript 代码，通过 WebView 提供的接口来与 APP 进行交互。在 APP 中注册 JavaScript 接口，以便 H5 页面中的 JavaScript 代码可以调用。</span><br><span class="line"></span><br><span class="line">在 Android 中，可以使用 addJavascriptInterface() 方法注册接口；</span><br><span class="line"></span><br><span class="line">在 iOS 中，可以使用 WKWebView 的 WKScriptMessageHandler 接口。</span><br><span class="line"></span><br><span class="line">在 H5 页面中通过 JavaScript 接口调用 APP 提供的方法，实现与 APP 的交互</span><br></pre></td></tr></table></figure>
<h3 id="elementui的表格嵌套表单内及校验-复杂表格校验"><a href="#elementui的表格嵌套表单内及校验-复杂表格校验" class="headerlink" title="elementui的表格嵌套表单内及校验(复杂表格校验)"></a>elementui的表格嵌套表单内及校验(复杂表格校验)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">因为el-form是最外层的，所以formData是个对象，对象里放el-table用到的数组和rules</span><br><span class="line">这样定义是为了校验时用到rules</span><br><span class="line"></span><br><span class="line">el-form绑定: rules使用formData.rules整个对象，同时定义一个ref</span><br><span class="line">&lt;el-form :model=<span class="string">&quot;formData&quot;</span> :rules=<span class="string">&quot;formData.rules&quot;</span> ref=<span class="string">&quot;formRef&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">保证prop必须唯一</span><br><span class="line">自定义prop：使用 列表数据属性名+列的下标scope.$index+列的数据属性名</span><br><span class="line">注意：如果不是使用列表数据属性名tableData，会出现报错</span><br><span class="line"><span class="attr">Error</span>: please transfer a valid prop path to form item</span><br><span class="line">&lt;el-form-item :prop=<span class="string">&quot;&#x27;tableData.&#x27;+scope.$index+&#x27;.price&#x27;&quot;</span> :rules=<span class="string">&quot;formData.rules.price&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">保证每一个el-form-item都要配置rules属性</span><br><span class="line">rules使用formData.rules对应的属性的规则</span><br><span class="line"></span><br><span class="line">代码如下(参考：https:<span class="comment">//blog.csdn.net/m0_66722601/article/details/128254991)</span></span><br><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">&quot;formData&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;formData.rules&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;formRef&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;formData.tableData&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">el-table-column</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">label</span>=<span class="string">&quot;价格&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">:prop</span>=<span class="string">&quot;&#x27;tableData.&#x27;+scope.$index+&#x27;.price&#x27;&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;formData.rules.price&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;scope.row.price&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">el-table-column</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">label</span>=<span class="string">&quot;数量&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">:prop</span>=<span class="string">&quot;&#x27;tableData.&#x27;+scope.$index+&#x27;.num&#x27;&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;formData.rules.price&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;scope.row.num&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;submitForm(&#x27;formRef&#x27;)&quot;</span>&gt;</span>批量开票<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line">  </span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">name</span>: <span class="string">&quot;table&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">formData</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="attr">id</span>:<span class="number">1</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    ...,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    </span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="attr">rules</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="attr">price</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                            <span class="attr">required</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                            <span class="attr">message</span>: <span class="string">&#x27;单价不能为空&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                            <span class="attr">tirgger</span>: [<span class="string">&#x27;blur&#x27;</span>, <span class="string">&#x27;change&#x27;</span>]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="attr">num</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                            <span class="attr">required</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                            <span class="attr">message</span>: <span class="string">&#x27;数量不能为空&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                            <span class="attr">tirgger</span>: [<span class="string">&#x27;blur&#x27;</span>, <span class="string">&#x27;change&#x27;</span>]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="attr">selected</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                            <span class="attr">required</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                            <span class="attr">message</span>: <span class="string">&#x27;请选择&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                            <span class="attr">tirgger</span>: <span class="string">&#x27;change&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="attr">tableData</span>:[ <span class="comment">//表格数据</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    &#123;  </span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="attr">num</span>:<span class="number">1</span>, <span class="comment">//数量</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="attr">price</span>:<span class="number">291.37</span>, <span class="comment">//价格</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    &#125;]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="function"><span class="title">submitForm</span>(<span class="params">formName</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">this</span>.$refs[formName].validate(<span class="function">(<span class="params">valid</span>)=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="keyword">if</span>(valid)&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="built_in">console</span>.log(<span class="number">1</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">第二种没验证(参考:https:<span class="comment">//www.jianshu.com/p/f036aae3539b)</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="javascript"><span class="xml">     <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="javascript"><span class="xml">       <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">&quot;forms&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;forms&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="javascript"><span class="xml">         <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;forms.voList&quot;</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="javascript"><span class="xml">          <span class="tag">&lt;<span class="name">el-table-column</span></span></span></span></span></span><br><span class="line"><span class="tag"><span class="xml"><span class="javascript"><span class="xml">            <span class="attr">label</span>=<span class="string">&quot;价格&quot;</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="javascript"><span class="xml">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="javascript"><span class="xml">              <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">:prop</span>=<span class="string">&quot;&#x27;voList.&#x27;+scope.$index+&#x27;.unitPrice&#x27;&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules.unitPrice&quot;</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="javascript"><span class="xml">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;scope.row.unitPrice&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="javascript"><span class="xml">              <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="javascript"><span class="xml">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="javascript"><span class="xml">          <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="javascript"><span class="xml">          <span class="tag">&lt;<span class="name">el-table-column</span></span></span></span></span></span><br><span class="line"><span class="tag"><span class="xml"><span class="javascript"><span class="xml">            <span class="attr">label</span>=<span class="string">&quot;数量&quot;</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="javascript"><span class="xml">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="javascript"><span class="xml">              <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">:prop</span>=<span class="string">&quot;&#x27;voList.&#x27;+scope.$index+&#x27;.num&#x27;&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules.unitPrice&quot;</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="javascript"><span class="xml">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;scope.row.num&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="javascript"><span class="xml">              <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="javascript"><span class="xml">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="javascript"><span class="xml">          <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="javascript"><span class="xml">        <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="javascript"><span class="xml">      <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="javascript"><span class="xml">      <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;save&quot;</span>&gt;</span>批量开票<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="javascript"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="javascript"><span class="xml">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  </span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &lt;script&gt;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">name</span>: <span class="string">&quot;table&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">forms</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">id</span>:<span class="number">1</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">         ...,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">voList</span>:[</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">num</span>:<span class="number">1</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">unitPrice</span>:<span class="number">291.37</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          ]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">rules</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">num</span>:[&#123;<span class="attr">required</span>:<span class="literal">true</span>,<span class="attr">message</span>:<span class="string">&#x27;数量不能为空&#x27;</span>,<span class="attr">trigger</span>:<span class="string">&#x27;blur&#x27;</span>&#125;],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">unitPrice</span>:[&#123;<span class="attr">required</span>:<span class="literal">true</span>,<span class="attr">message</span>:<span class="string">&#x27;单价不能为空&#x27;</span>,<span class="attr">trigger</span>:<span class="string">&#x27;blur&#x27;</span>&#125;]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="function"><span class="title">save</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">this</span>.$refs[<span class="string">&#x27;forms&#x27;</span>].validate(<span class="function">(<span class="params">valid</span>)=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="keyword">if</span>(valid)&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">console</span>.log(<span class="number">1</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">         &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">       &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">     &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">   &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">...补充中</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>Typescript在vue3项目中的使用</title>
    <url>/2022/10/15/ts/Typescript/</url>
    <content><![CDATA[<hr>
<span id="more"></span>
<p>引用某大佬一段有意思的话:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">先有js，是各大浏览器厂商共同养的，</span><br><span class="line">后有ts，是微软想分蛋糕，把浏览器网页标准纳入自己的系统，搞出来的，</span><br><span class="line">但又不甘心当儿子，就说ts是js的超集，给js套上了一堆规矩，包括强类型，类定义等等。</span><br><span class="line">但这个爹不会干活，干活的时候还是要编译成js，也就是他的儿子(js这个儿子才是会干活的正主)，才能被浏览器执行。</span><br><span class="line">于是编译过程中，整了个叫eslint的语法检查器，查验是不是合规的ts语法，语法不对就不给编译。</span><br></pre></td></tr></table></figure>

<h2 id="什么是ts"><a href="#什么是ts" class="headerlink" title="什么是ts?"></a>什么是ts?</h2><p>ts是js的超集，是js的扩展语言，结合ide可以让我们再开发过程中知道变量的类型并提供联想提示</p>
<h2 id="基础类型-泛型语法"><a href="#基础类型-泛型语法" class="headerlink" title="基础类型(泛型语法)"></a>基础类型(泛型语法)</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">1.</span> <span class="built_in">Boolean</span> 类型  </span><br><span class="line">    <span class="keyword">let</span> isAdult = ref&lt;boolean&gt;(<span class="literal">false</span>); </span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> <span class="built_in">Number</span> 类型   </span><br><span class="line">    <span class="keyword">let</span> age = ref&lt;number&gt;(<span class="number">17</span>);</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> <span class="built_in">String</span> 类型   </span><br><span class="line">    <span class="comment">// 普通字符串</span></span><br><span class="line">    <span class="keyword">let</span> name = ref&lt;string&gt;(<span class="string">&quot;jeasu&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带变量的字符串</span></span><br><span class="line">    <span class="keyword">let</span> msg = ref&lt;string&gt;(<span class="string">`my name is <span class="subst">$&#123;name.value&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拼接的字符串</span></span><br><span class="line">    <span class="keyword">let</span> sentence = ref&lt;string&gt;(<span class="string">&quot;Hello, my name is &quot;</span> + name + <span class="string">&quot;.\n\n&quot;</span> +  <span class="string">&quot;I&#x27;ll be &quot;</span> + (age + <span class="number">1</span>) + <span class="string">&quot; years old next month.&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> <span class="built_in">Array</span> 类型    </span><br><span class="line">    <span class="keyword">let</span> list: <span class="built_in">Array</span>&lt;number&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; </span><br><span class="line">    <span class="comment">// Array&lt;number&gt;泛型语法(数组泛型)</span></span><br><span class="line">    <span class="comment">// ES5：var list = [1,2,3];2.5 Enum 类型</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> hobbies = ref&lt;<span class="built_in">Array</span>&lt;string&gt;&gt;([<span class="string">&quot;历史&quot;</span>, <span class="string">&quot;地理&quot;</span>, <span class="string">&quot;生物&quot;</span>]);</span><br><span class="line">    <span class="keyword">let</span> list4 = ref&lt;<span class="built_in">Array</span>&lt;number | string&gt;&gt;([<span class="string">&#x27;dasahk&#x27;</span>,<span class="number">10</span>])</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> 联合类型 </span><br><span class="line">    一个变量定义可能的多种类型</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 联合类型</span></span><br><span class="line">    <span class="keyword">let</span> collection1 = ref&lt;number | string | boolean&gt;(<span class="number">6</span>);</span><br><span class="line">    <span class="keyword">let</span> collection2 = ref&lt;number | string | boolean&gt;(<span class="string">&quot;good&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> collection3 = ref&lt;number | string | boolean&gt;(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 联合类型数组</span></span><br><span class="line">    <span class="keyword">let</span> collection4 = ref&lt;(number | string | boolean)[]&gt;([<span class="string">&quot;hasd&quot;</span>, <span class="literal">true</span>, <span class="number">36</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//联合类型的注意点：对联合类型的数据的操作</span></span><br><span class="line">    <span class="keyword">const</span> fn = (str: string | number): <span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> str.length;  <span class="comment">//红波浪线报错，原因是number 没有length属性</span></span><br><span class="line">    &#125;;</span><br><span class="line">    fn(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">复杂类型</span><br><span class="line"></span><br><span class="line"><span class="comment">//复杂类型可以定义interface等，然后再写进泛型中</span></span><br><span class="line">interface IUser &#123;  <span class="attr">name</span>: string;  age: number;&#125;</span><br><span class="line"><span class="keyword">const</span> user = ref&lt;IUser&gt;(&#123;  <span class="attr">name</span>: <span class="string">&#x27;林三心&#x27;</span>,  <span class="attr">age</span>: <span class="number">20</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//reactive一般用来定义引用类型，比如对象、数组</span></span><br><span class="line"><span class="keyword">const</span> user = reactive&lt;IUser&gt;(&#123;  <span class="attr">name</span>: <span class="string">&#x27;林三心&#x27;</span>,  <span class="attr">age</span>: <span class="number">20</span>&#125;)</span><br><span class="line"><span class="keyword">const</span> users = reactive&lt;IUser[]&gt;([  &#123; <span class="attr">name</span>: <span class="string">&#x27;林三心&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;])</span><br><span class="line"></span><br><span class="line"><span class="comment">//computed同样使用泛型</span></span><br><span class="line"><span class="keyword">const</span> text = computed&lt;string&gt;(<span class="function">() =&gt;</span> <span class="string">&#x27;哈哈哈&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> users = computed&lt;IUser[]&gt;(<span class="function">() =&gt;</span> ([  &#123; <span class="attr">name</span>: <span class="string">&#x27;林三心&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;]))</span><br><span class="line"></span><br><span class="line"><span class="comment">//defineProps</span></span><br><span class="line">interface IProps &#123;  <span class="attr">name</span>: string;  age?: number&#125;</span><br><span class="line"><span class="keyword">const</span> &#123; name, age &#125; = defineProps&lt;IProps&gt;()</span><br><span class="line"></span><br><span class="line"><span class="comment">//defineEmits</span></span><br><span class="line">interface IEmits &#123;  <span class="attr">handleChange</span>: <span class="function">(<span class="params">val: string</span>) =&gt;</span> <span class="keyword">void</span>;  </span><br><span class="line">handleSwitch: <span class="function">(<span class="params">val: string</span>) =&gt;</span> <span class="keyword">void</span>&#125;</span><br><span class="line"><span class="keyword">const</span> emits = defineEmits&lt;IEmits&gt;()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span> 元组 Tuple</span><br><span class="line">    元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。 比如，你可以定义一对值分别为string和number类型的元组。</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Declare a tuple type</span></span><br><span class="line">    <span class="keyword">let</span> arr: [string, number];</span><br><span class="line">    <span class="comment">// Initialize it</span></span><br><span class="line">    arr = [<span class="string">&#x27;hello&#x27;</span>, <span class="number">10</span>]; <span class="comment">// OK</span></span><br><span class="line">    <span class="comment">// Initialize it incorrectly</span></span><br><span class="line">    arr = [<span class="number">10</span>, <span class="string">&#x27;hello&#x27;</span>]; <span class="comment">// Error</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(arr[<span class="number">0</span>].substr(<span class="number">1</span>)); <span class="comment">// OK</span></span><br><span class="line">    <span class="built_in">console</span>.log(arr[<span class="number">1</span>].substr(<span class="number">1</span>)); <span class="comment">// Error, &#x27;number&#x27; does not have &#x27;substr&#x27;</span></span><br><span class="line"></span><br><span class="line">    arr[<span class="number">3</span>] = <span class="string">&#x27;world&#x27;</span>; <span class="comment">// OK, 字符串可以赋值给(string | number)类型</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(arr[<span class="number">5</span>].toString()); <span class="comment">// OK, &#x27;string&#x27; 和 &#x27;number&#x27; 都有 toString</span></span><br><span class="line"></span><br><span class="line">    arr[<span class="number">6</span>] = <span class="literal">true</span>; <span class="comment">// Error, 布尔不是(string | number)类型</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> arr1 = ref&lt;[number, string]&gt;([<span class="number">8</span>, <span class="string">&quot;haode&quot;</span>]);</span><br><span class="line">    <span class="comment">// let arr1 = ref&lt;[number, string]&gt;([&quot;haode&quot;, 10]); //ERROR</span></span><br><span class="line"></span><br><span class="line"><span class="number">7.</span> 枚举 enum</span><br><span class="line">    enum类型是对JavaScript标准数据类型的一个补充</span><br><span class="line"></span><br><span class="line">    enum Color &#123;Red, Green, Blue&#125;;</span><br><span class="line">    <span class="keyword">let</span> c: Color = Color.Green;</span><br><span class="line"></span><br><span class="line">    默认情况下，从<span class="number">0</span>开始为元素编号。 你也可以手动的指定成员的数值。 例如，我们将上面的例子改成从 <span class="number">1</span>开始编号：</span><br><span class="line"></span><br><span class="line">    enum Color &#123;Red = <span class="number">1</span>, Green, Blue&#125;; <span class="comment">//或者enum Color &#123;Red = 1, Green = 2, Blue = 4&#125;;</span></span><br><span class="line">    <span class="keyword">let</span> colorName: string = Color[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//枚举类型</span></span><br><span class="line">    enum Color &#123;red,blue,green&#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取索引</span></span><br><span class="line">    <span class="keyword">let</span> c11 = ref&lt;Color&gt;(Color.blue); <span class="comment">// 1</span></span><br><span class="line">    <span class="comment">// 取内容</span></span><br><span class="line">    <span class="keyword">let</span> c21 = ref&lt;string&gt;(Color[<span class="number">2</span>]); <span class="comment">// green </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//枚举默认值,默认值可以为小数</span></span><br><span class="line">    enum Color2 &#123;red = <span class="number">1.5</span>,blue = <span class="number">10</span>,green = <span class="number">20</span>&#125;</span><br><span class="line">    <span class="keyword">let</span> c111 = ref&lt;Color2&gt;(Color2.blue); <span class="comment">// 10</span></span><br><span class="line">    <span class="keyword">let</span> c222 = ref&lt;string&gt;(Color2[<span class="number">10</span>]); <span class="comment">// blue 根据默认值取对应内容</span></span><br><span class="line">    <span class="comment">//由此可见：</span></span><br><span class="line">    enum Color &#123;red,blue,green&#125; <span class="comment">//=&gt;&#123;red=0,blue=1,green=2&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//若是只有一个添加默认值如下</span></span><br><span class="line">    enum Color3 &#123;red,blue = <span class="number">5</span>,green&#125;</span><br><span class="line">    <span class="keyword">let</span> c333 = ref&lt;Color3&gt;(Color3.red); <span class="comment">//0 未加默认值，默认从0 开始</span></span><br><span class="line">    <span class="keyword">let</span> c444 = ref&lt;Color3&gt;(Color3.blue); <span class="comment">//5  //默认值5</span></span><br><span class="line">    <span class="keyword">let</span> c555 = ref&lt;Color3&gt;(Color3.green); <span class="comment">//6  //从默认值开始+1</span></span><br><span class="line">    <span class="keyword">let</span> c666 = ref&lt;string&gt;(Color3[<span class="number">6</span>]); <span class="comment">//green</span></span><br><span class="line">    <span class="comment">//取内容，根据默认值</span></span><br><span class="line">    <span class="keyword">let</span> c555: string = Color3[<span class="number">6</span>]; <span class="comment">//green </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">8.</span> 任意值 any</span><br><span class="line">    表示允许赋值为任意类型，不希望类型检查器对(用户输入或第三方代码库)这些值进行检查而是直接让它们通过编译阶段的检查,可以使用 any类型来标记这些变量</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> notSure: any = <span class="number">4</span>;</span><br><span class="line">    notSure = <span class="string">&quot;maybe a string instead&quot;</span>;</span><br><span class="line">    notSure = <span class="literal">false</span>; <span class="comment">// okay, definitely a boolean</span></span><br><span class="line"></span><br><span class="line">    notSure.ifItExists(); <span class="comment">// okay, ifItExists might exist at runtime</span></span><br><span class="line">    notSure.toFixed(); <span class="comment">// okay, toFixed exists (but the compiler doesn&#x27;t check)</span></span><br><span class="line"></span><br><span class="line">    当你只知道一部分数据的类型时，any类型也是有用的。 比如，你有一个数组，它包含了不同的类型的数据：</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> list: any[] = [<span class="number">1</span>, <span class="literal">true</span>, <span class="string">&quot;free&quot;</span>];</span><br><span class="line"></span><br><span class="line">    list[<span class="number">1</span>] = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//any 类型，则允许被赋值为任意类型。 </span></span><br><span class="line">    <span class="keyword">let</span> sim = ref&lt;any&gt;(<span class="string">&quot;seven&quot;</span>);</span><br><span class="line">    sim = <span class="number">7</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(sim, <span class="string">&quot;任意类型&quot;</span>); <span class="comment">//7</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//变量如果在声明的时候，未指定其类型，那么它会被识别为任意值类型 </span></span><br><span class="line">    <span class="keyword">let</span> a3; </span><br><span class="line">    a3 = <span class="string">&#x27;seven&#x27;</span>; </span><br><span class="line">    a3 = <span class="number">7</span>; </span><br><span class="line">    <span class="comment">//相当于 </span></span><br><span class="line">    <span class="keyword">let</span> a3:any; </span><br><span class="line">    a3 = <span class="string">&#x27;seven&#x27;</span>; </span><br><span class="line">    a3 = <span class="number">7</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//any定义多元数组</span></span><br><span class="line">    <span class="keyword">let</span> arr = reactive&lt;any[]&gt;([<span class="number">1</span>, <span class="literal">true</span>, <span class="string">&quot;hellow&quot;</span>]);</span><br><span class="line">    arr[<span class="number">1</span>] = <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(arr, <span class="string">&quot;any定义多元数组&quot;</span>);   <span class="comment">// [1,100,&#x27;hellow&#x27;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">9.</span> 空值 <span class="keyword">void</span></span><br><span class="line">    当一个函数没有返回值时，你通常会见到其返回值类型是 <span class="keyword">void</span>：</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">warnUser</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">        alert(<span class="string">&quot;This is my warning message&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    声明一个<span class="keyword">void</span>类型的变量没有什么大用，因为你只能为它赋予<span class="literal">undefined</span>和<span class="literal">null</span>：</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> unusable: <span class="keyword">void</span> = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明一个void类型的变量没什么大用，只能赋予undefined和 null两种值</span></span><br><span class="line">    <span class="keyword">let</span> unusable: <span class="keyword">void</span> = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//但是我们通常在定义函数的时候用它，当一个函数没有返回值时，你通常会见到其返回值类型是void</span></span><br><span class="line">    <span class="keyword">const</span> warnUser =(x:number,<span class="attr">y</span>:number): <span class="function"><span class="params">void</span>=&gt;</span> &#123;     </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;This is my warning message&quot;</span>); </span><br><span class="line">        <span class="keyword">if</span> (x &gt; y) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;x&gt;y&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;x&lt;y&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">10.</span> Null 和 Undefined</span><br><span class="line">    <span class="literal">undefined</span> 和 <span class="literal">null</span> 是所有类型的子类型。也就是说 <span class="literal">undefined</span> 类型的变量，可以赋值给 number 类型的变量：</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这样不会报错</span></span><br><span class="line">    <span class="keyword">let</span> num: number = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="comment">// 这样也不会报错</span></span><br><span class="line">    <span class="keyword">let</span> u: <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">let</span> num: number = u;</span><br><span class="line"></span><br><span class="line">    而 <span class="keyword">void</span> 类型的变量不能赋值给 number 类型的变量：</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> u: <span class="keyword">void</span>;</span><br><span class="line">    <span class="keyword">let</span> num: number = u;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Type &#x27;void&#x27; is not assignable to type &#x27;number&#x27;.</span></span><br><span class="line"></span><br><span class="line"><span class="number">11.</span> Never</span><br><span class="line">    never类型表示的是那些永不存在的值的类型</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回never的函数必须存在无法达到的终点</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">message: string</span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 推断的返回值类型为never</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fail</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> error(<span class="string">&quot;Something failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回never的函数必须存在无法达到的终点</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">infiniteLoop</span>(<span class="params"></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">12.</span> <span class="built_in">Object</span> 类型</span><br><span class="line">    object 表示非原始类型，也就是除number，string，boolean，symbol,<span class="literal">null</span>或者<span class="literal">undefined</span>之外的类型，使用object类型，就可以更好的表示想<span class="built_in">Object</span>.create这样的API</span><br><span class="line"></span><br><span class="line">     <span class="keyword">const</span> create = (o: object | <span class="literal">null</span>): <span class="function"><span class="params">void</span> =&gt;</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    create(&#123; <span class="attr">prop</span>: <span class="number">0</span> &#125;); <span class="comment">// OK</span></span><br><span class="line">    create(<span class="literal">null</span>); <span class="comment">// OK</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// create(42); // Error</span></span><br><span class="line">    <span class="comment">// create(&quot;string&quot;); // Error</span></span><br><span class="line">    <span class="comment">// create(false); // Error</span></span><br><span class="line">    <span class="comment">// create(undefined); // Error</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">类型断言</span><br><span class="line"></span><br><span class="line">    有时候你会遇到这样的情况，你会比TypeScript更了解某个值的详细信息。 通常这会发生在你清楚地知道一个实体具有比它现有类型更确切的类型。</span><br><span class="line">    通过类型断言这种方式可以告诉编译器，“相信我，我知道自己在干什么”。 类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。 它没有运行时的影响，只是在编译阶段起作用。 TypeScript会假设你，程序员，已经进行了必须的检查。</span><br><span class="line"></span><br><span class="line">    类型断言有两种形式。 其一是“尖括号”语法：</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> someValue: any = <span class="string">&quot;this is a string&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> strLength: number = (&lt;string&gt;someValue).length;</span><br><span class="line"></span><br><span class="line">    另一个为<span class="keyword">as</span>语法：</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> someValue: any = <span class="string">&quot;this is a string&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> strLength: number = (someValue <span class="keyword">as</span> string).length;</span><br><span class="line">    两种形式是等价的。 至于使用哪个大多数情况下是凭个人喜好；然而，当你在TypeScript里使用JSX时，只有 <span class="keyword">as</span>语法断言是被允许的。</span><br></pre></td></tr></table></figure>
<h2 id="类型别名-type"><a href="#类型别名-type" class="headerlink" title="类型别名 type"></a>类型别名 type</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">type abc = string | number[];</span><br><span class="line">type n = number;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> n1: abc;</span><br><span class="line">n1 = <span class="string">&quot;4&quot;</span>;</span><br><span class="line">n1 = [<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn1 = (str: abc): <span class="function"><span class="params">n</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> str.length;</span><br><span class="line">&#125;;</span><br><span class="line">fn1(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="对象类型（引入概念：接口-Interfaces）"><a href="#对象类型（引入概念：接口-Interfaces）" class="headerlink" title="对象类型（引入概念：接口 Interfaces）"></a>对象类型（引入概念：接口 Interfaces）</h2><p>在面向对象语言中，接口（Interfaces）是一个很重要的概念，它是对行为的抽象。接口（Interfaces）可以用于对「对象的形状（Shape）」进行描述。<br>注意：顺序可以乱，但是定义的对象要受到接口的约束</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义对象属性</span></span><br><span class="line"> interface defineObj &#123;</span><br><span class="line">      readonly name: string; <span class="comment">//只读属性</span></span><br><span class="line">      age: number; <span class="comment">//必填</span></span><br><span class="line">      sex?: string; <span class="comment">//选填</span></span><br><span class="line">      call(): string; <span class="comment">//有返回值，类型为string</span></span><br><span class="line">      action(): <span class="keyword">void</span>; <span class="comment">//必填、无返回值</span></span><br><span class="line">      [propName: string]: any; <span class="comment">//任意属性</span></span><br><span class="line">      <span class="comment">//需要注意的是，一旦定义了任意属性，那么确定属性和可选属性都必须是它的子属性</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">const</span> obj = reactive&lt;defineObj&gt;(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;abc&quot;</span>, <span class="comment">//只读，不可修改</span></span><br><span class="line">      <span class="attr">age</span>: <span class="number">18</span>, <span class="comment">//sex:&#x27;男&#x27;,</span></span><br><span class="line">      <span class="attr">a</span>: <span class="string">&quot;a&quot;</span>,</span><br><span class="line">      <span class="attr">b</span>: <span class="number">9</span>,</span><br><span class="line">      <span class="attr">c</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">call</span>: <span class="function">() =&gt;</span> <span class="string">&quot;call&quot;</span>,</span><br><span class="line">      <span class="attr">action</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;void接口&quot;</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">o</span>: &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;,</span><br><span class="line"> &#125;);</span><br><span class="line"> <span class="built_in">console</span>.log(obj.call()); <span class="comment">//call</span></span><br><span class="line"> obj.action(); <span class="comment">//void接口</span></span><br><span class="line"> <span class="keyword">return</span> &#123;</span><br><span class="line">   	  obj,</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h2><p>函数类型的定义有两点：参数类型、返回值类型</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//有返回值</span></span><br><span class="line"><span class="keyword">const</span> f1 = (x: number, <span class="attr">y</span>: number): <span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(f1(<span class="number">1</span>, <span class="number">3</span>)); <span class="comment">//4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//无返回值</span></span><br><span class="line"><span class="keyword">const</span> f2 = (n1: number, <span class="attr">n2</span>: number): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (n1 &gt; n2) &#123;</span><br><span class="line">    <span class="comment">//处理逻辑</span></span><br><span class="line">    <span class="built_in">console</span>.log(n1 + <span class="string">&quot;&gt;&quot;</span> + n2);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//处理逻辑</span></span><br><span class="line">    <span class="built_in">console</span>.log(n1 + <span class="string">&quot;&lt;&quot;</span> + n2);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">f2(<span class="number">9</span>, <span class="number">7</span>); <span class="comment">//9&gt;7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//有返回值,比较数据</span></span><br><span class="line"><span class="keyword">const</span> f3 = (n1: number, <span class="attr">n2</span>: number): <span class="function"><span class="params">boolean</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (n1 &gt; n2) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(f3(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//组合数据</span></span><br><span class="line"><span class="keyword">const</span> f4 = (n1: string, <span class="attr">n2</span>: string): string[] =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> [n1, n2];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(f4(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>)); <span class="comment">// [&#x27;a&#x27;,&#x27;b&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数据判断校验</span></span><br><span class="line"><span class="keyword">const</span> f5 = (s1: string, <span class="attr">s2</span>: string): <span class="function"><span class="params">boolean</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> i = s1.search(s2);</span><br><span class="line">  <span class="keyword">return</span> i &gt; -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(f5(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;a&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数默认值</span></span><br><span class="line"><span class="keyword">const</span> f6 = (x: number = <span class="number">1</span>, <span class="attr">y</span>: number = <span class="number">2</span>): <span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(f6()); <span class="comment">//3</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//可选参数,y可以传，也可以不传，可选参数后面是不允许出现必填参数，只能放在最后</span></span><br><span class="line"><span class="keyword">const</span> f7 = (x: number = <span class="number">1</span>, y?: number, z?: number): <span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//   return x + y; //报错，y为可选参数，不能加减或拼接</span></span><br><span class="line">  <span class="keyword">return</span> x + (y! ?? <span class="number">0</span>) + (z! ?? <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(f7());  <span class="comment">// 1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="接口-Interfaces"><a href="#接口-Interfaces" class="headerlink" title="接口 Interfaces"></a>接口 Interfaces</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">接口在函数中的运用</span><br><span class="line">当传入的参数是对象类型的时候：</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不用接口定义时</span></span><br><span class="line">    <span class="keyword">const</span> fn = (obj: &#123; <span class="attr">id</span>: number; name: string &#125;): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> obj.name;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> oh = reactive(&#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;jeasu&quot;</span> &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(fn(oh)); <span class="comment">//jeasu</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//仅对函数入参做约束</span></span><br><span class="line">    interface params &#123;</span><br><span class="line">        <span class="attr">id</span>: number;</span><br><span class="line">        name: string;</span><br><span class="line">        age: number;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> fn1 = (o: params): <span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> o.age;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> oh1 = reactive(&#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;jeasu&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(fn1(oh1)); <span class="comment">//18</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//对整个函数的类型检查，建议对返回值类型也要定义</span></span><br><span class="line">    iinterface SearchFun &#123;</span><br><span class="line">        (a: string, <span class="attr">b</span>: string): boolean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> fn2: SearchFun = <span class="function">(<span class="params">s1, s2</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> i = s1.search(s2);</span><br><span class="line">        <span class="keyword">return</span> i !== -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//   return s1;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">console</span>.log(fn2(<span class="string">&quot;dsdahjk&quot;</span>, <span class="string">&quot;jk&quot;</span>));  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">接口继承接口</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 二维坐标接口</span></span><br><span class="line">    interface TwoDPoint&#123;</span><br><span class="line">        <span class="attr">x</span>: number,</span><br><span class="line">        <span class="attr">y</span>: number</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//三维坐标中的z坐标接口</span></span><br><span class="line">    interface ThreeDPoint&#123;</span><br><span class="line">        <span class="attr">z</span>: number</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//四维坐标接口继承了二维坐标接口的x，y坐标和三维接口的z坐标</span></span><br><span class="line">    interface FourDPoint <span class="keyword">extends</span> ThreeDPoint, TwoDPoint&#123;</span><br><span class="line">        <span class="comment">//内还定义了四维坐标独有的时间坐标</span></span><br><span class="line">        <span class="attr">time</span>: <span class="built_in">Date</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//实例化四维坐标接口</span></span><br><span class="line">    <span class="keyword">const</span> poi2 = reactive&lt;FourDPoint&gt;(&#123;</span><br><span class="line">    <span class="attr">z</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">x</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">300</span>,</span><br><span class="line">    <span class="attr">time</span>: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(poi2, <span class="string">&quot;poi2&quot;</span>);<span class="comment">//Proxy对象&#123;&#123;z: 100,x: 200,y: 300,time: Mon Oct 11 2021 15:29:15 GMT+0800 (中国标准时间)&#125;&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="泛型-Generics"><a href="#泛型-Generics" class="headerlink" title="泛型 Generics"></a>泛型 Generics</h2><p>泛型（Generics）是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。<br>写法是 &lt;变量类型&gt;<br>泛型的产生条件：定义相同结构的函数时，如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// 如果根据业务需要传入不同类型的数据，就需要一个类型一个类型的写</span></span><br><span class="line">    <span class="comment">// 这样容易造成代码冗余</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fnn</span>(<span class="params">x:number,y:number</span>):<span class="title">number</span>[]</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [x,y]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fnn</span>(<span class="params">x:string,y:string</span>):<span class="title">string</span>[]</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [x,y]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fnn</span>(<span class="params">x:boolean,y:boolean</span>):<span class="title">boolean</span>[]</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [x,y]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">因此我们可以将类型用一个变量替代，在使用的时候，将变量类型传过去。</span><br><span class="line"></span><br><span class="line">    ①、泛型变量</span><br><span class="line">    泛型变量 T ，T 表示任何类型,也可以用其他字母代替</span><br><span class="line">    因此我们上面的代码可以写成：</span><br><span class="line"></span><br><span class="line">    <span class="comment">//函数声明方式</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">declaration</span>&lt;<span class="title">T</span>&gt;(<span class="params">x: T, y: T</span>): <span class="title">T</span>[] </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [x, y];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//函数表达式方式</span></span><br><span class="line">    <span class="keyword">const</span> expression = &lt;T&gt;(n1: T, <span class="attr">n2</span>: T): T[] =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> [n1, n2];</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 单类型</span></span><br><span class="line">    <span class="built_in">console</span>.log(declaration&lt;string&gt;(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>)); <span class="comment">//[&#x27;1&#x27;,&#x27;2&#x27;]</span></span><br><span class="line">    <span class="built_in">console</span>.log(expression&lt;boolean&gt;(<span class="literal">true</span>, <span class="literal">false</span>)); <span class="comment">//[true,false]</span></span><br><span class="line">    <span class="built_in">console</span>.log(expression&lt;number&gt;(<span class="number">6</span>, <span class="number">7</span>)); <span class="comment">//[6,7]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//联合类型</span></span><br><span class="line">    <span class="built_in">console</span>.log(expression&lt;number | string&gt;(<span class="number">6</span>, <span class="string">&quot;a&quot;</span>)); <span class="comment">//[6,&quot;a&quot;]</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//当我们不给传类型的时候，类型推断编译器会自动的帮我们判断传入的是什么类型,此时传入的数据只能为单一类型</span></span><br><span class="line">    <span class="built_in">console</span>.log(expression(<span class="number">1</span>, <span class="number">23</span>)); <span class="comment">//[1,23]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//泛型的约束</span></span><br><span class="line">    <span class="comment">//错误示范 求变量的长度</span></span><br><span class="line">    <span class="comment">// let variable1 = &lt;T&gt;(str: T): number =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//   return str.length;     // T是变量，未指定类型，未必会有length这个属性</span></span><br><span class="line">    <span class="comment">// &#125;;</span></span><br><span class="line">    <span class="comment">//修改：</span></span><br><span class="line">    <span class="comment">// 给参数限制类型</span></span><br><span class="line">    <span class="keyword">let</span> limit1 = &lt;T&gt;(str: string | T[]): <span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> str.length;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">console</span>.log(limit1&lt;number&gt;([<span class="number">1</span>, <span class="number">3</span>])); <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//或者给泛型变量添加约束 extends</span></span><br><span class="line">    <span class="keyword">let</span> limit2 = &lt;T extends String&gt;(arr: T): number =&gt; &#123;</span><br><span class="line">    return arr.length;</span><br><span class="line">    &#125;;</span><br><span class="line">    console.log(limit2&lt;string&gt;(&quot;one&quot;)); //3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //泛型的接口约束：就是让这个变量必须有length属性,此时就限定了变量类型有length属性，只能为string ，或者数组类型</span><br><span class="line">    interface ILengthNum &#123;</span><br><span class="line">    length: number;</span><br><span class="line">    &#125;</span><br><span class="line">    const limit3 = &lt;T extends ILengthNum&gt;(str: T): number =&gt; &#123;</span><br><span class="line">    return str.length;</span><br><span class="line">    &#125;;</span><br><span class="line">    console.log(limit3&lt;string&gt;(&quot;oneworld&quot;)); //8</span><br><span class="line">    console.log(limit3&lt;string[]&gt;([&quot;dasjd&quot;, &quot;dhksah&quot;, &quot;dahskdha&quot;])); //3</span><br><span class="line">    console.log(limit3&lt;number[]&gt;([12, 456, 79, 465])); //4</span><br><span class="line"></span><br><span class="line">    //多个类型参数</span><br><span class="line">    const multi = &lt;N, S&gt;(sum: [N, S]): [S, N] =&gt; &#123;</span><br><span class="line">    return [sum[1], sum[0]]; //实现的是交换数组内两项的位置</span><br><span class="line">    &#125;;</span><br><span class="line">    console.log(multi&lt;number, string&gt;([1, &quot;one&quot;])); //[&quot;one&quot;,1]</span><br><span class="line"></span><br><span class="line">    ②泛型接口</span><br><span class="line"></span><br><span class="line">    //泛型接口</span><br><span class="line">    interface genface1 &#123;</span><br><span class="line">        &lt;T&gt;(a: T, b: T): boolean;</span><br><span class="line">    &#125;</span><br><span class="line">    const func1: genface1 = (x, y) =&gt; &#123;</span><br><span class="line">        return x == y;</span><br><span class="line">    &#125;;</span><br><span class="line">    console.log(func1&lt;number&gt;(1111, 5)); //false</span><br><span class="line">    console.log(func1&lt;string&gt;(&quot;abc&quot;, &quot;abc&quot;)); //true</span><br><span class="line"></span><br><span class="line">    //另一种 把泛型参数提前放在接口名上</span><br><span class="line">    interface genface2&lt;T&gt; &#123;</span><br><span class="line">        (a: T, b: T): boolean;</span><br><span class="line">    &#125;</span><br><span class="line">    const func2: genface2&lt;number&gt; = (x, y) =&gt; &#123;</span><br><span class="line">        return x == y;</span><br><span class="line">    &#125;;</span><br><span class="line">    console.log(func2(7, 5)); //false</span><br><span class="line"></span><br><span class="line">    //另一种写法,先定义类型，再赋值函数</span><br><span class="line">    let func3: genface2&lt;string&gt;;</span><br><span class="line">        func3 = (x, y) =&gt; &#123;</span><br><span class="line">        return x == y;</span><br><span class="line">    &#125;;</span><br><span class="line">    console.log(func3(&quot;abc&quot;, &quot;abc&quot;)); //true</span><br><span class="line"></span><br><span class="line">    //多类型泛型接口</span><br><span class="line">    interface createA3&lt;N, T&gt; &#123;</span><br><span class="line">        (a: N, b: T): Array&lt;T&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">    let func4: createA3&lt;number, string&gt;;</span><br><span class="line">    func4 = function (i, s) &#123;</span><br><span class="line">        let arr: string[] = [];</span><br><span class="line">        arr[i] = s;</span><br><span class="line">        return arr;</span><br><span class="line">    &#125;;</span><br><span class="line">    func4(1, &quot;dqwy&quot;);</span><br><span class="line"></span><br><span class="line">    //泛型约束</span><br><span class="line">    interface Length4 &#123;</span><br><span class="line">        length: number;</span><br><span class="line">    &#125;</span><br><span class="line">    interface createA4&lt;N, T extends Length4&gt; &#123;</span><br><span class="line">        (a: N, b: T): string;</span><br><span class="line">    &#125;</span><br><span class="line">    let func5: createA4&lt;number, string&gt;;</span><br><span class="line">    func5 = function (i, s) &#123;</span><br><span class="line">        //var arr:string[] = []</span><br><span class="line">        //return arr</span><br><span class="line">        return s;</span><br><span class="line">    &#125;;</span><br><span class="line">    func5(2, &quot;dqwy&quot;);</span><br><span class="line"></span><br><span class="line">    ③用泛型变量和any的区别</span><br><span class="line"></span><br><span class="line">    //使用泛型变量 T</span><br><span class="line">    function fun6&lt;T&gt;(x: T, y: T): T[] &#123;</span><br><span class="line">        return [x, y];</span><br><span class="line">    &#125;</span><br><span class="line">    fun6&lt;string&gt;(&quot;a&quot;, &quot;b&quot;);</span><br><span class="line"></span><br><span class="line">    //使用 any：缺点就是传入的类型和返回的类型不确定</span><br><span class="line">    function fun7(x: any, y: any): any[] &#123;</span><br><span class="line">        return [x, y];</span><br><span class="line">    &#125;</span><br><span class="line">    fun7(&quot;a&quot;, &quot;b&quot;);</span><br></pre></td></tr></table></figure>
<h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">    ES5:构造函数方式</span><br><span class="line">传统的JavaScript程序使用函数和基于原型的继承来创建可重用的组件，但对于熟悉使用面向对象方式的程序员来讲就有些棘手，因为他们用的是基于类的继承并且对象是由类构建出来的。</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name,color</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">    Cat.prototype.type = <span class="string">&#x27;动物&#x27;</span>；</span><br><span class="line">    Cat.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;吃&#x27;</span>)；</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> c1 = <span class="keyword">new</span> Cat(<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="attr">ES6</span>:Class 类定义</span><br><span class="line">    ES <span class="number">6</span>开始，JavaScript程序员将能够使用基于类的面向对象的方式。</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Cat1</span> </span>&#123;</span><br><span class="line">    <span class="attr">name</span>: string;</span><br><span class="line">    color: string; <span class="comment">//属性</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: string, color: string</span>)</span> &#123;</span><br><span class="line">        <span class="comment">//构造函数</span></span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">//方法</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;吃&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> cat1 = <span class="keyword">new</span> Cat1(<span class="string">&quot;tom&quot;</span>, <span class="string">&quot;blue&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(cat1.name); <span class="comment">//tom</span></span><br><span class="line">    <span class="built_in">console</span>.log(cat1.color); <span class="comment">// blue</span></span><br><span class="line">    cat1.eat(); <span class="comment">//吃</span></span><br><span class="line"></span><br><span class="line">    类的继承</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">        <span class="attr">type</span>: string;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">type: string</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.type = type;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;吃&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">say</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;叫&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="attr">name</span>: string;</span><br><span class="line">    age: number; <span class="comment">//属性</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">type: string, name: string, age: number</span>)</span> &#123;</span><br><span class="line">        <span class="comment">//构造函数</span></span><br><span class="line">        <span class="comment">//Animal.prototype.constructor.call(this)</span></span><br><span class="line">        <span class="built_in">super</span>(type); <span class="comment">//继承父类的属性和方法</span></span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">action</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;hsgdajsd&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//实例化</span></span><br><span class="line">    <span class="keyword">let</span> d = <span class="keyword">new</span> Dog(<span class="string">&quot;犬&quot;</span>, <span class="string">&quot;tom&quot;</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(d.type); <span class="comment">// 犬</span></span><br><span class="line">    <span class="built_in">console</span>.log(d.name); <span class="comment">//tom</span></span><br><span class="line">    <span class="built_in">console</span>.log(d.age); <span class="comment">//2</span></span><br><span class="line">    <span class="comment">// d.eat();</span></span><br><span class="line">    <span class="comment">// d.say();</span></span><br><span class="line">    d.action(); <span class="comment">//hsgdajsd</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>TS</category>
      </categories>
      <tags>
        <tag>Typescript</tag>
        <tag>vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>elementUI</title>
    <url>/2019/06/14/elementUI/elementUI/</url>
    <content><![CDATA[<hr>
<span id="more"></span>
<h3 id="elementUI-列表大数据操作卡顿问题"><a href="#elementUI-列表大数据操作卡顿问题" class="headerlink" title="elementUI 列表大数据操作卡顿问题"></a>elementUI 列表大数据操作卡顿问题</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">解决方案：</span><br><span class="line">Vue自定义指令 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">	<span class="xml"><span class="tag">&lt;<span class="name">el-table</span> <span class="attr">v-loading</span>=<span class="string">&quot;loading&quot;</span> <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%; min-height: 100%&quot;</span> <span class="attr">ref</span>=<span class="string">&#x27;infoTable&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">type</span>=<span class="string">&quot;index&quot;</span> <span class="attr">label</span>=<span class="string">&quot;序号&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;value&quot;</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="xml">     	 <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;编辑&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                  <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick(scope.row)&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">		 <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span></span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">title</span>=<span class="string">&quot;编辑&quot;</span> <span class="attr">:visible.sync</span>=<span class="string">&quot;isVisible&quot;</span> <span class="attr">width</span>=<span class="string">&quot;98%&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">el-select</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">         	<span class="attr">v-model</span>=<span class="string">&quot;items&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">         	<span class="attr">size</span>=<span class="string">&quot;small&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">         	<span class="attr">v-el-loadmore:number</span>=<span class="string">&quot;loadMore(number)&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">         	<span class="attr">filterable</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">         	<span class="attr">remote</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">         	<span class="attr">:remote-method</span>=<span class="string">&quot;remoteValue(query)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">         &gt;</span></span></span><br><span class="line"><span class="xml">             <span class="tag">&lt;<span class="name">el-option</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">             	<span class="attr">v-for</span>=<span class="string">&quot;(item, index) in list.slice(0, number)&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">             	<span class="attr">:key</span>=<span class="string">&quot;index&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">             	<span class="attr">:label</span>=<span class="string">&quot;item.label&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">             	<span class="attr">:value</span>=<span class="string">&quot;item.value&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">             &gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// 自定义一个vue指令监听滚动条</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">Vue.directive(</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="string">&#x27;el-loadmore&#x27;</span>, &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="function"><span class="title">bind</span>(<span class="params">el, binding</span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// 获取element-ui定义好的scroll盒子</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">const</span> SELECT_DOM = el.querySelector(<span class="string">&#x27;.el-select-dropdown .el-scrollbar .el-select-dropdown__wrap&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// 打印一下看看有没有获取到 element-ui 定义的scroll盒子</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">console</span>.log(<span class="string">&#x27;SELECT_DOM&#x27;</span>, SELECT_DOM)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            SELECT_DOM.addEventListener(<span class="string">&#x27;scroll&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="comment">/**</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">                * scrollHeight 获取元素内容高度(只读)</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">                * scrollTop 获取设置元素的偏移值,常用于计算滚动条的位置, 当一个元素的容器没有产生垂直方向的滚动条时, scrollTop的值默认为0.</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">                * clientHeight 读取元素的可见高度(只读)</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">                * 如果元素滚动到底, 下面等式返回true, 没有则返回false:</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">                * ele.scrollHeight - ele.scrollTop === ele.clientHeight;</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">                */</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="keyword">const</span> condition = <span class="built_in">this</span>.scrollHeight - <span class="built_in">this</span>.scrollTop &lt;= <span class="built_in">this</span>.clientHeight;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="comment">// 判断 condition 的值是否为true，为true 时调用 loadMore方法</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="keyword">if</span> (condition) binding.value();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">	       <span class="attr">tableData</span>: [], <span class="comment">// 初始页面的表格数据</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">           <span class="attr">list</span>: [], <span class="comment">// 下拉框option绑定的数据</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">           <span class="attr">items</span>: &#123;&#125;, <span class="comment">// 下拉框model绑定的数据</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">           <span class="attr">curRow</span>: &#123;&#125;, <span class="comment">// 当前正在编辑的行数据</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">           <span class="attr">number</span>: <span class="number">10</span>, </span></span></span><br><span class="line"><span class="javascript"><span class="xml">           <span class="attr">timer</span>: <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">           <span class="attr">isVisible</span>: <span class="literal">false</span>, <span class="comment">// 编辑页面的显示隐藏</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">       <span class="built_in">this</span>.getList()</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    	<span class="comment">// 获取初始列表</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="function"><span class="title">getList</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        	$.ajax(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">url</span>: <span class="string">&quot;/getlist&quot;</span>, <span class="comment">// 测试路径</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">type</span>: <span class="string">&quot;get&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">contentType</span>: <span class="string">&#x27;application/json;charset=utf-8&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                success (res) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="keyword">if</span> (res.state == <span class="string">&quot;success&quot;</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="built_in">console</span>.log(res.data) <span class="comment">// res.data  [&#123;id: &quot;01001&quot;, value: `张一`&#125;, &#123;id: &quot;01002&quot;, value: `张二`&#125;, .....]</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">						<span class="comment">// 如果是编辑页面时，如果把之前push的数据删除</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">			            <span class="keyword">if</span>(<span class="built_in">this</span>.curRow)&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">			          		res.data.forEach( <span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">			           			<span class="keyword">if</span>(item.id== <span class="built_in">this</span>.curRow.id)&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">			              			<span class="built_in">this</span>.list.splice(<span class="number">0</span>,<span class="number">1</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">			            		&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">			          		&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">			          	&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">			          	<span class="built_in">this</span>.list= [...this.list, ...res.data];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">error</span>: <span class="function"><span class="keyword">function</span> (<span class="params">text</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 懒加载增加数据个数</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="function"><span class="title">loadMore</span>(<span class="params">n</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="built_in">this</span>.number += <span class="number">5</span> <span class="comment">//每次滚动到底部可以新增条数  可自定义</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 远程搜索功能</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="function"><span class="title">remoteValue</span>(<span class="params">val</span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">if</span> (val != <span class="string">&#x27;&#x27;</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">this</span>.listerValue(val)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">this</span>.getList();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 模糊查询</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        listerValue (val) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">this</span>.loading = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">var</span> list= <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(<span class="built_in">this</span>.list));</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">if</span> (<span class="built_in">this</span>.timer) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">window</span>.clearTimeout(<span class="built_in">this</span>.timer)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">this</span>.timer = <span class="literal">null</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">this</span>.timer = <span class="built_in">window</span>.setTimeout( <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">this</span>.loading = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">this</span>.list= list.filter( <span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="keyword">if</span>(item.value.includes(val))&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="keyword">return</span> item</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;, <span class="number">200</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 编辑页面</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">handleClick</span>: <span class="function"><span class="keyword">function</span> (<span class="params">row</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">this</span>.setValue (row);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">this</span>.isVisible = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 设置编辑页面的初始值</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        setValue (row) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        	<span class="built_in">this</span>.curRow = row</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        	<span class="built_in">this</span>.list= []</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        	<span class="comment">//将当前行信息 push 到列表数组最前面，解决当前编辑的行数据的下拉框是没有加载的数据时回显</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">       		<span class="built_in">this</span>.list.push(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          		<span class="attr">id</span>: <span class="built_in">this</span>.curRow.id,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          		<span class="attr">value</span>: <span class="built_in">this</span>.curRow.value</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        	&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        	<span class="built_in">this</span>.getList();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="elementUI的二次封装"><a href="#elementUI的二次封装" class="headerlink" title="elementUI的二次封装"></a>elementUI的二次封装</h3><p>element ui二次封装的过程及原理</p>
<p>主要以父传子的形式实现，将需要复用的组件进行封装成子组件，子组件内主要负责页面的展示，Props接收父组件传来的值，将需要进行的逻辑操$emit给父组件。父组件引入子组件并向子组件内传入不同的值，使页面显示不同的文字描述，接收子组件传来的值编写函数来进行逻辑操作。</p>
<p>主界面封装：<br>    将element ui中的表格Table、分页Pagination、Input输入框、Select搜索框等放进一个组件内，在props里定义好要从父组件接收的值，在函数里定义好 $emit传给父组件的值。</p>
<p>弹窗封装：<br>    将element ui中的对话框Dialog、表单Form、上传Upload等放进一个组件内，在props里定义好要从父组件接收的值，在函数里定义好 $emit传给父组件的值。</p>
<h4 id="可复用的子组件主界面TableContainer"><a href="#可复用的子组件主界面TableContainer" class="headerlink" title="可复用的子组件主界面TableContainer"></a>可复用的子组件主界面TableContainer</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 顶部按钮部分 --&gt;</span><br><span class="line">    &lt;div class=&quot;Top&quot;&gt;</span><br><span class="line">      &lt;div v-if=&quot;TopBtu&quot; class=&quot;top_btu&quot;&gt;</span><br><span class="line">        &lt;el-button</span><br><span class="line">          v-for=&quot;(item, index) in TopBtu&quot;</span><br><span class="line">          :key=&quot;index&quot;</span><br><span class="line">          :type=&quot;item.type&quot;</span><br><span class="line">          :icon=&quot;item.icon&quot;</span><br><span class="line">          size=&quot;small&quot;</span><br><span class="line">          @click=&quot;cast(item.incident)&quot;</span><br><span class="line">          &gt;&#123;&#123; item.label &#125;&#125;&lt;/el-button</span><br><span class="line">        &gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      </span><br><span class="line">      &lt;!-- 搜索框部分 --&gt;</span><br><span class="line">      &lt;div class=&quot;searchK&quot; v-if=&quot;searchK&quot;&gt;</span><br><span class="line">        &lt;el-form :model=&quot;searchform&quot; ref=&quot;searchform&quot; label-width=&quot;100px&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;searchinput&quot;&gt;</span><br><span class="line">            &lt;el-form-item</span><br><span class="line">              v-for=&quot;(item, index) in searchK&quot;</span><br><span class="line">              :key=&quot;index&quot;</span><br><span class="line">              :label=&quot;item.label&quot;</span><br><span class="line">              :prop=&quot;item.prop&quot;</span><br><span class="line">              label-width=&quot;150px&quot;</span><br><span class="line">            &gt;</span><br><span class="line">              &lt;el-input</span><br><span class="line">                v-if=&quot;item.type === &#x27;number&#x27; || item.type === &#x27;text&#x27;&quot;</span><br><span class="line">                :type=&quot;item.type&quot;</span><br><span class="line">                :placeholder=&quot;&#x27;请输入要搜索的&#x27; + item.label&quot;</span><br><span class="line">                v-model=&quot;searchform[item.prop]&quot;</span><br><span class="line">                clearable</span><br><span class="line">                style=&quot;width: 220px&quot;</span><br><span class="line">              &gt;&lt;/el-input&gt;</span><br><span class="line">              &lt;el-select</span><br><span class="line">                v-if=&quot;item.type === &#x27;select&#x27;&quot;</span><br><span class="line">                :placeholder=&quot;&#x27;请输入&#x27; + item.label&quot;</span><br><span class="line">                v-model=&quot;searchform[item.prop]&quot;</span><br><span class="line">              &gt;</span><br><span class="line">                &lt;el-option</span><br><span class="line">                  v-for=&quot;item in options&quot;</span><br><span class="line">                  :key=&quot;item.value&quot;</span><br><span class="line">                  :label=&quot;item.label&quot;</span><br><span class="line">                  :value=&quot;item.value&quot;</span><br><span class="line">                &gt;</span><br><span class="line">                &lt;/el-option&gt;</span><br><span class="line">              &lt;/el-select&gt;</span><br><span class="line">            &lt;/el-form-item&gt;</span><br><span class="line">            </span><br><span class="line">            &lt;!--搜索框按钮部分--&gt;</span><br><span class="line">            &lt;el-form-item&gt;</span><br><span class="line">              &lt;el-button</span><br><span class="line">                type=&quot;primary&quot;</span><br><span class="line">                size=&quot;small&quot;</span><br><span class="line">                icon=&quot;el-icon-search&quot;</span><br><span class="line">                item</span><br><span class="line">                @click=&quot;submitForm(searchform)&quot;</span><br><span class="line">                &gt;查询&lt;/el-button</span><br><span class="line">              &gt;</span><br><span class="line">              &lt;el-button</span><br><span class="line">                icon=&quot;el-icon-refresh-right&quot;</span><br><span class="line">                type=&quot;info&quot;</span><br><span class="line">                size=&quot;small&quot;</span><br><span class="line">                @click=&quot;resetForm(searchform)&quot;</span><br><span class="line">                &gt;重置&lt;/el-button</span><br><span class="line">              &gt;</span><br><span class="line">              &lt;!--列配置按钮部分--&gt;</span><br><span class="line">              &lt;el-button</span><br><span class="line">                type=&quot;primary&quot;</span><br><span class="line">                class=&quot;el-icon-menu&quot;</span><br><span class="line">                @click=&quot;lieconfig&quot;</span><br><span class="line">                v-if=&quot;this.lieconfigshow == false&quot;</span><br><span class="line">                size=&quot;small&quot;</span><br><span class="line">                &gt;列配置&lt;/el-button</span><br><span class="line">              &gt;</span><br><span class="line">              &lt;div</span><br><span class="line">                style=&quot;display: inline-block; margin-left: 30px&quot;</span><br><span class="line">                v-show=&quot;this.lieconfigshow == true&quot;</span><br><span class="line">              &gt;</span><br><span class="line">                排序&lt;el-switch</span><br><span class="line">                  v-model=&quot;issortable&quot;</span><br><span class="line">                  active-color=&quot;#13ce66&quot;</span><br><span class="line">                  inactive-color=&quot;#ff4949&quot;</span><br><span class="line">                  :active-value=&quot;true&quot;</span><br><span class="line">                  :inactive-value=&quot;false&quot;</span><br><span class="line">                &gt;&lt;/el-switch&gt;</span><br><span class="line">                &lt;el-tooltip</span><br><span class="line">                  class=&quot;item&quot;</span><br><span class="line">                  effect=&quot;dark&quot;</span><br><span class="line">                  content=&quot;查询&quot;</span><br><span class="line">                  placement=&quot;top&quot;</span><br><span class="line">                &gt;</span><br><span class="line">                  &lt;i</span><br><span class="line">                    class=&quot;el-icon-search&quot;</span><br><span class="line">                    @click=&quot;submitForm&quot;</span><br><span class="line">                    style=&quot;font-size: 25px; color: DodgerBlue&quot;</span><br><span class="line">                  &gt;&lt;/i&gt;</span><br><span class="line">                &lt;/el-tooltip&gt;</span><br><span class="line">                &lt;!--列配置设置按钮部分--&gt;</span><br><span class="line">                &lt;el-tooltip</span><br><span class="line">                  class=&quot;item&quot;</span><br><span class="line">                  effect=&quot;dark&quot;</span><br><span class="line">                  content=&quot;设置&quot;</span><br><span class="line">                  placement=&quot;top&quot;</span><br><span class="line">                &gt;</span><br><span class="line">                  &lt;el-popover placement=&quot;top&quot; width=&quot;300&quot; v-model=&quot;visible&quot;&gt;</span><br><span class="line">                    &lt;div&gt;</span><br><span class="line">                      &lt;el-checkbox</span><br><span class="line">                        :indeterminate=&quot;isIndeterminate&quot;</span><br><span class="line">                        v-model=&quot;checkAll&quot;</span><br><span class="line">                        :checked=&quot;true&quot;</span><br><span class="line">                        @change=&quot;handleCheckAllChange&quot;</span><br><span class="line">                        &gt;列配置&lt;/el-checkbox</span><br><span class="line">                      &gt;</span><br><span class="line">                      &lt;el-button</span><br><span class="line">                        type=&quot;text&quot;</span><br><span class="line">                        style=&quot;margin-left: 80px; color: red&quot;</span><br><span class="line">                        @click=&quot;reset&quot;</span><br><span class="line">                        &gt;重置&lt;/el-button</span><br><span class="line">                      &gt;</span><br><span class="line">                      &lt;el-row v-for=&quot;(item, index) in tableProp&quot;&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;12&quot;&gt;</span><br><span class="line">                          &lt;el-checkbox-group</span><br><span class="line">                            v-model=&quot;selecttable&quot;</span><br><span class="line">                            @change=&quot;handleCheckedChange&quot;</span><br><span class="line">                          &gt;</span><br><span class="line">                            &lt;el-checkbox</span><br><span class="line">                              style=&quot;margin-top: 15px&quot;</span><br><span class="line">                              :label=&quot;item&quot;</span><br><span class="line">                              :key=&quot;index&quot;</span><br><span class="line">                              :checked=&quot;true&quot;</span><br><span class="line">                              &gt;&#123;&#123; item.name &#125;&#125;&lt;/el-checkbox</span><br><span class="line">                            &gt;</span><br><span class="line">                          &lt;/el-checkbox-group&gt;</span><br><span class="line">                        &lt;/el-col&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;12&quot;&gt;</span><br><span class="line">                          &lt;span&gt;表格宽度 &lt;/span&gt;</span><br><span class="line">                          &lt;el-input</span><br><span class="line">                            v-model=&quot;item.width&quot;</span><br><span class="line">                            style=&quot;width: 60px; margin-top: 5px&quot;</span><br><span class="line">                          &gt;&lt;/el-input&gt;</span><br><span class="line">                          &lt;span&gt;px&lt;/span&gt;</span><br><span class="line">                        &lt;/el-col&gt;</span><br><span class="line">                      &lt;/el-row&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;i</span><br><span class="line">                      class=&quot;el-icon-setting&quot;</span><br><span class="line">                      slot=&quot;reference&quot;</span><br><span class="line">                      style=&quot;font-size: 25px; color: DodgerBlue&quot;</span><br><span class="line">                    &gt;&lt;/i&gt;</span><br><span class="line">                  &lt;/el-popover&gt;</span><br><span class="line">                &lt;/el-tooltip&gt;</span><br><span class="line">                &lt;el-tooltip</span><br><span class="line">                  class=&quot;item&quot;</span><br><span class="line">                  effect=&quot;dark&quot;</span><br><span class="line">                  content=&quot;重置&quot;</span><br><span class="line">                  placement=&quot;top&quot;</span><br><span class="line">                &gt;</span><br><span class="line">                  &lt;i</span><br><span class="line">                    class=&quot;el-icon-refresh&quot;</span><br><span class="line">                    style=&quot;font-size: 25px; color: DodgerBlue&quot;</span><br><span class="line">                    @click=&quot;mainreset&quot;</span><br><span class="line">                  &gt;&lt;/i&gt;</span><br><span class="line">                &lt;/el-tooltip&gt;</span><br><span class="line">                &lt;el-tooltip</span><br><span class="line">                  class=&quot;item&quot;</span><br><span class="line">                  effect=&quot;dark&quot;</span><br><span class="line">                  content=&quot;普通查询&quot;</span><br><span class="line">                  placement=&quot;top&quot;</span><br><span class="line">                &gt;</span><br><span class="line">                  &lt;i</span><br><span class="line">                    class=&quot;el-icon-d-arrow-left&quot;</span><br><span class="line">                    @click=&quot;lieconfig&quot;</span><br><span class="line">                    style=&quot;font-size: 25px; color: DodgerBlue&quot;</span><br><span class="line">                  &gt;&lt;/i&gt;</span><br><span class="line">                &lt;/el-tooltip&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/el-form-item&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/el-form&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      </span><br><span class="line">      &lt;!-- 表格部分 --&gt;</span><br><span class="line">      &lt;div class=&quot;tableT&quot;&gt;</span><br><span class="line">        &lt;el-table</span><br><span class="line">          :data=&quot;tableData&quot;//表格数据</span><br><span class="line">          @select=&quot;danxuan&quot;</span><br><span class="line">          @select-all=&quot;quanxuan&quot;</span><br><span class="line">          :border=&quot;tableConfig.border&quot;//表格边框</span><br><span class="line">          style=&quot;width: 100%&quot;</span><br><span class="line">          :default-sort=&quot;&#123; prop: &#x27;id&#x27;, order: &#x27;descending&#x27; &#125;&quot;//表格默认排列方式</span><br><span class="line">        &gt;</span><br><span class="line">        </span><br><span class="line">        &lt;!--表格中的多行选择框--&gt;</span><br><span class="line">          &lt;el-table-column</span><br><span class="line">            v-if=&quot;tableConfig.selection&quot;</span><br><span class="line">            type=&quot;selection&quot;</span><br><span class="line">            width=&quot;55&quot;</span><br><span class="line">            align=&quot;center&quot;</span><br><span class="line">          &gt;</span><br><span class="line">          &lt;/el-table-column&gt;</span><br><span class="line">          &lt;el-table-column</span><br><span class="line">            fixed</span><br><span class="line">            v-if=&quot;tableConfig.index&quot;</span><br><span class="line">            type=&quot;index&quot;</span><br><span class="line">            label=&quot;序号&quot;</span><br><span class="line">            align=&quot;center&quot;</span><br><span class="line">            width=&quot;50&quot;</span><br><span class="line">          &gt;</span><br><span class="line">          &lt;/el-table-column&gt;</span><br><span class="line">          </span><br><span class="line">          &lt;!--表格中的图像类型--&gt;</span><br><span class="line">          &lt;el-table-column</span><br><span class="line">            v-for=&quot;(item, index) in selecttable&quot;</span><br><span class="line">            v-if=&quot;item.prop == &#x27;avatar&#x27; || item.prop == &#x27;preimg&#x27;&quot;</span><br><span class="line">            :key=&quot;index&quot;</span><br><span class="line">            :prop=&quot;item.prop&quot;</span><br><span class="line">            :label=&quot;item.name&quot;</span><br><span class="line">            :width=&quot;item.width&quot;</span><br><span class="line">            align=&quot;center&quot;</span><br><span class="line">          &gt;</span><br><span class="line">            &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">              &lt;img</span><br><span class="line">                v-if=&quot;scope.row[item.prop]&quot;</span><br><span class="line">                :src=&quot;scope.row[item.prop]&quot;</span><br><span class="line">                min-width=&quot;70&quot;</span><br><span class="line">                height=&quot;70&quot;</span><br><span class="line">              /&gt;</span><br><span class="line">              &lt;el-tag v-else type=&quot;primary&quot; disable-transitions&gt;无图片&lt;/el-tag&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">          &lt;/el-table-column&gt;</span><br><span class="line">          &lt;el-table-column</span><br><span class="line">            v-for=&quot;(item, index) in selecttable&quot;</span><br><span class="line">            v-if=&quot;item.prop !== &#x27;avatar&#x27; &amp;&amp; item.prop !== &#x27;preimg&#x27;&quot;</span><br><span class="line">            :key=&quot;index&quot;</span><br><span class="line">            :prop=&quot;item.prop&quot;//表格值</span><br><span class="line">            :label=&quot;item.name&quot;//表格名</span><br><span class="line">            :width=&quot;item.width&quot;//表格宽度</span><br><span class="line">            :show-overflow-tooltip=&quot;true&quot;//是否展示文字提示</span><br><span class="line">            :formatter=&quot;item.formatter || undefined&quot;//表格格式化</span><br><span class="line">            align=&quot;center&quot;</span><br><span class="line">            :sortable=&quot;issortable&quot;//是否可排序</span><br><span class="line">          &gt;</span><br><span class="line">          &lt;/el-table-column&gt;</span><br><span class="line">          </span><br><span class="line">          &lt;!--表格内最右边操作列--&gt;</span><br><span class="line">          &lt;el-table-column</span><br><span class="line">            v-if=&quot;tableConfig.handle&quot;</span><br><span class="line">            fixed=&quot;right&quot;</span><br><span class="line">            label=&quot;操作&quot;</span><br><span class="line">            align=&quot;center&quot;</span><br><span class="line">            :min-width=&quot;210&quot;</span><br><span class="line">          &gt;</span><br><span class="line">            &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">            &lt;!--操作列内的按钮部分--&gt;</span><br><span class="line">              &lt;el-button</span><br><span class="line">                v-for=&quot;(item, index) in tableConfig.buttonAffairs&quot;</span><br><span class="line">                :key=&quot;index&quot;</span><br><span class="line">                @click=&quot;handleClick(item.affairs, scope.row)&quot;</span><br><span class="line">                :type=&quot;item.type&quot;</span><br><span class="line">                size=&quot;mini&quot;</span><br><span class="line">                &gt;&#123;&#123; item.name &#125;&#125;&lt;/el-button</span><br><span class="line">              &gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">          &lt;/el-table-column&gt;</span><br><span class="line">        &lt;/el-table&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      </span><br><span class="line">      &lt;!-- 分页 --&gt;</span><br><span class="line">      &lt;div class=&quot;block&quot;&gt;</span><br><span class="line">        &lt;el-pagination</span><br><span class="line">          v-if=&quot;tableConfig.pagin&quot;</span><br><span class="line">          @size-change=&quot;handleSizeChange&quot;</span><br><span class="line">          @current-change=&quot;handleCurrentChange&quot;</span><br><span class="line">          :current-page=&quot;page.page&quot;</span><br><span class="line">          :page-sizes=&quot;[5, 10, 50, 100]&quot;</span><br><span class="line">          :page-size=&quot;page.pageSize&quot;</span><br><span class="line">          layout=&quot;total, sizes, prev, pager, next, jumper&quot;</span><br><span class="line">          :total=&quot;tabletotal&quot;</span><br><span class="line">        &gt;</span><br><span class="line">        &lt;/el-pagination&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;TableContainer&quot;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    TopBtu: Array,//顶部按钮接收值</span><br><span class="line">    searchK: Array,//搜索框接收值</span><br><span class="line">    tableProp: Array,//表格字段接收值</span><br><span class="line">    tableData: Array, //表格内显示的数据</span><br><span class="line">    tabletotal: 0,//表格内数量接收值</span><br><span class="line">    //分页对象</span><br><span class="line">    page: &#123;</span><br><span class="line">      page: Number,</span><br><span class="line">      pageSize: Number,</span><br><span class="line">    &#125;,</span><br><span class="line">    tableConfig: &#123;//表格配置</span><br><span class="line">      type: Object,</span><br><span class="line">      default: function () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          pagin: true, //是否分页</span><br><span class="line">          selection: true, // 选择框</span><br><span class="line">          index: true, // 序号</span><br><span class="line">          border: true, // 边框</span><br><span class="line">          handle: true, // 是否显示操作列</span><br><span class="line">          buttonAffairs: [</span><br><span class="line">          //操作列内按钮</span><br><span class="line">            &#123;</span><br><span class="line">              name: &quot;编辑&quot;,</span><br><span class="line">              icon: &quot;el-icon-plus&quot;,</span><br><span class="line">              type: &quot;primary&quot;,</span><br><span class="line">              affairs: &quot;Edit&quot;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              name: &quot;删除&quot;,</span><br><span class="line">              icon: &quot;el-icon-delete&quot;,</span><br><span class="line">              type: &quot;danger&quot;,</span><br><span class="line">              affairs: &quot;Remove&quot;,</span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      lieconfigshow: false,</span><br><span class="line">      issortable: true,</span><br><span class="line">      visible: false,</span><br><span class="line">      checkAll: false,</span><br><span class="line">      isIndeterminate: false,</span><br><span class="line">      selecttable: [],</span><br><span class="line">      //表单对象</span><br><span class="line">      searchform: &#123;&#125;,</span><br><span class="line">      //批量删除数组</span><br><span class="line">      batchdel: [],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    cast(val) &#123;    //顶部按钮抛出事件</span><br><span class="line">      if (val === &quot;Remove&quot;) &#123;</span><br><span class="line">        this.$emit(&quot;simTop&quot; + val, this.batchdel);</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">      this.$emit(&quot;simTop&quot; + val);</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    //列配置</span><br><span class="line">    lieconfig() &#123;</span><br><span class="line">      this.lieconfigshow = !this.lieconfigshow;</span><br><span class="line">    &#125;,</span><br><span class="line">    handleCheckAllChange(val) &#123;</span><br><span class="line">      this.selecttable = val ? this.tableProp : [];</span><br><span class="line">      this.isIndeterminate = false;</span><br><span class="line">    &#125;,</span><br><span class="line">    handleCheckedChange(value) &#123;</span><br><span class="line">      let checkedCount = value.length;</span><br><span class="line">      this.checkAll = checkedCount === this.tableProp.length; //选中长度等于总长度时全选按钮为true</span><br><span class="line">      this.isIndeterminate =</span><br><span class="line">        checkedCount &gt; 0 &amp;&amp; checkedCount &lt; this.tableProp.length;</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    reset() &#123;//列配置内设置的重置按钮</span><br><span class="line">      this.tableProp = this.$options.propsData.tableProp;</span><br><span class="line">      this.selecttable = this.tableProp;</span><br><span class="line">      this.isIndeterminate = false;</span><br><span class="line">      this.checkAll = true;</span><br><span class="line">    &#125;,</span><br><span class="line">    mainreset() &#123;//重置按钮抛出事件</span><br><span class="line">      this.searchform = &#123;&#125;;</span><br><span class="line">      this.$emit(&quot;reset&quot;);</span><br><span class="line">    &#125;,</span><br><span class="line">    submitForm(searchform) &#123;  //查询抛出事件</span><br><span class="line">      this.$emit(&quot;selCX&quot;, searchform);</span><br><span class="line">    &#125;,</span><br><span class="line">    resetForm(searchform) &#123;//重置按钮抛出事件</span><br><span class="line">      this.searchform = &#123;&#125;;</span><br><span class="line">      this.$emit(&quot;reset&quot;);</span><br><span class="line">    &#125;,</span><br><span class="line">    handleClick(affairs, row) &#123;//表格内操作列抛出事件</span><br><span class="line">      this.$emit(&quot;sim&quot; + affairs, row);</span><br><span class="line">    &#125;,</span><br><span class="line">    danxuan(selection) &#123;//表格多选</span><br><span class="line">      this.batchdel = selection;</span><br><span class="line">    &#125;,</span><br><span class="line">    quanxuan(selection) &#123;//表格多选</span><br><span class="line">      this.batchdel = selection;</span><br><span class="line">    &#125;,</span><br><span class="line">    handleSizeChange(val) &#123;//分页每页大小改变操作事件</span><br><span class="line">      this.page.pageSize = val;</span><br><span class="line">      this.$emit(&quot;getlist&quot;, this.page);</span><br><span class="line">    &#125;,</span><br><span class="line">    handleCurrentChange(val) &#123;//分页当前页改变操作事件</span><br><span class="line">      this.page.page = val;</span><br><span class="line">      this.$emit(&quot;getlist&quot;, this.page);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.searchinput &#123;</span><br><span class="line">  margin-top: 10px;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-wrap: wrap;</span><br><span class="line">&#125;</span><br><span class="line">.el-table thead &#123;</span><br><span class="line">  background-color: aqua;</span><br><span class="line">&#125;</span><br><span class="line">.block &#123;</span><br><span class="line">  margin-top: 20px;</span><br><span class="line">  text-align: right;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="可复用的子组件弹窗TableDialog"><a href="#可复用的子组件弹窗TableDialog" class="headerlink" title="可复用的子组件弹窗TableDialog"></a>可复用的子组件弹窗TableDialog</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">el-dialog</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">:visible.sync</span>=<span class="string">&quot;dialogVisible&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">:close-on-click-modal</span>=<span class="string">&quot;false&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">append-to-body</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">width</span>=<span class="string">&quot;45%&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      @<span class="attr">close</span>=<span class="string">&quot;handleClose&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">    &gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">&quot;dataform&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;popform&quot;</span> <span class="attr">:inline</span>=<span class="string">&quot;true&quot;</span> <span class="attr">size</span>=<span class="string">&quot;medium&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dataform&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">el-form-item</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">              <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in PopupViewinput&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">              <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">              <span class="attr">:label</span>=<span class="string">&quot;item.name&quot;</span>//表单字段名</span></span></span><br><span class="line"><span class="tag"><span class="xml">              <span class="attr">:label-width</span>=<span class="string">&quot;item.width&quot;</span>//表单宽度</span></span></span><br><span class="line"><span class="tag"><span class="xml">              <span class="attr">:prop</span>=<span class="string">&quot;item.prop&quot;</span>//表单字段值</span></span></span><br><span class="line"><span class="tag"><span class="xml">              <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            &gt;</span></span></span><br><span class="line"><span class="xml">            <span class="comment">&lt;!-- Input输入框 --&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">el-input</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">v-if</span>=<span class="string">&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="xml">                  item.type === &#x27;number&#x27; ||</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="xml">                  item.type === &#x27;text&#x27; ||</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="xml">                  item.type === &#x27;textarea&#x27;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="xml">                &quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">:type</span>=<span class="string">&quot;item.type&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">clearable</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">:placeholder</span>=<span class="string">&quot;&#x27;请输入&#x27; + item.name&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">:disabled</span>=<span class="string">&quot;item.disabled&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">v-model</span>=<span class="string">&quot;dataform[item.prop]&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">              &gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="comment">&lt;!-- Select选择器 --&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">el-select</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">v-if</span>=<span class="string">&quot;item.type === &#x27;select&#x27;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">:placeholder</span>=<span class="string">&quot;&#x27;请输入&#x27; + item.name&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">v-model</span>=<span class="string">&quot;dataform[item.prop]&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">              &gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">el-option</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                  <span class="attr">v-for</span>=<span class="string">&quot;item in options&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                  <span class="attr">:key</span>=<span class="string">&quot;item.value&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                  <span class="attr">:label</span>=<span class="string">&quot;item.label&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                  <span class="attr">:value</span>=<span class="string">&quot;item.value&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                &gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="comment">&lt;!-- Switch开关 --&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">el-switch</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">v-if</span>=<span class="string">&quot;item.type === &#x27;switch&#x27;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">v-model</span>=<span class="string">&quot;dataform[item.prop]&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">active-color</span>=<span class="string">&quot;#13ce66&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">inactive-color</span>=<span class="string">&quot;#ff4949&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">:active-text</span>=<span class="string">&quot;item.switch.text.right&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">:inactive-text</span>=<span class="string">&quot;item.switch.text.left&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">:active-value</span>=<span class="string">&quot;item.switch.value.right&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">:inactive-value</span>=<span class="string">&quot;item.switch.value.left&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">              &gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;/<span class="name">el-switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="comment">&lt;!-- 日期选择器 --&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">el-date-picker</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">v-model</span>=<span class="string">&quot;dataform[item.prop]&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">v-if</span>=<span class="string">&quot;item.type === &#x27;datetime&#x27;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">type</span>=<span class="string">&quot;datetime&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">placeholder</span>=<span class="string">&quot;选择日期时间&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">value-format</span>=<span class="string">&quot;timestamp&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">              &gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">              <span class="comment">&lt;!-- 图片上传 --&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">el-upload</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">v-if</span>=<span class="string">&quot;item.type === &#x27;img&#x27;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">ref</span>=<span class="string">&quot;upload&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">action</span>=<span class="string">&quot;#&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">:auto-upload</span>=<span class="string">&quot;false&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">accept</span>=<span class="string">&quot;.jpg,.jpeg,.png,.gif,.bmp,.JPG,.JPEG,.GIF,.BMP&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">:class</span>=<span class="string">&quot;&#123; disabled: uploadDisabled &#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">:limit</span>=<span class="string">&quot;1&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">list-type</span>=<span class="string">&quot;picture-card&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">:on-change</span>=<span class="string">&quot;handleChange&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">:on-remove</span>=<span class="string">&quot;handleRemove&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">              &gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">img</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                  <span class="attr">style</span>=<span class="string">&quot;width: 148px; height: 148px&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                  <span class="attr">v-if</span>=<span class="string">&quot;dataform[item.prop]&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                  <span class="attr">:src</span>=<span class="string">&quot;dataform[item.prop]&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                  <span class="attr">class</span>=<span class="string">&quot;avatar&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="comment">&lt;!-- &lt;i v-else class=&quot;el-icon-plus avatar-uploader-icon&quot;&gt;&lt;/i&gt; --&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">v-else</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-plus&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">              <span class="comment">&lt;!-- 多张图片上传 --&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">el-upload</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">v-if</span>=<span class="string">&quot;item.type === &#x27;imgList&#x27;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">action</span>=<span class="string">&quot;#&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">ref</span>=<span class="string">&quot;uploadList&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">list-type</span>=<span class="string">&quot;picture-card&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">:auto-upload</span>=<span class="string">&quot;false&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">:on-change</span>=<span class="string">&quot;uploadImg&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">              &gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-plus&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="comment">&lt;!-- 底部按钮--&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dialog-footer&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">type</span>=<span class="string">&quot;info&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;dialogVisible = false&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          &gt;</span>取 消&lt;/el-button</span></span><br><span class="line"><span class="xml">        &gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提 交<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&quot;TableDialog&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">uploadDisabled</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">val</span>: <span class="built_in">Number</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">title</span>: <span class="string">&quot;&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">dialogVisible</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">dataform</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">PopupViewinput</span>: <span class="built_in">Array</span>,<span class="comment">//表单内接收值</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">open</span>(<span class="params">val, title, data</span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">if</span> (val === <span class="number">1</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">if</span> (data != <span class="literal">null</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="built_in">this</span>.dataform = <span class="built_in">Object</span>.assign(&#123;&#125;, data); <span class="comment">//浅拷贝防止表格跟随弹窗变化</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.val = val;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.title = title;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.dialogVisible = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//提交</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">submit</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">if</span> (<span class="built_in">this</span>.val === <span class="number">0</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">this</span>.$emit(<span class="string">&quot;submitAdd&quot;</span>, <span class="built_in">this</span>.dataform);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.val === <span class="number">1</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">this</span>.$emit(<span class="string">&quot;submitUpdate&quot;</span>, <span class="built_in">this</span>.dataform);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.dialogVisible = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">handleClose</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.dataform = <span class="built_in">this</span>.$options.data().dataform;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">if</span> (<span class="built_in">this</span>.$refs.upload) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">this</span>.$refs.upload[<span class="number">0</span>].clearFiles();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">if</span> (<span class="built_in">this</span>.$refs.uploadList) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">this</span>.$refs.uploadList[<span class="number">0</span>].clearFiles();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.uploadDisabled = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">handleChange</span>(<span class="params">file, fileList</span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.$emit(<span class="string">&quot;img&quot;</span>, file);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.uploadDisabled = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">handleRemove</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.$refs.upload[<span class="number">0</span>].clearFiles();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.uploadDisabled = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">uploadImg</span>(<span class="params">file, fileList</span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.$emit(<span class="string">&quot;imgList&quot;</span>, file);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>  &gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-class">.disabled</span> <span class="selector-class">.el-upload--picture-card</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">display</span>: none <span class="meta">!important</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-class">.dataform</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">display</span>: flex;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">flex-wrap</span>: wrap;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">justify-content</span>: space-between;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-class">.avatar-uploader</span> <span class="selector-class">.el-upload</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">border</span>: <span class="number">1px</span> dashed <span class="number">#d9d9d9</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">cursor</span>: pointer;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">position</span>: relative;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">overflow</span>: hidden;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-class">.avatar-uploader</span> <span class="selector-class">.el-upload</span><span class="selector-pseudo">:hover</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">border-color</span>: <span class="number">#409eff</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-class">.avatar-uploader-icon</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">font-size</span>: <span class="number">28px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">color</span>: <span class="number">#8c939d</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">width</span>: <span class="number">150px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">height</span>: <span class="number">150px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">line-height</span>: <span class="number">178px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">text-align</span>: center;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-class">.avatar</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">width</span>: <span class="number">100px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">height</span>: <span class="number">100px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">display</span>: block;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="UserCon父组件引用实例"><a href="#UserCon父组件引用实例" class="headerlink" title="UserCon父组件引用实例"></a>UserCon父组件引用实例</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">TableContainer</span>  //引入子组件<span class="attr">TableContainer</span>主界面传输和接收值</span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">v-bind</span>=<span class="string">&quot;da&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      @<span class="attr">selCX</span>=<span class="string">&quot;load&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      @<span class="attr">reset</span>=<span class="string">&quot;reset&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      @<span class="attr">getlist</span>=<span class="string">&quot;load&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      @<span class="attr">simTopAdd</span>=<span class="string">&quot;addClick&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      @<span class="attr">simTopRemove</span>=<span class="string">&quot;deleteClick&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      @<span class="attr">simEdit</span>=<span class="string">&quot;editClick&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      @<span class="attr">simRemove</span>=<span class="string">&quot;deleteOneClick&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">    /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">TableDialog</span>    //引入子组件<span class="attr">TableDialog</span>弹窗传输和接收值</span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">ref</span>=<span class="string">&quot;dia&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">v-bind</span>=<span class="string">&quot;da1&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      @<span class="attr">img</span>=<span class="string">&quot;addimg&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      @<span class="attr">submitAdd</span>=<span class="string">&quot;submitAdd&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      @<span class="attr">submitUpdate</span>=<span class="string">&quot;submitUpdate&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">    /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> TableContainer <span class="keyword">from</span> <span class="string">&quot;@/components/table/TableContainer.vue&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> TableDialog <span class="keyword">from</span> <span class="string">&quot;@/components/table/TableDialog.vue&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; selectUser, addUser, updateUser, deleteUser &#125; <span class="keyword">from</span> <span class="string">&quot;@/api/user.js&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; upload &#125; <span class="keyword">from</span> <span class="string">&quot;@/api/upload.js&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&quot;UserCon&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    TableContainer,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    TableDialog,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//传给主界面TableContainer的值</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">da</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">page</span>: &#123;<span class="comment">//页数</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">current</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">pageSize</span>: <span class="number">10</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">TopBtu</span>: [<span class="comment">//顶部按钮</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">type</span>: <span class="string">&quot;primary&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">label</span>: <span class="string">&quot;新建&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">icon</span>: <span class="string">&quot;el-icon-circle-plus&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">incident</span>: <span class="string">&quot;Add&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">type</span>: <span class="string">&quot;danger&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">label</span>: <span class="string">&quot;删除&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">icon</span>: <span class="string">&quot;el-icon-delete-solid&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">incident</span>: <span class="string">&quot;Remove&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        ],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">searchK</span>: [<span class="comment">//顶部搜索框部分</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123; <span class="attr">type</span>: <span class="string">&quot;text&quot;</span>, <span class="attr">label</span>: <span class="string">&quot;账号&quot;</span>, <span class="attr">prop</span>: <span class="string">&quot;account&quot;</span> &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123; <span class="attr">type</span>: <span class="string">&quot;text&quot;</span>, <span class="attr">label</span>: <span class="string">&quot;邮箱&quot;</span>, <span class="attr">prop</span>: <span class="string">&quot;email&quot;</span> &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123; <span class="attr">type</span>: <span class="string">&quot;text&quot;</span>, <span class="attr">label</span>: <span class="string">&quot;手机号&quot;</span>, <span class="attr">prop</span>: <span class="string">&quot;mobilePhoneNumber&quot;</span> &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123; <span class="attr">type</span>: <span class="string">&quot;text&quot;</span>, <span class="attr">label</span>: <span class="string">&quot;昵称&quot;</span>, <span class="attr">prop</span>: <span class="string">&quot;nickname&quot;</span> &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        ],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">tableProp</span>: [<span class="comment">//表格部分</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123; <span class="attr">prop</span>: <span class="string">&quot;avatar&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;用户头像&quot;</span>, <span class="attr">width</span>: <span class="string">&quot;150&quot;</span> &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123; <span class="attr">prop</span>: <span class="string">&quot;id&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;用户id&quot;</span>, <span class="attr">width</span>: <span class="string">&quot;200&quot;</span> &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123; <span class="attr">prop</span>: <span class="string">&quot;account&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;账户&quot;</span>, <span class="attr">width</span>: <span class="string">&quot;100&quot;</span> &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123; <span class="attr">prop</span>: <span class="string">&quot;age&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;年龄&quot;</span>, <span class="attr">width</span>: <span class="string">&quot;100&quot;</span> &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123; <span class="attr">prop</span>: <span class="string">&quot;area&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;地区&quot;</span>, <span class="attr">width</span>: <span class="string">&quot;150&quot;</span> &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">prop</span>: <span class="string">&quot;admin&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">name</span>: <span class="string">&quot;管理员&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">width</span>: <span class="string">&quot;100&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">formatter</span>: <span class="built_in">this</span>.formatter,<span class="comment">//格式化</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">prop</span>: <span class="string">&quot;v&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">name</span>: <span class="string">&quot;V认证&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">width</span>: <span class="string">&quot;100&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">formatter</span>: <span class="built_in">this</span>.formatter,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">prop</span>: <span class="string">&quot;createDate&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">name</span>: <span class="string">&quot;注册时间&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">width</span>: <span class="string">&quot;200&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">formatter</span>: <span class="built_in">this</span>.formatter,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">prop</span>: <span class="string">&quot;deleted&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">name</span>: <span class="string">&quot;可删除&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">width</span>: <span class="string">&quot;100&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">formatter</span>: <span class="built_in">this</span>.formatter,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123; <span class="attr">prop</span>: <span class="string">&quot;nickname&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;昵称&quot;</span>, <span class="attr">width</span>: <span class="string">&quot;100&quot;</span> &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123; <span class="attr">prop</span>: <span class="string">&quot;email&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;邮箱&quot;</span>, <span class="attr">width</span>: <span class="string">&quot;200&quot;</span> &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123; <span class="attr">prop</span>: <span class="string">&quot;hobby&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;兴趣爱好&quot;</span>, <span class="attr">width</span>: <span class="string">&quot;150&quot;</span> &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">prop</span>: <span class="string">&quot;lastLogin&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">name</span>: <span class="string">&quot;最后登录时间&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">width</span>: <span class="string">&quot;200&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">formatter</span>: <span class="built_in">this</span>.formatter,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123; <span class="attr">prop</span>: <span class="string">&quot;mobilePhoneNumber&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;电话号码&quot;</span>, <span class="attr">width</span>: <span class="string">&quot;200&quot;</span> &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123; <span class="attr">prop</span>: <span class="string">&quot;design&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;个性签名&quot;</span>, <span class="attr">width</span>: <span class="string">&quot;250&quot;</span> &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123; <span class="attr">prop</span>: <span class="string">&quot;password&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;密码&quot;</span>, <span class="attr">width</span>: <span class="string">&quot;200&quot;</span> &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">prop</span>: <span class="string">&quot;sex&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">name</span>: <span class="string">&quot;性别&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">width</span>: <span class="string">&quot;100&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">formatter</span>: <span class="built_in">this</span>.formatter,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">prop</span>: <span class="string">&quot;status&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">name</span>: <span class="string">&quot;状态&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">width</span>: <span class="string">&quot;100&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">formatter</span>: <span class="built_in">this</span>.formatter,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123; <span class="attr">prop</span>: <span class="string">&quot;work&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;职业&quot;</span>, <span class="attr">width</span>: <span class="string">&quot;150&quot;</span> &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        ],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">tableData</span>: [],<span class="comment">//表格数据</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">tabletotal</span>: <span class="number">0</span>,<span class="comment">//数据数量</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">tableConfig</span>: &#123;<span class="comment">//表格配置</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">pagin</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">selection</span>: <span class="literal">true</span>, <span class="comment">// 选择框</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">index</span>: <span class="literal">true</span>, <span class="comment">// 序号</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">border</span>: <span class="literal">true</span>, <span class="comment">// 边框</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">handle</span>: <span class="literal">true</span>, <span class="comment">// 是否显示操作列</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">buttonAffairs</span>: [<span class="comment">//操作列按钮</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">name</span>: <span class="string">&quot;编辑&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">icon</span>: <span class="string">&quot;el-icon-plus&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">type</span>: <span class="string">&quot;primary&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">affairs</span>: <span class="string">&quot;Edit&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">name</span>: <span class="string">&quot;删除&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">icon</span>: <span class="string">&quot;el-icon-delete&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">type</span>: <span class="string">&quot;danger&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">affairs</span>: <span class="string">&quot;Remove&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          ],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="comment">//传给弹窗页TableDialog的值</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">da1</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">PopupViewinput</span>: [<span class="comment">//表单部分</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">prop</span>: <span class="string">&quot;avatar&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">name</span>: <span class="string">&quot;头像&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">width</span>: <span class="string">&quot;100px&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">type</span>: <span class="string">&quot;img&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">prop</span>: <span class="string">&quot;id&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">name</span>: <span class="string">&quot;用户id&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">width</span>: <span class="string">&quot;80px&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">type</span>: <span class="string">&quot;text&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">disabled</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123; <span class="attr">prop</span>: <span class="string">&quot;account&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;账户&quot;</span>, <span class="attr">width</span>: <span class="string">&quot;80px&quot;</span>, <span class="attr">type</span>: <span class="string">&quot;text&quot;</span> &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123; <span class="attr">prop</span>: <span class="string">&quot;age&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;年龄&quot;</span>, <span class="attr">width</span>: <span class="string">&quot;80px&quot;</span>, <span class="attr">type</span>: <span class="string">&quot;text&quot;</span> &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">prop</span>: <span class="string">&quot;createDate&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">name</span>: <span class="string">&quot;注册时间&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">width</span>: <span class="string">&quot;80px&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">type</span>: <span class="string">&quot;datetime&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">prop</span>: <span class="string">&quot;admin&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">name</span>: <span class="string">&quot;管理员&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">type</span>: <span class="string">&quot;switch&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">switch</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">text</span>: &#123; <span class="attr">left</span>: <span class="string">&quot;否&quot;</span>, <span class="attr">right</span>: <span class="string">&quot;是&quot;</span> &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">value</span>: &#123; <span class="attr">left</span>: <span class="number">0</span>, <span class="attr">right</span>: <span class="number">1</span> &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">prop</span>: <span class="string">&quot;lastLogin&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">name</span>: <span class="string">&quot;最后登录时间&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">width</span>: <span class="string">&quot;100px&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">type</span>: <span class="string">&quot;datetime&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">prop</span>: <span class="string">&quot;deleted&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">name</span>: <span class="string">&quot;可删除&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">type</span>: <span class="string">&quot;switch&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">switch</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">text</span>: &#123; <span class="attr">left</span>: <span class="string">&quot;否&quot;</span>, <span class="attr">right</span>: <span class="string">&quot;是&quot;</span> &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">value</span>: &#123; <span class="attr">left</span>: <span class="number">0</span>, <span class="attr">right</span>: <span class="number">1</span> &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123; <span class="attr">prop</span>: <span class="string">&quot;design&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;个性签名&quot;</span>, <span class="attr">width</span>: <span class="string">&quot;80px&quot;</span>, <span class="attr">type</span>: <span class="string">&quot;text&quot;</span> &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">prop</span>: <span class="string">&quot;v&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">name</span>: <span class="string">&quot;v认证&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">type</span>: <span class="string">&quot;switch&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">switch</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">text</span>: &#123; <span class="attr">left</span>: <span class="string">&quot;未完成&quot;</span>, <span class="attr">right</span>: <span class="string">&quot;已完成&quot;</span> &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">value</span>: &#123; <span class="attr">left</span>: <span class="number">1</span>, <span class="attr">right</span>: <span class="number">3</span> &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123; <span class="attr">prop</span>: <span class="string">&quot;email&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;邮箱&quot;</span>, <span class="attr">width</span>: <span class="string">&quot;80px&quot;</span>, <span class="attr">type</span>: <span class="string">&quot;text&quot;</span> &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">prop</span>: <span class="string">&quot;sex&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">name</span>: <span class="string">&quot;性别&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">width</span>: <span class="string">&quot;80px&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">type</span>: <span class="string">&quot;switch&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">switch</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">text</span>: &#123; <span class="attr">left</span>: <span class="string">&quot;女&quot;</span>, <span class="attr">right</span>: <span class="string">&quot;男&quot;</span> &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">value</span>: &#123; <span class="attr">left</span>: <span class="number">0</span>, <span class="attr">right</span>: <span class="number">1</span> &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123; <span class="attr">prop</span>: <span class="string">&quot;hobby&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;兴趣爱好&quot;</span>, <span class="attr">width</span>: <span class="string">&quot;80px&quot;</span>, <span class="attr">type</span>: <span class="string">&quot;text&quot;</span> &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123; <span class="attr">prop</span>: <span class="string">&quot;area&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;地区&quot;</span>, <span class="attr">width</span>: <span class="string">&quot;80px&quot;</span>, <span class="attr">type</span>: <span class="string">&quot;text&quot;</span> &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">prop</span>: <span class="string">&quot;mobilePhoneNumber&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">name</span>: <span class="string">&quot;电话号码&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">width</span>: <span class="string">&quot;80px&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">type</span>: <span class="string">&quot;text&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123; <span class="attr">prop</span>: <span class="string">&quot;nickname&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;昵称&quot;</span>, <span class="attr">width</span>: <span class="string">&quot;80px&quot;</span>, <span class="attr">type</span>: <span class="string">&quot;text&quot;</span> &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123; <span class="attr">prop</span>: <span class="string">&quot;password&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;密码&quot;</span>, <span class="attr">width</span>: <span class="string">&quot;80px&quot;</span>, <span class="attr">type</span>: <span class="string">&quot;text&quot;</span> &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">prop</span>: <span class="string">&quot;status&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">name</span>: <span class="string">&quot;状态&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">width</span>: <span class="string">&quot;80px&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">type</span>: <span class="string">&quot;switch&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">switch</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">text</span>: &#123; <span class="attr">left</span>: <span class="string">&quot;离线&quot;</span>, <span class="attr">right</span>: <span class="string">&quot;在线&quot;</span> &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">value</span>: &#123; <span class="attr">left</span>: <span class="number">0</span>, <span class="attr">right</span>: <span class="number">1</span> &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123; <span class="attr">prop</span>: <span class="string">&quot;work&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;职业&quot;</span>, <span class="attr">width</span>: <span class="string">&quot;80px&quot;</span>, <span class="attr">type</span>: <span class="string">&quot;text&quot;</span> &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        ],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">this</span>.load(&#123;&#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">formatter</span>(<span class="params">row, column, cellValue, index</span>)</span> &#123;<span class="comment">//格式化</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">if</span> (column.property == <span class="string">&quot;admin&quot;</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">return</span> cellValue === <span class="number">1</span> ? <span class="string">&quot;是&quot;</span> : <span class="string">&quot;否&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">if</span> (column.property == <span class="string">&quot;deleted&quot;</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">return</span> cellValue === <span class="number">1</span> ? <span class="string">&quot;是&quot;</span> : <span class="string">&quot;否&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">if</span> (column.property == <span class="string">&quot;v&quot;</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">switch</span> (cellValue) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="keyword">case</span> <span class="number">1</span>:</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">return</span> <span class="string">&quot;未认证&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="keyword">case</span> <span class="number">2</span>:</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">return</span> <span class="string">&quot;进行中&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="keyword">case</span> <span class="number">3</span>:</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">return</span> <span class="string">&quot;已认证&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">if</span> (column.property == <span class="string">&quot;sex&quot;</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">return</span> cellValue === <span class="number">1</span> ? <span class="string">&quot;男&quot;</span> : <span class="string">&quot;女&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">if</span> (column.property == <span class="string">&quot;status&quot;</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">return</span> cellValue === <span class="number">1</span> ? <span class="string">&quot;在线&quot;</span> : <span class="string">&quot;离线&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">if</span> (column.property == <span class="string">&quot;createDate&quot;</span> || <span class="string">&quot;lastLogin&quot;</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(cellValue);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">let</span> y = date.getFullYear();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">let</span> MM = date.getMonth() + <span class="number">1</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        MM = MM &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + MM : MM;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">let</span> d = date.getDate();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        d = d &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + d : d;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">let</span> h = date.getHours();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        h = h &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + h : h;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">let</span> m = date.getMinutes();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        m = m &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + m : m;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">let</span> s = date.getSeconds();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        s = s &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + s : s;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">return</span> y + <span class="string">&quot;-&quot;</span> + MM + <span class="string">&quot;-&quot;</span> + d + <span class="string">&quot; &quot;</span> + h + <span class="string">&quot;:&quot;</span> + m + <span class="string">&quot;:&quot;</span> + s;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">load</span>(<span class="params">searchform</span>)</span> &#123;<span class="comment">//加载</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      selectUser(searchform)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="built_in">console</span>.log(res);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="built_in">this</span>.da.tableData = res.data.records;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="built_in">this</span>.da.tabletotal = res.data.total;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="built_in">this</span>.da.page.current = res.data.current;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="built_in">this</span>.da.page.pageSize = res.data.size;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="built_in">console</span>.log(err);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">reset</span>(<span class="params"></span>)</span> &#123;<span class="comment">//重置</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.load(&#123;&#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">addClick</span>(<span class="params"></span>)</span> &#123;<span class="comment">//新增</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.$refs.dia.open(<span class="number">0</span>, <span class="string">&quot;新增用户&quot;</span>, &#123;&#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">editClick</span>(<span class="params">row</span>)</span> &#123;<span class="comment">//编辑</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.$refs.dia.open(<span class="number">1</span>, <span class="string">&quot;编辑用户&quot;</span>, row);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">submitAdd</span>(<span class="params">data</span>)</span> &#123;<span class="comment">//提交</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      addUser(data)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="keyword">if</span> (res.success) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">this</span>.$message(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">showClose</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">message</span>: <span class="string">&quot;添加用户成功&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">type</span>: <span class="string">&quot;success&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">this</span>.load(&#123;&#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">this</span>.$message(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">showClose</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">message</span>: <span class="string">&quot;添加用户失败&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">type</span>: <span class="string">&quot;error&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="built_in">console</span>.log(err);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">submitUpdate</span>(<span class="params">data</span>)</span> &#123;<span class="comment">//更新</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      updateUser(data)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="keyword">if</span> (res.success) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">this</span>.$message(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">showClose</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">message</span>: <span class="string">&quot;更新用户成功&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">type</span>: <span class="string">&quot;success&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">this</span>.load(&#123;&#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">this</span>.$message(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">showClose</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">message</span>: <span class="string">&quot;更新用户失败&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">type</span>: <span class="string">&quot;error&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="built_in">console</span>.log(err);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">deleteClick</span>(<span class="params">data</span>)</span> &#123;<span class="comment">//顶部按钮删除多个</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">if</span> (data.length === <span class="number">0</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">this</span>.$message(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">showClose</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">message</span>: <span class="string">&quot;请选择要删除的用户&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">type</span>: <span class="string">&quot;error&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">this</span>.$confirm(<span class="string">&quot;此操作将永久删除该用户, 是否继续?&quot;</span>, <span class="string">&quot;提示&quot;</span>, &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">confirmButtonText</span>: <span class="string">&quot;确定&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">cancelButtonText</span>: <span class="string">&quot;取消&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">type</span>: <span class="string">&quot;warning&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          .then(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            data.forEach(<span class="function">(<span class="params">element</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              deleteUser(element.id)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                  <span class="built_in">console</span>.log(err);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">this</span>.load(&#123;&#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          .catch(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">this</span>.$message(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">type</span>: <span class="string">&quot;info&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">message</span>: <span class="string">&quot;已取消删除&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">deleteOneClick</span>(<span class="params">data</span>)</span> &#123;<span class="comment">//操作列按钮删除单个</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.$confirm(<span class="string">&quot;此操作将永久删除该用户, 是否继续?&quot;</span>, <span class="string">&quot;提示&quot;</span>, &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">confirmButtonText</span>: <span class="string">&quot;确定&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">cancelButtonText</span>: <span class="string">&quot;取消&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">type</span>: <span class="string">&quot;warning&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        .then(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          deleteUser(data.id)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="keyword">if</span> (res.success) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">this</span>.$message(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                  <span class="attr">showClose</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                  <span class="attr">message</span>: <span class="string">&quot;删除用户成功&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                  <span class="attr">type</span>: <span class="string">&quot;success&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">this</span>.$message(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                  <span class="attr">showClose</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                  <span class="attr">message</span>: <span class="string">&quot;删除用户失败&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                  <span class="attr">type</span>: <span class="string">&quot;error&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="built_in">console</span>.log(err);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="built_in">this</span>.load(&#123;&#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        .catch(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="built_in">this</span>.$message(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">type</span>: <span class="string">&quot;info&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">message</span>: <span class="string">&quot;已取消删除&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">addimg</span>(<span class="params">data</span>)</span> &#123;<span class="comment">//图片上传</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">//上传头像前接收的数据</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">const</span> isIMAGE = data.raw.type === <span class="string">&quot;image/jpeg&quot;</span> || <span class="string">&quot;image/gif&quot;</span> || <span class="string">&quot;image/png&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">const</span> isLt2M = data.raw.size / <span class="number">1024</span> / <span class="number">1024</span> &lt; <span class="number">2</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">if</span> (!isIMAGE) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">this</span>.$message(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">showClose</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">message</span>: <span class="string">&quot;请上传正确的图片格式&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">type</span>: <span class="string">&quot;error&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isLt2M) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">this</span>.$message(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">showClose</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">message</span>: <span class="string">&quot;上传文件大小不能超过 2MB!&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">type</span>: <span class="string">&quot;error&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">let</span> formdata = <span class="keyword">new</span> FormData();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        formdata.append(<span class="string">&quot;image&quot;</span>, data.raw);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        upload(formdata)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">console</span>.log(res);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">this</span>.$refs.dia.dataform.avatar = res.data;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.da1);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">this</span>.$message(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">showClose</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">message</span>: <span class="string">&quot;头像上传成功&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">type</span>: <span class="string">&quot;success&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">console</span>.log(err);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h4 id><a href="#" class="headerlink" title></a></h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="-1"><a href="#-1" class="headerlink" title></a></h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>elementUI</category>
      </categories>
      <tags>
        <tag>elementUI</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试题-js(补充中...)</title>
    <url>/2018/05/12/interview/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98js/</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<h3 id="Var、-let-、const-区别"><a href="#Var、-let-、const-区别" class="headerlink" title="Var、 let 、const 区别"></a>Var、 let 、const 区别</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">相同点:</span><br><span class="line"><span class="keyword">var</span>、<span class="keyword">let</span>、<span class="keyword">const</span>三者都可以声明变量</span><br><span class="line">区别:</span><br><span class="line"><span class="keyword">var</span> 存在变量提升 而<span class="keyword">let</span> 与 <span class="keyword">const</span> 不存在变量提升</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> 定义的变量可以声明多次，而<span class="keyword">let</span>、<span class="keyword">const</span>定义的变量只能声明一次</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span>、<span class="keyword">let</span>声明的变量可以再次赋值，而<span class="keyword">const</span>声明的变量不能再次赋值</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> 声明的变量没有自身的作用域(<span class="keyword">var</span>没有块级作用域)，而<span class="keyword">let</span>、<span class="keyword">const</span>声明的变量有自身的作用域 (在函数内<span class="keyword">var</span>声明的变量，在函数外也可以调用，但<span class="keyword">let</span>、<span class="keyword">const</span>声明的变量有自身的作用域，在函数内定义的变量只能在函数内使用)</span><br></pre></td></tr></table></figure>
<h3 id="ES6声明变量的六种方法"><a href="#ES6声明变量的六种方法" class="headerlink" title="ES6声明变量的六种方法"></a>ES6声明变量的六种方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ES5: <span class="keyword">var</span> <span class="function"><span class="keyword">function</span></span></span><br><span class="line"><span class="function"><span class="title">ES6</span>: <span class="title">let</span> <span class="title">const</span> <span class="title">import</span> <span class="title">class</span>(<span class="params"><span class="keyword">class</span>类</span>)</span></span><br></pre></td></tr></table></figure>
<h3 id="函数声明与函数表达式的区别"><a href="#函数声明与函数表达式的区别" class="headerlink" title="函数声明与函数表达式的区别"></a>函数声明与函数表达式的区别</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数声明(函数名是必须的)</span></span><br><span class="line">函数声明的最重要的一个特征是函数声明提升，意思是在执行代码之前会先读取函数声明，所以函数声明可以放在调用函数语句之后(类似于变量提升)</span><br><span class="line"></span><br><span class="line">sayHello();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数表达式(函数名可写，可不写)</span></span><br><span class="line">这种形式看起来像常规的变量赋值，先创建一个匿名函数，然后赋值给变量sayHi(不存在提升)</span><br><span class="line"></span><br><span class="line">sayHi(); <span class="comment">//在这里调用会报错</span></span><br><span class="line"><span class="keyword">var</span> sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&quot;Hi&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">sayHi(); <span class="comment">//Hi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//有趣的javascript例子</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;I am outside!&#x27;</span>); </span><br><span class="line">&#125;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="comment">// 重复声明一次函数f</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;I am inside!&#x27;</span>); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    f();</span><br><span class="line">&#125;());</span><br><span class="line">在chrome中输出<span class="string">&quot;I am inside&quot;</span>,IE11直接报错,firefox低一点的版本输出<span class="string">&quot;I am outside&quot;</span>…</span><br><span class="line"></span><br><span class="line">chrome输出的结果很明确的反应了用函数声明式声明的函数的特点–函数在声明之前就可以调用.</span><br><span class="line"></span><br><span class="line">IE报错显示缺少对象,因为函数声明在了条件里,违背了函数声明式的原则</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">函数表达式的作用域:</span><br><span class="line"></span><br><span class="line">如果函数表达式声明的函数有函数名,那么这个函数名就相当于这个函数的一个局部变量,只能在函数内部调用,举个栗子:</span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> <span class="title">fact</span>(<span class="params">x</span>) </span>&#123; </span><br><span class="line">	<span class="keyword">if</span> (x &lt;= <span class="number">1</span>) </span><br><span class="line">	    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">	    <span class="keyword">return</span> x*fact(x-<span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(fact());   <span class="comment">// Uncaught ReferenceError: fact is not defined</span></span><br><span class="line">fact()在函数内部可以调用,在函数外部调用就会报错:fact未定义.</span><br></pre></td></tr></table></figure>
<h3 id="函数柯里化-参考"><a href="#函数柯里化-参考" class="headerlink" title="函数柯里化 参考"></a>函数柯里化 <a href="https://blog.csdn.net/weixin_44865458/article/details/116463781?spm=1001.2014.3001.5502">参考</a></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">柯里化是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术 优点： <span class="number">1</span>、参数复用 <span class="number">2</span>、提前确认 <span class="number">3</span>、延迟运行</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="宏任务和微任务到底是什么"><a href="#宏任务和微任务到底是什么" class="headerlink" title="宏任务和微任务到底是什么"></a>宏任务和微任务到底是什么</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//面试题</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;start&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;setTimeout&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;promise&#x27;</span>)</span><br><span class="line">  resolve()</span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;then1&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;then2&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;end&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行顺序</span></span><br><span class="line">start </span><br><span class="line">promise</span><br><span class="line">end</span><br><span class="line">then1</span><br><span class="line">then2</span><br><span class="line"><span class="built_in">setTimeout</span></span><br><span class="line"></span><br><span class="line">（<span class="number">1</span>）js是单线程的，但是分同步异步\</span><br><span class="line">（<span class="number">2</span>）微任务和宏任务皆为异步任务，它们都属于一个队列\</span><br><span class="line">（<span class="number">3</span>）宏任务一般是：script、<span class="built_in">setTimeout</span>、<span class="built_in">setInterval</span>、postMessage、MessageChannel、setImmediate(Node.js 环境)\</span><br><span class="line">（<span class="number">4</span>）微任务：<span class="built_in">Promise</span>.then、<span class="built_in">Object</span>.observe、MutationObserver、process.nextTick(Node.js 环境)\</span><br><span class="line">（<span class="number">5</span>）先执行同步再执行异步，异步遇到微任务，先执行微任务，执行完后如果没有微任务，就执行下一个宏任务，如果有微任务，就按顺序一个一个执行微任务</span><br><span class="line"></span><br><span class="line">- 宏任务一般是：&lt;script&gt;标签中的运行代码、<span class="built_in">setTimeout</span>、<span class="built_in">setInterval</span>、postMessage、MessageChannel、setImmediate(Node.js 环境)</span><br><span class="line">- 微任务：<span class="built_in">Promise</span>.then、<span class="built_in">Object</span>.observe、MutationObserver、process.nextTick(Node.js 环境)</span><br><span class="line"></span><br><span class="line">宏任务、微任务是怎么执行的？</span><br><span class="line"></span><br><span class="line">执行顺序：先执行同步代码，遇到异步宏任务则将异步宏任务放入宏任务队列中，遇到异步微任务则将异步微任务放入微任务队列中，当所有同步代码执行完毕后，再将异步微任务从队列中调入主线程执行，微任务执行完毕后再将异步宏任务从队列中调入主线程执行，一直循环直至所有任务执行完毕</span><br><span class="line"></span><br><span class="line">这里容易产生一个**错误的**认识：就是微任务先于宏任务执行。实际上是先执行同步任务然后在执行异步任务，异步任务是分宏任务和微任务两种的</span><br><span class="line"></span><br><span class="line">JS是单线程的，那么JS是如何实现并发请求的？</span><br><span class="line">一般情况下，在单线程中，所有的任务需要排队，前一个任务执行完毕之后，才会去执行下一个任务，如果前一个任务耗时很长，后一个任务就不得不一直等着，那么JS是如何实现并发请求的呢？或者说JS是如何实现异步请求的呢？答案就是因为有 消息队列 和 事件循环 的存在</span><br><span class="line"></span><br><span class="line">消息队列指的是一个先进先出的队列，在这个队列中可以存在各种消息</span><br><span class="line"></span><br><span class="line">事件循环指的是主线程重复从消息队列中获取消息、执行的过程</span><br><span class="line"></span><br><span class="line">事件循环的基本流程</span><br><span class="line">JS的主线程一般只会做一件事情，就是从消息队列里取出消息，然后执行消息，再取出消息然后再执行，当消息队列为空时，就会等待直到消息队列中有消息的存在，而且主线程只有再将当前的消息执行完成之后，才会去执行下一个消息，这种机制就是事件循环机制</span><br><span class="line"></span><br><span class="line">事件循环的例子</span><br><span class="line">请看下面的一段代码，我们来详细介绍下事件循环中代码的执行流程是什么？</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;main1&#x27;</span>);</span><br><span class="line"></span><br><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;process.nextTick1&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;setTimeout&#x27;</span>);</span><br><span class="line">    process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;process.nextTick2&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;promise&#x27;</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;promise then&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;main2&#x27;</span>);</span><br><span class="line"></span><br><span class="line">正确的执行顺序请看下方的结果：</span><br><span class="line"></span><br><span class="line">main1</span><br><span class="line">promise</span><br><span class="line">main2</span><br><span class="line">process.nextTick1</span><br><span class="line">promise then</span><br><span class="line"><span class="built_in">setTimeout</span></span><br><span class="line">process.nextTick2</span><br><span class="line"></span><br><span class="line">详细分析：</span><br><span class="line">事件循环在执行上流程上，首先将全局代码当作一个宏任务，会先执行这个宏任务，执行这个宏任务的时候，会首先执行同步代码，遇到微任务就添加到微任务队列，遇到宏任务就会添加到宏任务队列，当同步代码执行完毕的时候，会开始执行微任务队列中的任务，执行完毕之后会执行宏任务队列中的任务，所以，本题最重要的就是要区分好宏任务是什么，微任务是什么，<span class="built_in">setTimeout</span>中的回调函数时宏任务，process.nextTick是微任务，所以执行顺序是上面的结果</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;		    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;		    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">&#125;); </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;5&#x27;</span>);</span><br><span class="line"><span class="comment">// 2 5 3 4 1</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>遇到setTimout，异步宏任务，放入宏任务队列中</span><br><span class="line"><span class="number">2.</span>遇到<span class="keyword">new</span> <span class="built_in">Promise</span>，<span class="keyword">new</span> <span class="built_in">Promise</span>在实例化的过程中所执行的代码都是同步进行的，所以输出<span class="number">2</span></span><br><span class="line"><span class="number">3.</span>而<span class="built_in">Promise</span>.then中注册的回调才是异步执行的，将其放入微任务队列中</span><br><span class="line"><span class="number">4.</span>遇到同步任务<span class="built_in">console</span>.log(‘<span class="number">5</span>’);输出<span class="number">5</span>；主线程中同步任务执行完</span><br><span class="line"><span class="number">5.</span>从微任务队列中取出任务到主线程中，输出<span class="number">3</span>、 <span class="number">4</span>，微任务队列为空</span><br><span class="line"><span class="number">6.</span>从宏任务队列中取出任务到主线程中，输出<span class="number">1</span>，宏任务队列为空</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span>&#123;</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    resolve();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;).then( <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Promise</span>.resolve().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;before timeout&#x27;</span>);</span><br><span class="line">    &#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">Promise</span>.resolve().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;also before timeout&#x27;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>遇到<span class="built_in">setTimeout</span>，异步宏任务，将() =&gt; &#123;<span class="built_in">console</span>.log(<span class="number">4</span>)&#125;放入宏任务队列中；</span><br><span class="line"><span class="number">2.</span>遇到<span class="keyword">new</span> <span class="built_in">Promise</span>，<span class="keyword">new</span> <span class="built_in">Promise</span>在实例化的过程中所执行的代码都是同步进行的，所以输出<span class="number">1</span>；</span><br><span class="line"><span class="number">3.</span>而<span class="built_in">Promise</span>.then中注册的回调才是异步执行的，将其放入微任务队列中</span><br><span class="line"><span class="number">4.</span>遇到同步任务<span class="built_in">console</span>.log(<span class="number">2</span>)，输出<span class="number">2</span>；主线程中同步任务执行完</span><br><span class="line"><span class="number">5.</span>从微任务队列中取出任务到主线程中，输出<span class="number">3</span>，此微任务中又有微任务，<span class="built_in">Promise</span>.resolve().then(微任务a).then(微任务b)，将其依次放入微任务队列中；</span><br><span class="line"><span class="number">6.</span>从微任务队列中取出任务a到主线程中，输出 before timeout；</span><br><span class="line"><span class="number">7.</span>从微任务队列中取出任务b到主线程中，任务b又注册了一个微任务c，放入微任务队列中；</span><br><span class="line"><span class="number">8.</span>从微任务队列中取出任务c到主线程中，输出 also before timeout；微任务队列为空</span><br><span class="line"><span class="number">9.</span>从宏任务队列中取出任务到主线程，此任务中注册了一个微任务d，将其放入微任务队列中，接下来遇到输出<span class="number">4</span>，宏任务队列为空</span><br><span class="line"><span class="number">10.</span>从微任务队列中取出任务d到主线程 ，输出test，微任务队列为空</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">    process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;4&#x27;</span>);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;6&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;7&#x27;</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;8&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;9&#x27;</span>);</span><br><span class="line">    process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;10&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;11&#x27;</span>);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;12&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 1 7 6 8 2 4 3 5 9 11 10 12</span></span><br></pre></td></tr></table></figure>
<h3 id="如何判断变量为-NaN-Not-a-Number，非数字"><a href="#如何判断变量为-NaN-Not-a-Number，非数字" class="headerlink" title="如何判断变量为 NaN( Not a Number，非数字)"></a>如何判断变量为 NaN( Not a Number，非数字)</h3><p>NaN不能用相等操作符(== 和 ===) 来判断， NaN === NaN 会返回 false<br>虽然 NaN 是“Not a Number”，但是它的类型还是数值类型</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过isNaN()判断,isNaN()会先将参数转为Number 类型</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="literal">NaN</span>)     <span class="comment">// 返回true</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="number">1000</span>)    <span class="comment">// 返回false</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="string">&#x27;小明&#x27;</span>)  <span class="comment">// 返回true（判断前会转换成number类型）</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="string">&#x27;101&#x27;</span>)   <span class="comment">// 返回false</span></span><br></pre></td></tr></table></figure>
<h3 id="null-和-undefined-区别"><a href="#null-和-undefined-区别" class="headerlink" title="null 和 undefined 区别"></a>null 和 undefined 区别</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">    总的来说 <span class="literal">null</span> 和 <span class="literal">undefined</span> 都代表空, <span class="literal">null</span>是一个关键字，表示一个空值的对象引用，<span class="literal">undefined</span>表示一个未定义的值，用作默认初始值</span><br><span class="line"><span class="comment">//typeof</span></span><br><span class="line">    <span class="keyword">typeof</span> <span class="literal">null</span>  <span class="comment">// &#x27;object&#x27;</span></span><br><span class="line">    <span class="keyword">typeof</span> <span class="literal">undefined</span>  <span class="comment">// &#x27;undefined&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// </span></span><br><span class="line">    <span class="keyword">let</span> a = <span class="literal">null</span> <span class="comment">// 显式地将a赋值给null</span></span><br><span class="line">    <span class="keyword">let</span> b;       <span class="comment">// b的默认值为undefined</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(a) <span class="comment">// 输出 null</span></span><br><span class="line">    <span class="built_in">console</span>.log(b) <span class="comment">// 输出 undefined</span></span><br><span class="line"><span class="comment">//== 与 ===</span></span><br><span class="line">    <span class="literal">null</span> == <span class="literal">undefined</span>  <span class="comment">// true</span></span><br><span class="line">    <span class="literal">null</span> === <span class="literal">undefined</span>  <span class="comment">// false</span></span><br><span class="line">    !!<span class="literal">null</span> === !!<span class="literal">undefined</span>  <span class="comment">// true</span></span><br><span class="line"><span class="comment">//+ 运算 与 Number()   </span></span><br><span class="line">    <span class="keyword">let</span> a = <span class="literal">undefined</span> + <span class="number">1</span>  <span class="comment">// NaN</span></span><br><span class="line">    <span class="keyword">let</span> b = <span class="literal">null</span> + <span class="number">1</span>  <span class="comment">// 1</span></span><br><span class="line">    <span class="built_in">Number</span>(<span class="literal">undefined</span>)  <span class="comment">// NaN</span></span><br><span class="line">    <span class="built_in">Number</span>(<span class="literal">null</span>)  <span class="comment">// 0 </span></span><br></pre></td></tr></table></figure>
<h3 id="JS实现继承的方式有哪些？"><a href="#JS实现继承的方式有哪些？" class="headerlink" title="JS实现继承的方式有哪些？"></a>JS实现继承的方式有哪些？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">构造函数继承 原型链继承 组合继承 寄生组合继承 ES6类(<span class="class"><span class="keyword">class</span>类)继承</span></span><br></pre></td></tr></table></figure>
<h3 id="内存中的堆和栈"><a href="#内存中的堆和栈" class="headerlink" title="内存中的堆和栈"></a>内存中的堆和栈</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">栈：先进后出，自动分配释放</span><br><span class="line">堆：先进先出，手动释放，容易内存泄漏</span><br><span class="line"></span><br><span class="line">基本数据类型：<span class="literal">null</span>、<span class="literal">undefined</span>、<span class="built_in">String</span>、<span class="built_in">Number</span>、<span class="built_in">Boolean</span>、<span class="built_in">Symbol</span>(ES6) 基本数据类型可以直接访问，</span><br><span class="line">按值进行分配，存放在**栈内存**中的简单数据段</span><br><span class="line">引用型：OBject，存放在**堆内存**中，实际栈保存的是一个指针，这个指针指向另一个位置（**堆内存**）</span><br></pre></td></tr></table></figure>
<h3 id="和-区别"><a href="#和-区别" class="headerlink" title="== 和 ===区别"></a>== 和 ===区别</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">相等操作符（==）不会判断数据类型，</span><br><span class="line"><span class="keyword">let</span> result1 = (<span class="string">&quot;55&quot;</span> == <span class="number">55</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">全等运算符(===)会判断数据类型</span><br><span class="line"><span class="keyword">let</span> result1 = (<span class="string">&quot;55&quot;</span> === <span class="number">55</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<h3 id="如何来区分js数据类型的-比如区分对象和数组"><a href="#如何来区分js数据类型的-比如区分对象和数组" class="headerlink" title="如何来区分js数据类型的?比如区分对象和数组"></a>如何来区分js数据类型的?比如区分对象和数组</h3><p>判断数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;1&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 toString 方式 （返回[object constructorName]的字符串格式）</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">Object</span>.prototype.toString.call(arr) === <span class="string">&#x27;[object Array]&#x27;</span> ) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用Array.isArray(arr) 来判断值是否为数组</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">Array</span>.isArray( arr ) ) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 instanceof 方式 （用来检测构造函数的prototype 属性是否出现在某个对象的原型链上）</span></span><br><span class="line"><span class="built_in">console</span>.log( arr <span class="keyword">instanceof</span> <span class="built_in">Array</span> ) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 constructor 方式  （constructor是prototype对象的一个属性，指向的是prototype属性所在的构造函数，可以判断数据类型）</span></span><br><span class="line"><span class="built_in">console</span>.log( arr.constructor === <span class="built_in">Array</span> ) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 __proto__ 方式（意思为实例的__proto__属性，是否指向构造函数的prototype属性） (PS: .__proto__前后两个下划线)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( arr.__proto__  === <span class="built_in">Array</span>.prototype ) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 isPrototypeOf 方式 （用于测试一个对象是否存在于另一个对象的原型链上）</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">Array</span>.prototype.isPrototypeOf( arr ) ) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用Object.getPrototypeOf 方式 （返回指定对象的原型，内部[[Prototype]]属性的值）</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">Object</span>.getPrototypeOf( arr ) === <span class="built_in">Array</span>.prototype ) <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<p>判断对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//toString 方式（返回[object constructorName]的字符串格式）</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">&#x27;[object object]&#x27;</span> ) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用instanceof关键字来判断（用来检测构造函数的prototype 属性是否出现在某个对象的原型链上）</span></span><br><span class="line"><span class="built_in">console</span>.log( obj <span class="keyword">instanceof</span> <span class="built_in">Object</span> ) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 constructor 来判断；（constructor是prototype对象的一个属性，指向的是prototype属性所在的构造函数，可以判断数据类型）</span></span><br><span class="line"><span class="built_in">console</span>.log( obj.constructor === <span class="built_in">Object</span> ) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用typeof 来判断（返回对应的数据类型，数组不行）</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="keyword">typeof</span> obj === <span class="string">&#x27;object&#x27;</span> ) <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">引用类型判断</span><br><span class="line"></span><br><span class="line">区别对象、数组、函数可以使用<span class="built_in">Object</span>.prototype.toString.call 方法。判断某个对象值属于哪种内置类型。</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="number">123</span>))          <span class="comment">// [object Number]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="string">&#x27;123&#x27;</span>))        <span class="comment">// [object String]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="literal">undefined</span>))    <span class="comment">// [object Undefined]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="literal">true</span>))         <span class="comment">// [object Boolean]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(&#123;&#125;))           <span class="comment">// [object Object]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call([]))           <span class="comment">// [object Array]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)) <span class="comment">// [object Function]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">this</span>));        <span class="comment">// [object Window]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="前端开发中常用的几种设计模式-参考1、参考2"><a href="#前端开发中常用的几种设计模式-参考1、参考2" class="headerlink" title="前端开发中常用的几种设计模式 参考1、参考2"></a>前端开发中常用的几种设计模式 <a href="https://blog.csdn.net/qq_32442973/article/details/119757216">参考1</a>、<a href="https://blog.csdn.net/caishijian2008/article/details/106215165">参考2</a></h3><p>设计模式可以分为三大类：</p>
<p>结构型模式(Structural Patterns): 通过识别系统中组件间的简单关系来简化系统的设计。<br>创建型模式(Creational Patterns): 处理对象的创建，根据实际情况使用合适的方式创建对象。常规的对象创建方式可能会导致设计上的问题，或增加设计的复杂度。创建型模式通过以某种方式控制对象的创建来解决问题。<br>行为型模式(Behavioral Patterns):用于识别对象之间常见的交互模式并加以实现，如此，增加了这些交互的灵活性</p>
<h3 id="单例模式——饿汉模式-amp-amp-懒汉模式"><a href="#单例模式——饿汉模式-amp-amp-懒汉模式" class="headerlink" title="单例模式——饿汉模式&amp;&amp;懒汉模式"></a>单例模式——<a href="https://blog.csdn.net/qq_42803467/article/details/119314946">饿汉模式&amp;&amp;懒汉模式</a></h3><p>什么是单例模式？<br>    单例模式是一种常见的“设计模式”</p>
<p>单例模式的应用场景<br>    某个类，不应该有多个实例，此时就可以使用单例模式（DataSource就是一个典型的案例，一一个程序中只有一个实例，不应该实例化多个DataSource对象）。如果尝试创建多个实例，编译期就会报错</p>
<p>两种典型的方式实现单例模式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//饿汉模式</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">singlePattern</span> </span>&#123;</span><br><span class="line">    <span class="comment">//先创建一个表示单例的类</span></span><br><span class="line">    <span class="comment">//我们就要求Singleton这个类只能有一个实例</span></span><br><span class="line">    <span class="comment">//饿汉模式的单例实现</span></span><br><span class="line">    <span class="comment">//饿汉模式的单例实现，“饿”指得是，只要类被加载，实例就会立刻创建（实例创建时机比较早）</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">        <span class="comment">//把 构造方法  变为私有，此时在该类外部，就无法 new 这个类的实例了</span></span><br><span class="line">        private <span class="function"><span class="title">Singleton</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//再来创建一个 static 的成员，表示Singleton 类唯一的实例</span></span><br><span class="line">        <span class="comment">//static 和 类相关，和实例无关，类在内存中只有一份，static 成员也就只有一份</span></span><br><span class="line">        <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        <span class="comment">//new没报错是因为Singleton类是singlePattern的内部类，singlePattern是可以访问内部类的private成员的</span></span><br><span class="line">        public <span class="keyword">static</span> Singleton <span class="function"><span class="title">getInstance</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">        public <span class="keyword">static</span> <span class="keyword">void</span> <span class="function"><span class="title">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>)</span> &#123;</span><br><span class="line">            <span class="comment">//此处得 getInstance 就是获取实例得唯一方式，不应该使用其他方式创建实例了</span></span><br><span class="line">            Singleton s = Singleton.getInstance();</span><br><span class="line">            Singleton s2 = Singleton.getInstance();</span><br><span class="line">            System.out.println(s == s2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">只要类被加载，就会立刻实例化Singleton实例，后续无论怎么操作，只要严格使用getInstance，就不会出现其他实例</span><br><span class="line"></span><br><span class="line"><span class="comment">//懒汉模式</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">lazyPattern</span> </span>&#123;</span><br><span class="line">    <span class="comment">//使用懒汉模式来实现，Singleton类被加载的时候，不会立刻实例化</span></span><br><span class="line">    <span class="comment">//等到第一次使用这个实例的时候，再实例化</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">        private <span class="keyword">static</span> Singleton instance = <span class="literal">null</span>;</span><br><span class="line">        </span><br><span class="line">        public <span class="keyword">static</span> Singleton <span class="function"><span class="title">getInstance</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">                instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> <span class="function"><span class="title">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>)</span> &#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">类被加载的时候，没有立刻被实例化，第一次调用getInstance的时候，才真正的实例化</span><br><span class="line"></span><br><span class="line">如果要是代码一整场都没有调用getInstance，此时实例化的过程也就被省略掉了，又称“延时加载”</span><br><span class="line"></span><br><span class="line">一般认为“懒汉模式” 比 “饿汉模式”效率更高。</span><br><span class="line"></span><br><span class="line">懒汉模式有很大的可能是“实例用不到”，此时就节省了实例化的开销</span><br></pre></td></tr></table></figure>
<h3 id="在数组对象中添加新字段的方法"><a href="#在数组对象中添加新字段的方法" class="headerlink" title="在数组对象中添加新字段的方法"></a>在数组对象中添加新字段的方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="comment">//1、Object.assign()</span></span><br><span class="line"><span class="keyword">var</span> arr = [</span><br><span class="line">    &#123;<span class="attr">age</span>:<span class="number">18</span>&#125;,   </span><br><span class="line">    &#123;<span class="attr">age</span>:<span class="number">30</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment">// 添加新字段</span></span><br><span class="line">arr.forEach(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">Object</span>.assign(item,&#123;<span class="attr">name</span>:<span class="string">&#x27;井空&#x27;</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">arr.forEach(<span class="function">(<span class="params">item , i</span>) =&gt;</span> &#123;</span><br><span class="line">    item[<span class="string">&#x27;name&#x27;</span>] =<span class="string">&#x27;井空&#x27;</span> <span class="comment">// 和item.name=&#x27;井空&#x27;是一样得</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br><span class="line"><span class="comment">//2、map() </span></span><br><span class="line">map正常情况下会跟<span class="keyword">return</span>结合使用，而map的作用就是重新整理数据结构</span><br><span class="line">有时候我们需要对后台传来的数据做一些处理，这时候使用map就可以得到想要的数据</span><br><span class="line"><span class="comment">//2.1、</span></span><br><span class="line"><span class="keyword">let</span> arr =[</span><br><span class="line">   &#123;<span class="attr">price</span>: <span class="string">&#x27;25&#x27;</span>&#125;,</span><br><span class="line">   &#123;<span class="attr">price</span>: <span class="string">&#x27;15&#x27;</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> _arr = [];</span><br><span class="line">arr.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//下面这行代码同样适合放在上面的forEach里面</span></span><br><span class="line">	_arr.push(<span class="built_in">Object</span>.assign(&#123;&#125;,item,&#123;<span class="attr">flag</span>: <span class="literal">false</span>&#125;)) <span class="comment">//注意这个‘&#123;&#125;’,添加时原数组arr不改变，去掉之后arr数组跟_arr数组数据一样，改变了</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr)  <span class="comment">// [&#123;price: &#x27;25&#x27;&#125;,&#123;price: &#x27;15&#x27;&#125;] </span></span><br><span class="line"><span class="built_in">console</span>.log(_arr) <span class="comment">// [&#123;price: &#x27;25&#x27;,flag: false&#125;,&#123;price: &#x27;15&#x27;,flag: false&#125;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.2、</span></span><br><span class="line"><span class="keyword">let</span> ar =[</span><br><span class="line">	&#123;<span class="attr">price</span>: <span class="string">&#x27;25&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">price</span>: <span class="string">&#x27;15&#x27;</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">as</span>=ar.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//解构item,且给item添加新的值 flag，键值（flag: false）</span></span><br><span class="line">    <span class="comment">//这里解构相当于把item里面的值都拿出来重新赋值</span></span><br><span class="line">    <span class="keyword">return</span> &#123; ...item, <span class="attr">flag</span>: <span class="literal">false</span> &#125; <span class="comment">//forEach不能return，这句不适合</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(ar,<span class="string">&#x27;ar&#x27;</span>) <span class="comment">// [&#123;price: &#x27;25&#x27;&#125;,&#123;price: &#x27;15&#x27;&#125;] </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">as</span>,<span class="string">&#x27;as&#x27;</span>) <span class="comment">// [&#123;price: &#x27;25&#x27;,flag: false&#125;,&#123;price: &#x27;15&#x27;,flag: false&#125;]</span></span><br><span class="line"><span class="comment">// 原数组ar不改变</span></span><br></pre></td></tr></table></figure>
<h3 id="forEach用什么方法结束"><a href="#forEach用什么方法结束" class="headerlink" title="forEach用什么方法结束"></a>forEach用什么方法结束</h3><p>正常终止for循环，我们可以使用break关键字来实现；</p>
<p>forEach循环，不能使用break和continue这两个关键字；</p>
<p>因为这两个关键字要在循环中使用，而forEach中所执行的是callback，callback是个函数所以不能使用；</p>
<p>使用 return 的话，只能跳出本次循环执行下一次循环，并不会终止forEach循环；</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//运用抛出异常（try catch）：throw new Error(&#x27;error message&#x27;);</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.txt.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!item.name) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;单课不能为空！&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!item.val) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;上课老师不能为空！&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!item.date) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;上架时间不能为空！&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">this</span>.$message.warning(e.message)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="伪数组-转化为真数组"><a href="#伪数组-转化为真数组" class="headerlink" title="伪数组 转化为真数组"></a>伪数组 转化为真数组</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>); <span class="comment">//Arguments显示的也有方括号 [1,2,3,4,5...] ，但是后面多了一些其他方法；也有length属性，但没有数组的push，pop等那些方法，像数组又不是数组 ，[[prototype]]可以看到arguments伪数组的原型指向的是Object对象， 真数组的__proto__指向的是Array数组</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//ES6语法 拓展运算符</span></span><br><span class="line">    <span class="keyword">let</span> newArr=[...arguments]</span><br><span class="line">    <span class="comment">//ES6的Array.from</span></span><br><span class="line">    <span class="keyword">let</span> newArr=<span class="built_in">Array</span>.from(<span class="built_in">arguments</span>)</span><br><span class="line">    <span class="comment">//利用Array的原型对象的slice方法，配合call()方法修改slice中this指向</span></span><br><span class="line">    <span class="comment">//slice原本是数组的截取子数组的方法，这里给数组的原型对象方法slice的指向强制改成arguments</span></span><br><span class="line">    <span class="keyword">let</span> newArr= <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="扩展符”…”"><a href="#扩展符”…”" class="headerlink" title="扩展符”…”"></a>扩展符”…”</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在对象中的应用</span></span><br><span class="line"><span class="comment">//合并对象</span></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;<span class="attr">a</span>:<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;<span class="attr">b</span>:<span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> obj3 =&#123;...obj1,...obj2)&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj3) <span class="comment">// &#123;a:1,b:2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//给对象赋默认值</span></span><br><span class="line"><span class="keyword">var</span> obj_1 = &#123;<span class="attr">a</span>: <span class="number">1</span>,<span class="attr">b</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">var</span> obj_2 = &#123;</span><br><span class="line">     ...obj_1,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj_2); &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">3</span>&#125; <span class="comment">//合并的对象中有相同的属性会覆盖</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>: <span class="string">&#x27;name&#x27;</span>,<span class="attr">age</span>: <span class="number">18</span>,<span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">console</span>.log(&#123; ...obj&#125;); <span class="comment">//&#123;name: &#x27;name&#x27;,age: 18,sex: &#x27;男&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id><a href="#" class="headerlink" title="?? / ?. / || / !! /"></a>?? / ?. / || / !! /</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// ?.应用场景,多级嵌套</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr_obj = [&#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;product&#x27;</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;product&#x27;</span>,</span><br><span class="line">            <span class="attr">children</span>: [</span><br><span class="line">                &#123;<span class="attr">id</span>: <span class="string">&#x27;3&#x27;</span>,<span class="attr">name</span>: <span class="string">&#x27;subitem1&#x27;</span>,<span class="attr">type</span>: <span class="string">&#x27;subitem&#x27;</span>,</span><br><span class="line">                    <span class="attr">children</span>: [],</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;<span class="attr">id</span>: <span class="string">&#x27;4&#x27;</span>,<span class="attr">name</span>: <span class="string">&#x27;item2&#x27;</span>,<span class="attr">type</span>: <span class="string">&#x27;item&#x27;</span>,</span><br><span class="line">                    <span class="attr">children</span>: [</span><br><span class="line">                        &#123;<span class="attr">id</span>: <span class="string">&#x27;5&#x27;</span>,<span class="attr">name</span>: <span class="string">&#x27;subitem3&#x27;</span>,<span class="attr">type</span>: <span class="string">&#x27;subitem&#x27;</span>,<span class="attr">children</span>: [],&#125;</span><br><span class="line">                    ],</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;<span class="attr">id</span>: <span class="string">&#x27;5&#x27;</span>,<span class="attr">name</span>: <span class="string">&#x27;item3&#x27;</span>,<span class="attr">type</span>: <span class="string">&#x27;item&#x27;</span>,</span><br><span class="line">                    <span class="attr">children</span>: [</span><br><span class="line">                        &#123;<span class="attr">id</span>: <span class="string">&#x27;6&#x27;</span>,<span class="attr">name</span>: <span class="string">&#x27;subitem7&#x27;</span>,<span class="attr">type</span>: <span class="string">&#x27;subitem&#x27;</span>,</span><br><span class="line">                            children[]</span><br><span class="line">                        &#125;, </span><br><span class="line">                    ],</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;<span class="attr">id</span>: <span class="string">&#x27;2&#x27;</span>,<span class="attr">name</span>: <span class="string">&#x27;group&#x27;</span>,<span class="attr">type</span>: <span class="string">&#x27;group&#x27;</span>,</span><br><span class="line">                    <span class="attr">children</span>: [</span><br><span class="line">                        &#123;<span class="attr">id</span>: <span class="string">&#x27;10&#x27;</span>,<span class="attr">name</span>: <span class="string">&#x27;product1&#x27;</span>,<span class="attr">type</span>: <span class="string">&#x27;product&#x27;</span>,</span><br><span class="line">                        <span class="attr">children</span>: [</span><br><span class="line">                            &#123;<span class="attr">id</span>: <span class="string">&#x27;11&#x27;</span>,<span class="attr">name</span>: <span class="string">&#x27;subitem1&#x27;</span>,<span class="attr">type</span>: <span class="string">&#x27;subitem&#x27;</span>,</span><br><span class="line">                                <span class="attr">children</span>: [],</span><br><span class="line">                            &#125;,</span><br><span class="line">                            &#123;<span class="attr">id</span>: <span class="string">&#x27;12&#x27;</span>,<span class="attr">name</span>: <span class="string">&#x27;item3&#x27;</span>,<span class="attr">type</span>: <span class="string">&#x27;item&#x27;</span>,</span><br><span class="line">                                <span class="attr">children</span>: [</span><br><span class="line">                                    &#123;<span class="attr">name</span>: <span class="string">&#x27;subitem5&#x27;</span>,<span class="attr">id</span>: <span class="string">&#x27;18&#x27;</span>,<span class="attr">type</span>: <span class="string">&#x27;subitem&#x27;</span>,&#125; </span><br><span class="line">                                ],</span><br><span class="line">                            &#125;</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;]</span><br><span class="line">		<span class="comment">// 现在从上面的数组中，检查每个对象的类型，</span></span><br><span class="line">		<span class="comment">// 如果类型是product或group，添加property disabled true，</span></span><br><span class="line">		<span class="comment">// 如果不是添加property disabled false</span></span><br><span class="line">        <span class="keyword">const</span> handleLoop = <span class="function">(<span class="params">array</span>) =&gt;</span> array.map(<span class="function">(<span class="params">elem</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                ...elem,</span><br><span class="line">                ...(elem.children &amp;&amp; &#123;<span class="attr">children</span>: handleLoop(elem.children)&#125;), <span class="comment">//递归</span></span><br><span class="line">                <span class="attr">disabled</span>: elem ?.type === <span class="string">&quot;product&quot;</span> || elem ?.type === <span class="string">&quot;group&quot;</span> ? <span class="literal">true</span> : <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">console</span>.log(handleLoop(arr_obj))</span><br></pre></td></tr></table></figure>
<h3 id="数组方法汇总"><a href="#数组方法汇总" class="headerlink" title="数组方法汇总"></a>数组方法汇总</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">map 循环遍历数组、返回一个新的数组</span><br><span class="line"></span><br><span class="line">forEach 循环遍历数组，不改变原数组, forEach不能<span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">push/pop 在数组的末尾添加/删除元素  改变原数组</span><br><span class="line"></span><br><span class="line">unshift/ shift 在数组的头部添加/删除元素，改变原数组</span><br><span class="line"></span><br><span class="line">join  把数组转化为字符串</span><br><span class="line"></span><br><span class="line">some  有一项返回为<span class="literal">true</span>，则整体为<span class="literal">true</span>,类似于indexOf 只要数组某个元素符合条件，则返回<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">every  有一项返回为<span class="literal">true</span>，则整体为<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">filter 数组过滤,通常也是跟<span class="keyword">return</span>使用，当回调函数返回 <span class="literal">true</span> 就留下来</span><br><span class="line"></span><br><span class="line">slice(start, end)  数组截取，包括开头，不包括截取，返回一个新的数组</span><br><span class="line"></span><br><span class="line">splice(start, number, value)  删除数组元素，改变原数组</span><br><span class="line"></span><br><span class="line">indexof/lastindexof： 查找数组项，返回对应的下标</span><br><span class="line"></span><br><span class="line">concat：数组的拼接，不影响原数组，浅拷贝</span><br><span class="line"></span><br><span class="line">sort：数组排序 改变原数组</span><br><span class="line"></span><br><span class="line">reverse： 数组反转，改变原数组</span><br></pre></td></tr></table></figure>
<h3 id="数组常用方法"><a href="#数组常用方法" class="headerlink" title="数组常用方法"></a>数组常用方法</h3><p><strong>增</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">push()    添加末尾, 并返回新的数组长度。<span class="string">&quot;原数组改变&quot;</span></span><br><span class="line">unshift() 开头添加, 并返回新的数组长度。<span class="string">&quot;原数组改变&quot;</span></span><br><span class="line">concat(arr1,arr2, ...)  合并两个或多个数组，生成一个新的数组。’原数组不变‘</span><br></pre></td></tr></table></figure>
<p><strong>删</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pop()   删除并<span class="string">&quot;返回&quot;</span>数组的最后一个元素,若该数组为空，则返回<span class="literal">undefined</span>。<span class="string">&quot;原数组改变&quot;</span></span><br><span class="line">shift() 删除数组的第一项,并<span class="string">&quot;返回&quot;</span>第一个元素的值,若该数组为空，则返回<span class="literal">undefined</span>。<span class="string">&quot;原数组改变&quot;</span></span><br><span class="line">splice() 传入两个参数，分别是开始位置，删除元素的数量，<span class="string">&quot;返回&quot;</span>包含删除元素的数组。 <span class="string">&quot;原数组改变&quot;</span></span><br><span class="line">slice()  按照条件查找出其中的部分内容，’原数组不变‘</span><br></pre></td></tr></table></figure>
<p><strong>改</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">即修改原来数组的内容，常用splice</span><br><span class="line"></span><br><span class="line">传入三个参数，分别是开始位置，要删除元素的数量，要插入的任意多个元素，返回删除元素的数组，对原数组产生影响</span><br></pre></td></tr></table></figure>
<p><strong>查</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">即查找元素，返回元素坐标或者元素值</span><br><span class="line"></span><br><span class="line">indexOf() 返回要查找的元素在数组中的位置，如果没找到则返回 -<span class="number">1</span>,’原数组不变‘</span><br><span class="line">includes() 返回要查找的元素在数组中的位置，找到返回<span class="literal">true</span>，否则<span class="literal">false</span>,’原数组不变‘</span><br><span class="line">find() 返回第一个匹配的元素</span><br></pre></td></tr></table></figure>
<p><strong>分割</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">join() 将数组的每一项用指定字符连接形成一个字符串。默认连接字符为 “,” 逗号</span><br></pre></td></tr></table></figure>
<p><strong>迭代方法</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">常用来迭代数组的方法（都不改变原数组）有如下：</span><br><span class="line"></span><br><span class="line">some() 对数组中的每一项进行判断，若都不符合则返回<span class="literal">false</span>，否则返回<span class="literal">true</span>，(如果有一项函数返回 <span class="literal">true</span> ，则这个方法返回 <span class="literal">true</span>)</span><br><span class="line">every() 对数组中的每一项进行判断，若都符合则返回<span class="literal">true</span>，否则返回<span class="literal">false</span></span><br><span class="line">forEach() 用于调用数组的每个元素，并将元素传递给回调函数。’原数组不变‘</span><br><span class="line">filter() 过滤数组中，符合条件的元素并返回一个新的数组</span><br><span class="line">map() 原数组的每一项执行函数后，返回一个新的数组 ’原数组不变‘</span><br></pre></td></tr></table></figure>
<p><strong>reduce</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。</span><br><span class="line">语法：</span><br><span class="line">    arr.reduce( <span class="function"><span class="keyword">function</span> (<span class="params"> prev, cur, index, arr </span>)</span>&#123;   </span><br><span class="line">        一系列操作</span><br><span class="line">    &#125;, init);</span><br><span class="line">    <span class="comment">//箭头写法</span></span><br><span class="line">    arr.reduce( <span class="function">(<span class="params"> prev, cur, index, arr </span>) =&gt;</span> &#123;   </span><br><span class="line">        一系列操作</span><br><span class="line">    &#125;, init);</span><br><span class="line"></span><br><span class="line">prev： 必需(初始值, 或者计算结束后的返回值)；</span><br><span class="line">cur： 必需(当前元素)；</span><br><span class="line">index： 可选(当前元素的索引)；</span><br><span class="line">arr：可选(当前元素所属的数组对象)；</span><br><span class="line">init： 可选(传递给函数的初始值)；</span><br><span class="line"></span><br><span class="line">场景一：数组累加、累乘</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr1.reduce(<span class="function">(<span class="params">x,y</span>)=&gt;</span>x+y));<span class="comment">// 15</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1.reduce(<span class="function">(<span class="params">x,y</span>)=&gt;</span>x*y));<span class="comment">// 120</span></span><br><span class="line"></span><br><span class="line">场景二：计算数组中每个元素出现的次数</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;a&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> num = arr2.reduce(<span class="function">(<span class="params">prev,cur</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cur <span class="keyword">in</span> prev)&#123;<span class="comment">//如果prev(初始对象)包含cur(当前元素),数量累加</span></span><br><span class="line">        prev[cur]++</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        prev[cur] = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prev</span><br><span class="line">&#125;,&#123;&#125;);<span class="comment">//初始值需要设置一个空的对象</span></span><br><span class="line"><span class="built_in">console</span>.log(num);<span class="comment">// &#123;a: 4, b: 3, c: 2, d: 1&#125;</span></span><br><span class="line"></span><br><span class="line">场景三：数组去重</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr3 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]</span><br><span class="line"><span class="keyword">let</span> remo = arr3.reduce(<span class="function">(<span class="params">prev,cur</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(prev.indexOf(cur)==-<span class="number">1</span>)&#123;<span class="comment">//如果prev没找到cur</span></span><br><span class="line">        <span class="keyword">return</span> prev.concat(cur)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> prev</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// if(!prev.includes(cur))&#123;//如果prev不包含cur</span></span><br><span class="line">    <span class="comment">//     return prev.concat(cur)</span></span><br><span class="line">    <span class="comment">// &#125;else&#123;</span></span><br><span class="line">    <span class="comment">//     return prev</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;,[]);<span class="comment">// 初始值设置一个空数组</span></span><br><span class="line"><span class="built_in">console</span>.log(remo);<span class="comment">// [1,2,3,4]</span></span><br><span class="line"></span><br><span class="line">场景四：将二维数组转化为一维数组</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr4 = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]]</span><br><span class="line"><span class="keyword">let</span> newArr1 = arr4.reduce(<span class="function">(<span class="params">prev,cur</span>)=&gt;</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> prev.concat(cur)</span><br><span class="line"> &#125;,[])</span><br><span class="line"> <span class="built_in">console</span>.log(newArr1); <span class="comment">// [0, 1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line">场景五：将多维数组转化为一维数组</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr5 = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>,[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]]]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newArr</span>(<span class="params">arr5</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr5.reduce(<span class="function">(<span class="params">prev,cur</span>)=&gt;</span>prev.concat(<span class="built_in">Array</span>.isArray(cur)?newArr(cur):cur),[])</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(newArr(arr5)); <span class="comment">//[0, 1, 2, 3, 4, 5, 6, 7, 8]</span></span><br><span class="line"></span><br><span class="line">场景六：求数组中最大的值</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr7 = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">12</span>]</span><br><span class="line"><span class="keyword">let</span> maxNum = arr7.reduce(<span class="function">(<span class="params">prev,cur</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(prev,cur);<span class="comment">// Math.max方法可以求出给定参数中最大的数,Math.min方法可以求出给定参数中最小的数</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(maxNum);<span class="comment">// 12</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>冒泡排序</strong><br>冒泡排序（Bubble Sort） 一种交换排序方法，通过比较两两相邻的元素，按照升序或者降序的规则进行位置的替换，需要使用到双层循环遍历，每遍历一圈只会对对一个数值进行排序，总共需要遍历n-1次</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="comment">/* 1. 从当前元素起，向后依次比较每一对相邻元素，若逆序则交换 */</span></span><br><span class="line"><span class="comment">/* 2. 对所有元素均重复以上步骤，直至最后一个元素 */</span></span><br><span class="line"><span class="comment">/* int* a: 排序目标数组; int n: 元素个数 */</span></span><br><span class="line"><span class="keyword">void</span> <span class="function"><span class="title">BubbleSort</span>(<span class="params">int* a, int n</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (int i=<span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)&#123;<span class="comment">//n个数比较n-1次,总共比较n-1次</span></span><br><span class="line">	</span><br><span class="line">		<span class="keyword">for</span> (int j=<span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++)&#123;<span class="comment">//每次比较n-i-1的左右大小判断是否交换</span></span><br><span class="line">		</span><br><span class="line">			<span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>])&#123;</span><br><span class="line"></span><br><span class="line">				int temp = a[j];</span><br><span class="line">				a[j] = a[j+<span class="number">1</span>];</span><br><span class="line">				a[j + <span class="number">1</span>] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>快速排序</strong><br>通过一趟排序将待排序列以枢轴为标准划分成两部分，使其中一部分记录的关键字均比另一部分小，再分别对这两部分进行快速排序，以达到整个序列有序</p>
<p>第一步：找基准，采用二分的方式，从数组中找一个基数元素(一般就取第一个元素为基数)将一串数据分为两串；</p>
<p>第二步：分区，重新排列数组，将小于基数的元素放左边，大于基数的元素放右边，相同的值放任意位置，使得基数成为中间元素；</p>
<p>第三步：递归，将两个组的元素分别进行排序</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//快速排序</span></span><br><span class="line"><span class="comment">//一趟快速排序的描述，取一个枢纽,排序好比它小的左边，大的右边，并且返回这个值的指针</span></span><br><span class="line"></span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<p><strong>倒序</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">reverse() 将数组倒序。<span class="string">&quot;原数组改变&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>数组排序</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sort(首元素地址(必填), 尾元素地址的下一个地址(必填), 比较函数(非必填));</span><br><span class="line">如果直接sort（数组名），则从小到大排序（即升序），以下为倒叙</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">30</span>,<span class="number">10</span>,<span class="number">111</span>,<span class="number">35</span>,<span class="number">50</span>,<span class="number">45</span>];</span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> b - a; <span class="comment">//从大到小</span></span><br><span class="line">    <span class="comment">// return a - b; //从小到大</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//输出 [111, 50, 45, 35, 30, 10]</span></span><br></pre></td></tr></table></figure>
<p><strong>数组去重</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>）利用ES6 <span class="built_in">Set</span>去重（ES6中最常用）</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">unique</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="literal">NaN</span>, <span class="literal">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line">    <span class="built_in">console</span>.log(unique(arr))</span><br><span class="line">    <span class="comment">//[1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;&#125;, &#123;&#125;]</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>）利用<span class="keyword">for</span>嵌套<span class="keyword">for</span>，然后splice去重（ES5中最常用）</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;            </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> j=i+<span class="number">1</span>; j&lt;arr.length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[i]==arr[j])&#123;         <span class="comment">//第一个等同于第二个，splice方法删除第二个</span></span><br><span class="line">                    arr.splice(j,<span class="number">1</span>);</span><br><span class="line">                    j--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="literal">NaN</span>, <span class="literal">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line">    <span class="built_in">console</span>.log(unique(arr))</span><br><span class="line">    <span class="comment">//[1, &quot;true&quot;, 15, false, undefined, NaN, NaN, &quot;NaN&quot;, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]     //NaN和&#123;&#125;没有去重，两个null直接消失了</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>）利用indexOf去重</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(arr)) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;type error!&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> array = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array .indexOf(arr[i]) === -<span class="number">1</span>) &#123;</span><br><span class="line">                array .push(arr[i])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="literal">NaN</span>, <span class="literal">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line">    <span class="built_in">console</span>.log(unique(arr))</span><br><span class="line">    <span class="comment">// [1, &quot;true&quot;, true, 15, false, undefined, null, NaN, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]  //NaN、&#123;&#125;没有去重</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>）利用includes</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(arr)) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;type error!&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> array =[];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>( !array.includes( arr[i]) ) &#123;<span class="comment">//includes 检测数组是否有某个值</span></span><br><span class="line">                        array.push(arr[i]);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="literal">NaN</span>, <span class="literal">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line">    <span class="built_in">console</span>.log(unique(arr))</span><br><span class="line">    <span class="comment">//[1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]     //&#123;&#125;没有去重</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//箭头写法</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>）<span class="keyword">let</span> uniqueOne = <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr)) <span class="built_in">console</span>.log(uniqueOne)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>) <span class="keyword">let</span> uniqueTwo = <span class="function"><span class="params">arr</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(); <span class="comment">//或者用空对象 let obj = &#123;&#125; 利用对象属性不能重复得特性</span></span><br><span class="line">    <span class="keyword">let</span> brr = []</span><br><span class="line">    arr.forEach( <span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(!map.has(item)) &#123; <span class="comment">//如果是对象得话就判断 !obj[item]</span></span><br><span class="line">            map.set(item,<span class="literal">true</span>) <span class="comment">//如果是对象得话就obj[item] =true 其他一样</span></span><br><span class="line">            brr.push(item)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> brr</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(uniqueTwo(arr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>）<span class="keyword">let</span> uniqueThree = <span class="function"><span class="params">arr</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> brr = []</span><br><span class="line">    arr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 使用indexOf 返回数组是否包含某个值 没有就返回-1 有就返回下标</span></span><br><span class="line">        <span class="keyword">if</span>(brr.indexOf(item) === -<span class="number">1</span>) brr.push(item)</span><br><span class="line">        <span class="comment">// 或者使用includes 返回数组是否包含某个值 没有就返回false 有就返回true</span></span><br><span class="line">        <span class="keyword">if</span>(!brr.includes(item)) brr.push(item)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> brr</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(uniqueThree(arr))</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>）<span class="keyword">let</span> uniqueFour = <span class="function"><span class="params">arr</span> =&gt;</span> &#123;                                         </span><br><span class="line">     <span class="comment">// 使用 filter 返回符合条件的集合</span></span><br><span class="line">    <span class="keyword">let</span> brr = arr.filter(<span class="function">(<span class="params">item,index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> arr.indexOf(item) === index</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> brr</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(uniqueFour(arr))</span><br></pre></td></tr></table></figure>
<h3 id="bind、call、apply-区别"><a href="#bind、call、apply-区别" class="headerlink" title="bind、call、apply 区别"></a>bind、call、apply 区别</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">相同点：</span><br><span class="line"><span class="number">1.</span>都是用来改变函数的<span class="built_in">this</span>对象的指向的。</span><br><span class="line"><span class="number">2.</span>第一个参数都是<span class="built_in">this</span>要指向的对象。</span><br><span class="line"><span class="number">3.</span>都可以利用后续参数传参</span><br><span class="line"></span><br><span class="line">区别：</span><br><span class="line"><span class="number">1.</span>fn.call(obj, arg1, arg2, …),调用一个函数, 第一个参数为要改变的<span class="built_in">this</span>，第二个参数为要传递的参数，参数与方法中是一一对应的。</span><br><span class="line"><span class="number">2.</span>fn.apply(obj, [argsArray]),第一个参数为要改变的<span class="built_in">this</span>，第二个参数为要传递的参数作为一个数组（或类数组对象）提供的参数</span><br><span class="line"><span class="number">3.</span>bind 和call/apply 有一个很重要的区别，一个函数被 call/apply 的时候，会直接调用，但是bind 会创建一个新函数。当这个新函数被调用时，bind() 的第一个参数将作为它运行时的 <span class="built_in">this</span>，之后的一序列参数将会在传递的实参前传入作为它的参数</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xw = &#123;</span><br><span class="line">        <span class="attr">name</span> : <span class="string">&quot;小王&quot;</span>,</span><br><span class="line">        <span class="attr">gender</span> : <span class="string">&quot;男&quot;</span>,</span><br><span class="line">        <span class="attr">age</span> : <span class="number">24</span>,</span><br><span class="line">        <span class="attr">say</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                alert(<span class="built_in">this</span>.name + <span class="string">&quot; , &quot;</span> + <span class="built_in">this</span>.gender + <span class="string">&quot; ,今年&quot;</span> + <span class="built_in">this</span>.age);                                </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> xh = &#123;</span><br><span class="line">        <span class="attr">name</span> : <span class="string">&quot;小红&quot;</span>,</span><br><span class="line">        <span class="attr">gender</span> : <span class="string">&quot;女&quot;</span>,</span><br><span class="line">        <span class="attr">age</span> : <span class="number">18</span></span><br><span class="line">    &#125;</span><br><span class="line">    xw.say(); <span class="comment">//小王 ， 男 ， 今年24</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如何用xw的say方法来显示xh的数据</span></span><br><span class="line">    xw.say.call(xh);</span><br><span class="line"></span><br><span class="line">    xw.say.apply(xh);</span><br><span class="line"></span><br><span class="line">    xw.say.bind(xh)();</span><br><span class="line"><span class="comment">//如果直接写xw.say.bind(xh)是不会有任何结果的,call和apply都是对函数的直接调用，而bind方法返回的仍然是一个函数，因此后面还需要()来进行调用才可以</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line">       <span class="keyword">var</span> xw = &#123;</span><br><span class="line">            <span class="attr">name</span> : <span class="string">&quot;小王&quot;</span>,</span><br><span class="line">            <span class="attr">gender</span> : <span class="string">&quot;男&quot;</span>,</span><br><span class="line">            <span class="attr">age</span> : <span class="number">24</span>,</span><br><span class="line">            <span class="attr">say</span> : <span class="function"><span class="keyword">function</span>(<span class="params">school,grade</span>) </span>&#123;</span><br><span class="line">                    alert(<span class="built_in">this</span>.name + <span class="string">&quot; , &quot;</span> + <span class="built_in">this</span>.gender + <span class="string">&quot; ,今年&quot;</span> + <span class="built_in">this</span>.age + <span class="string">&quot; ,在&quot;</span> + school + <span class="string">&quot;上&quot;</span> + grade);                                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> xh = &#123;</span><br><span class="line">            <span class="attr">name</span> : <span class="string">&quot;小红&quot;</span>,</span><br><span class="line">            <span class="attr">gender</span> : <span class="string">&quot;女&quot;</span>,</span><br><span class="line">            <span class="attr">age</span> : <span class="number">18</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//可以看到say方法多了两个参数，我们通过call/apply的参数进行传参</span></span><br><span class="line">        xw.say.call(xh,<span class="string">&quot;实验小学&quot;</span>,<span class="string">&quot;六年级&quot;</span>); </span><br><span class="line"></span><br><span class="line">        xw.say.apply(xh,[<span class="string">&quot;实验小学&quot;</span>,<span class="string">&quot;六年级&quot;</span>]);</span><br><span class="line"><span class="comment">//call后面的参数与say方法中是一一对应的，而apply的第二个参数是一个数组，数组中的元素是和say方法中一一对应，这就是两者最大的区别</span></span><br><span class="line"><span class="comment">//但是由于bind返回的仍然是一个函数，所以我们还可以在调用的时候再进行传参</span></span><br><span class="line">        xw.say.bind(xh)(<span class="string">&quot;实验小学&quot;</span>,<span class="string">&quot;六年级&quot;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="本地存储的方式有哪些？区别及应用场景？"><a href="#本地存储的方式有哪些？区别及应用场景？" class="headerlink" title="本地存储的方式有哪些？区别及应用场景？"></a>本地存储的方式有哪些？区别及应用场景？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">javaScript本地缓存的方法我们主要讲述以下四种：</span><br><span class="line"></span><br><span class="line">cookie</span><br><span class="line">sessionStorage</span><br><span class="line"><span class="built_in">localStorage</span></span><br><span class="line">indexedDB</span><br><span class="line">区别</span><br><span class="line">关于cookie、sessionStorage、<span class="built_in">localStorage</span>三者的区别主要如下：</span><br><span class="line"></span><br><span class="line">存储大小：cookie数据大小不能超过4k，sessionStorage和<span class="built_in">localStorage</span>虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大</span><br><span class="line">有效时间：<span class="built_in">localStorage</span>存储持久数据，浏览器关闭后数据不丢失除非主动删除数据； sessionStorage数据在当前浏览器窗口关闭后自动删除；cookie设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭</span><br><span class="line">数据与服务器之间的交互方式，cookie的数据会自动的传递到服务器，服务器端也可以写cookie到客户端； sessionStorage和<span class="built_in">localStorage</span>不会自动把数据发给服务器，仅在本地保存</span><br><span class="line">应用场景</span><br><span class="line">在了解了上述的前端的缓存方式后，我们可以看看针对不对场景的使用选择：</span><br><span class="line"></span><br><span class="line">标记用户与跟踪用户行为的情况，推荐使用cookie</span><br><span class="line">适合长期保存在本地的数据（令牌），推荐使用<span class="built_in">localStorage</span></span><br><span class="line">敏感账号一次性登录，推荐使用sessionStorage</span><br><span class="line">存储大量数据的情况、在线文档（富文本编辑器）保存编辑历史的情况，推荐使用indexedDB</span><br></pre></td></tr></table></figure>
<h3 id="闭包？闭包使用场景-和-什么是立即执行函数"><a href="#闭包？闭包使用场景-和-什么是立即执行函数" class="headerlink" title="闭包？闭包使用场景 和 什么是立即执行函数?"></a>闭包？闭包使用场景 和 什么是立即执行函数?</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">理解: 闭包就是函数中包含另一个函数，内部函数可以引用外部函数的参数和变量，参数和变量不会被垃圾回收机制收回</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//访问道这个a</span></span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="string">&#x27;hello&#x27;</span>);   <span class="comment">//调用外部的函数</span></span><br><span class="line">fn(<span class="string">&#x27;hello&#x27;</span>)()  <span class="comment">//调用内部函数</span></span><br><span class="line"></span><br><span class="line">闭包: 定义在一个函数内部的函数（方法里面返回方法）。</span><br><span class="line">闭包的使用场景：settimeout、回调、函数防抖、封装私有变量</span><br><span class="line"></span><br><span class="line">过多使用会导致内存泄漏的问题</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">立即执行函数：声明一个函数，并马上调用这个匿名函数就叫做立即执行函数；</span><br><span class="line">立即执行函数的作用：</span><br><span class="line">	<span class="number">1.</span>不必为函数命名，避免了污染全局变量。</span><br><span class="line">	<span class="number">2.</span>立即执行函数内部形成了一个单独的作用域，可以封装一些外部无法读取的私有变量。</span><br><span class="line">	<span class="number">3.</span>封装变量。</span><br></pre></td></tr></table></figure>
<h3 id="深拷贝浅拷贝的区别？"><a href="#深拷贝浅拷贝的区别？" class="headerlink" title="深拷贝浅拷贝的区别？"></a>深拷贝浅拷贝的区别？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">（理解：b拷贝了a,如果b变了，a跟着变，那就是浅拷贝；b变了，a没变，那就是深拷贝）</span><br><span class="line"></span><br><span class="line">浅拷贝</span><br><span class="line">如果当数组或对象中的值是<span class="string">`基本类型数据`</span>，那拷贝后的数据和原数据是完全没有关联，且互不影响的两个数据，</span><br><span class="line">如果数组或对象的值是<span class="string">`引用类型数据`</span>的话，拷贝后的数组或对象中的引用类型的值跟原数据中的引用类型的值，还是会保持共同的内存地址</span><br><span class="line"></span><br><span class="line">在JavaScript中，存在浅拷贝的现象有：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、<span class="built_in">Object</span>.assign</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---当对象为基本类型数据</span></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">	<span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>，</span><br><span class="line">	<span class="attr">age</span>: <span class="string">&#x27;14&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="built_in">Object</span>.assign(&#123;&#125;, obj1);</span><br><span class="line">obj2.age = <span class="string">&#x27;23&#x27;</span>;</span><br><span class="line">obj2.sex = <span class="string">&#x27;女&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj1); <span class="comment">// &#123; sex: &#x27;男&#x27;, age: &#x27;14&#x27; &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2); <span class="comment">// &#123; sex: &#x27;女&#x27;, age: &#x27;23&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//---当对象引用类型数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj3 = &#123;</span><br><span class="line">	<span class="attr">person</span>: &#123;<span class="attr">name</span>: <span class="string">&quot;完美&quot;</span>&#125;,</span><br><span class="line">	<span class="attr">age</span>: <span class="string">&#x27;14&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> obj4 = <span class="built_in">Object</span>.assign(&#123;&#125;, obj3);</span><br><span class="line">obj4.person.name = <span class="string">&quot;哈哈哈&quot;</span>;</span><br><span class="line">obj4.age = <span class="string">&#x27;23&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj3); <span class="comment">// &#123; person: &#123; name: &#x27;哈哈哈&#x27;&#125;, age: &#x27;14&#x27; &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj4); <span class="comment">// &#123; person: &#123; name: &#x27;哈哈哈&#x27;&#125;, age: &#x27;23&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、<span class="built_in">Array</span>.prototype.slice()</span><br><span class="line"></span><br><span class="line"><span class="comment">//---当数组基本类型数据</span></span><br><span class="line"><span class="keyword">let</span> a1 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> a2 = a1.slice();  	</span><br><span class="line">a2[<span class="number">0</span>] = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a1);<span class="comment">// [1, 2]</span></span><br><span class="line"><span class="built_in">console</span>.log(a2);<span class="comment">// [3, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//---当数组有引用类型数据</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, &#123;<span class="attr">name</span>: <span class="string">&#x27;完美&#x27;</span>&#125;];</span><br><span class="line"><span class="keyword">let</span> arr2 = arr.slice();    </span><br><span class="line">arr2[<span class="number">2</span>].name = <span class="string">&#x27;哈哈哈哈&#x27;</span>;</span><br><span class="line">arr2[<span class="number">0</span>] = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[ 1, 2, &#123; name: &#x27;哈哈哈哈&#x27; &#125; ]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">//[ 3, 2, &#123; name: &#x27;哈哈哈哈&#x27; &#125; ]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、<span class="built_in">Array</span>.prototype.concat()</span><br><span class="line"></span><br><span class="line"><span class="comment">//---当数组为基本类型数据</span></span><br><span class="line"><span class="keyword">let</span> a1 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> a2 = a1.concat();  	</span><br><span class="line">a2[<span class="number">0</span>] = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a1);<span class="comment">// [1, 2]</span></span><br><span class="line"><span class="built_in">console</span>.log(a2);<span class="comment">// [3, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//---当数组中有引用类型数据</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, &#123;<span class="attr">name</span>: <span class="string">&#x27;完美&#x27;</span>&#125;];</span><br><span class="line"><span class="keyword">let</span> arr2 = arr.concat();    </span><br><span class="line">arr2[<span class="number">2</span>].name = <span class="string">&#x27;哈哈哈哈&#x27;</span>;</span><br><span class="line">arr2[<span class="number">0</span>] = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[ 1, 2, &#123; name: &#x27;哈哈哈哈&#x27; &#125; ]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">//[ 3, 2, &#123; name: &#x27;哈哈哈哈&#x27; &#125; ]</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、扩展运算符(...)</span><br><span class="line"></span><br><span class="line"><span class="comment">//---当对象为基本类型数据</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;FungLeo&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;man&#x27;</span>, <span class="attr">old</span>: <span class="string">&#x27;18&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">var</span> &#123; ...obj2 &#125; = obj</span><br><span class="line">obj.old = <span class="string">&#x27;22&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj) <span class="comment">// &#123; name: &#x27;FungLeo&#x27;, sex: &#x27;man&#x27;, old: &#x27;18&#x27;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2)<span class="comment">// &#123; name: &#x27;FungLeo&#x27;, sex: &#x27;man&#x27;, old: &#x27;22&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//---当对象中有引用类型数据</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;FungLeo&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;man&#x27;</span>, <span class="attr">old</span>: <span class="string">&#x27;18&#x27;</span>,<span class="attr">id</span>:&#123;<span class="attr">idx</span>: <span class="number">1</span>&#125;&#125;</span><br><span class="line"><span class="keyword">var</span> &#123; ...obj2 &#125; = obj</span><br><span class="line">obj.old = <span class="string">&#x27;22&#x27;</span></span><br><span class="line">obj.id.idx = <span class="string">&#x27;0&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj) <span class="comment">// &#123; name: &#x27;FungLeo&#x27;, sex: &#x27;man&#x27;, old: &#x27;18&#x27;,id:&#123;idx: 0&#125;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2)<span class="comment">// &#123; name: &#x27;FungLeo&#x27;, sex: &#x27;man&#x27;, old: &#x27;22&#x27;,id:&#123;idx: 0&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">深拷贝，就是不管原数据中值是什么类型的数据，拷贝后的新数据跟原数据是完全没有关联的</span><br><span class="line"></span><br><span class="line">常见的深拷贝方式有：</span><br><span class="line"></span><br><span class="line"><span class="comment">//万能转换器JSON.parse(JSON.stringify(obj)) 深拷贝已对象，它可以`深拷贝多层级的，不同担心嵌套问题`。</span></span><br><span class="line"><span class="number">1</span>、<span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify())，<span class="comment">//这种方法虽然可以实现数组或对象深拷贝,但不能处理函数</span></span><br><span class="line">例如：</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>, &#123;<span class="attr">name</span>: <span class="string">&#x27;gg&#x27;</span>&#125;];</span><br><span class="line"><span class="keyword">let</span> arr1 = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify( arr ));</span><br><span class="line">arr1[<span class="number">2</span>].name = <span class="string">&#x27;hh&#x27;</span>;</span><br><span class="line">arr1[<span class="number">0</span>] = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">//[1,2 &#123;name: &#x27;gg&#x27;&#125;]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1) <span class="comment">//[5,2 &#123;name: &#x27;hh&#x27;&#125;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、jQuery.extend()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意要引入jQuery</span></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123; </span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, </span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>, </span><br><span class="line">    <span class="attr">father</span>: &#123; <span class="attr">age</span>: <span class="number">45</span>&#125;,</span><br><span class="line">    <span class="attr">fn</span>: <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = $.extend(<span class="literal">true</span>, &#123;&#125;, obj1)</span><br><span class="line">obj2.name = <span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line">obj2.father.age = <span class="number">50</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj1,obj1.fn(<span class="number">9</span>)) <span class="comment">// &#123;name: &quot;张三&quot;,age: 18,father: &#123; age: 45&#125;,fn:f()&#125;,9</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2,obj2.fn(<span class="number">99</span>)) <span class="comment">// &#123;name: &quot;李四&quot;,age: 18,father: &#123; age: 50&#125;,fn:f()&#125;,99</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、利用递归遍历对象或数组</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">source</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Object</span>.prototype.toString.call(source)===<span class="string">&#x27;[object Object]&#x27;</span>)&#123;</span><br><span class="line">        result = &#123;&#125;;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">Object</span>.prototype.toString.call(source)===<span class="string">&#x27;[object Array]&#x27;</span>)&#123;</span><br><span class="line">        result = []</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> source)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Object</span>.prototype.toString.call(source[attr])===<span class="string">&#x27;[object Array]&#x27;</span> || <span class="built_in">Object</span>.prototype.toString.call(source[attr])===<span class="string">&#x27;[object Object]&#x27;</span>)&#123;</span><br><span class="line">            result[attr] = clone(source[attr])</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            result[attr] = source[attr];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">使用</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">12</span>,</span><br><span class="line">    <span class="attr">wife</span>:&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;翠花&quot;</span>,</span><br><span class="line">        <span class="attr">age</span>:<span class="number">11</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">fn</span>: <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> n</span><br><span class="line">	&#125;</span><br><span class="line">&#125;];</span><br><span class="line"><span class="keyword">var</span> res = clone(arr);</span><br><span class="line">res[<span class="number">0</span>] = <span class="number">5</span>;</span><br><span class="line">res[<span class="number">2</span>].name = <span class="string">&#x27;李四&#x27;</span></span><br><span class="line">res[<span class="number">2</span>].wife.name = <span class="string">&#x27;赵五&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr,arr[<span class="number">2</span>].fn(<span class="number">9</span>)); <span class="comment">// [1,2,&#123;name:&quot;张三&quot;,age:12,wife:&#123;name:&quot;翠花&quot;,age:11&#125;&#125;],9</span></span><br><span class="line"><span class="built_in">console</span>.log(res,res[<span class="number">2</span>].fn(<span class="number">99</span>)); <span class="comment">// [5,2,&#123;name:&quot;李四&quot;,age:12,wife:&#123;name:&quot;赵五&quot;,age:11&#125;&#125;],99</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">_.cloneDeep()   <span class="comment">//函数库lodash,该函数库也有提供_.cloneDeep用来做深拷贝</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="JavaScript中的数据类型"><a href="#JavaScript中的数据类型" class="headerlink" title="JavaScript中的数据类型"></a>JavaScript中的数据类型</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">string、number、<span class="built_in">Boolean</span>、<span class="literal">undefined</span>、<span class="literal">null</span>、object、<span class="built_in">Array</span>、<span class="built_in">Symbol</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">理解: 电梯第一个人进来后，等待<span class="number">15</span>秒。如果过程中又有人进来，<span class="number">15</span>秒等待重新计时，直到<span class="number">15</span>秒后开始运送，这是防抖</span><br><span class="line"></span><br><span class="line">      在游戏回城的时候被打断，再次点回城就会重新计时，最终只有没被打断的最后一次，才能成功回城，就是防抖</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      电梯第一个人进来后，<span class="number">15</span>秒后准时运送一次，这是节流</span><br><span class="line">      </span><br><span class="line">      鼠标点击下一张轮播图，不管单位时间内连续点击了多少次，轮播图都是<span class="number">2</span>秒换下一张，就是节流</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、防抖: n 秒后在执行该事件，若在 n 秒内被重复触发，则重新计时(在单位时间内频繁触发事件，只有最后一次生效)</span><br><span class="line">   </span><br><span class="line">   应用场景: 文本输入的验证；</span><br><span class="line">   <span class="string">`&lt;input type=&quot;text&quot; id=&#x27;debounce&#x27; onInput=&#x27;debounceInput(event)&#x27; &gt;`</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//定义一个定时器，保存上一次的定时器</span></span><br><span class="line">        <span class="keyword">let</span> time = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// let args = arguments;</span></span><br><span class="line">            <span class="comment">//取消上一次定时器</span></span><br><span class="line">            <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">                <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//延迟执行</span></span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span> &#123;</span><br><span class="line">                <span class="comment">//外部传入的真正要执行的函数</span></span><br><span class="line">                fn.apply(<span class="built_in">this</span>, args); </span><br><span class="line">            &#125;, delay);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//input事件</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">onInput</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        val = e.target.value</span><br><span class="line">        <span class="keyword">if</span>(val)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;有防抖&#x27;</span>,val)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//使用</span></span><br><span class="line">    <span class="keyword">const</span> debounceInput = debounce(onInput, <span class="number">300</span>)  </span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、节流: n 秒内只运行一次，若在 n 秒内重复触发，只有一次生效(在单位时间内频繁触发事件，只生效一次（也就是只有第一次生效）)</span><br><span class="line">   </span><br><span class="line">   应用场景：滚动加载，加载更多或滚到底部监听。</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 尾节流，定时器实现，不会立即执行，而是在delay之后执行</span></span><br><span class="line">    <span class="comment">// 最后停止触发之后，还会执行一次</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">..args</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// let args = arguments;</span></span><br><span class="line">            <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>( <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                fn.apply(<span class="built_in">this</span>, args);</span><br><span class="line">                timer = <span class="literal">null</span>; <span class="comment">// 在delay后执行完fn之后清空timer，此时timer为假，throttle触发可以进入计时器</span></span><br><span class="line">            &#125;, delay)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//  定时器不用箭头函数时this要改变一下</span></span><br><span class="line">            <span class="comment">// let _this = this;</span></span><br><span class="line">            <span class="comment">// //let args = arguments;</span></span><br><span class="line">            <span class="comment">// if (timer) &#123;</span></span><br><span class="line">            <span class="comment">//     return;</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">            <span class="comment">// timer = setTimeout(function () &#123;</span></span><br><span class="line">            <span class="comment">//     fn.apply(_this, args);</span></span><br><span class="line">            <span class="comment">//     timer = null; // 在delay后执行完fn之后清空timer，此时timer为假，throttle触发可以进入计时器</span></span><br><span class="line">            <span class="comment">// &#125;, delay)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="comment">// 尾节流，定时器实现，不会立即执行，而是在delay之后执行</span></span><br><span class="line">    <span class="comment">// 最后停止触发之后，还会执行一次</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">..args</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// let args = arguments;</span></span><br><span class="line">            <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>( <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                fn.apply(<span class="built_in">this</span>, args);</span><br><span class="line">                timer = <span class="literal">null</span>; <span class="comment">// 在delay后执行完fn之后清空timer，此时timer为假，throttle触发可以进入计时器</span></span><br><span class="line">            &#125;, delay)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//  定时器不用箭头函数时this要改变一下</span></span><br><span class="line">            <span class="comment">// let _this = this;</span></span><br><span class="line">            <span class="comment">// //let args = arguments;</span></span><br><span class="line">            <span class="comment">// if (timer) &#123;</span></span><br><span class="line">            <span class="comment">//     return;</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">            <span class="comment">// timer = setTimeout(function () &#123;</span></span><br><span class="line">            <span class="comment">//     fn.apply(_this, args);</span></span><br><span class="line">            <span class="comment">//     timer = null; // 在delay后执行完fn之后清空timer，此时timer为假，throttle触发可以进入计时器</span></span><br><span class="line">            <span class="comment">// &#125;, delay)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//事件</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用</span></span><br><span class="line">    <span class="keyword">const</span> throttleHandler = throttle(handle, <span class="number">3000</span>)</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;scroll&#x27;</span>, throttleHandler)</span><br></pre></td></tr></table></figure>
<h3 id="箭头函数和普通函数有什么区别"><a href="#箭头函数和普通函数有什么区别" class="headerlink" title="箭头函数和普通函数有什么区别"></a>箭头函数和普通函数有什么区别</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>). 箭头函数更加简洁；</span><br><span class="line">(<span class="number">2</span>). 箭头函数不会创建自己的<span class="built_in">this</span>，所以它没有自己的<span class="built_in">this</span>，它只会在自己作用域的上一层继承<span class="built_in">this</span>，所以箭头函数中的<span class="built_in">this</span>指向在它定义时就确认了，之后不会再改变，所以箭头函数的<span class="built_in">this</span>值永远不会改变；</span><br><span class="line">(<span class="number">3</span>). call()、apply()、bind()等方法不能改变箭头函数<span class="built_in">this</span>的的指向；</span><br><span class="line">(<span class="number">4</span>). 箭头函数不能作为构造函数使用；</span><br><span class="line">(<span class="number">5</span>). 箭头函数没有自己的<span class="built_in">arguments</span>；</span><br><span class="line">(<span class="number">6</span>). 箭头函数没有prototype(原型)，原型是<span class="literal">undefined</span>；</span><br></pre></td></tr></table></figure>
<h3 id="你是怎么理解面向对象的，什么是面向对象，用面向对象做过什么"><a href="#你是怎么理解面向对象的，什么是面向对象，用面向对象做过什么" class="headerlink" title="你是怎么理解面向对象的，什么是面向对象，用面向对象做过什么"></a>你是怎么理解面向对象的，什么是面向对象，用面向对象做过什么</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">面向对象的三大特性：</span><br><span class="line"></span><br><span class="line">封装</span><br><span class="line">隐藏对象的属性和实现细节，仅对外提供公共访问方式，将变化隔离，便于使用，提高复用性和安全性。</span><br><span class="line"></span><br><span class="line">继承</span><br><span class="line">提高代码复用性；继承是多态的前提。</span><br><span class="line"></span><br><span class="line">多态</span><br><span class="line">父类或接口定义的引用变量可以指向子类或具体实现类的实例对象。提高了程序的拓展性。</span><br><span class="line"></span><br><span class="line">为什么要用面向对象？</span><br><span class="line"> 易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统 更加灵活、更加易于维护</span><br></pre></td></tr></table></figure>
<h3 id="面向对象和面向过程的区别"><a href="#面向对象和面向过程的区别" class="headerlink" title="面向对象和面向过程的区别"></a>面向对象和面向过程的区别</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">面向对象以对象为中心。先把要完成的功能封装成一个一个的对象，通过调用对象的方法或属性来完成功能</span><br><span class="line"></span><br><span class="line">优点：不仅关注眼前的事件实现，也关注未来可能发生的事件。具有高度的拓展性和复用性，特点是继承、封装、多肽</span><br><span class="line"></span><br><span class="line">缺点：如果只是单一的功能实现，面向对象的设计思路会过于繁琐</span><br><span class="line"></span><br><span class="line">面向过程是以事件为中心，按照我们编写的代码是根据完成一个步骤的过程来进行</span><br><span class="line"></span><br><span class="line">优点：根据事情的目的分解出过程，再一步步实施。对于不复杂的事件执行效率快</span><br><span class="line"></span><br><span class="line">缺点：只关注眼前事件的实现</span><br></pre></td></tr></table></figure>
<h3 id="如何解决数字精度丢失的问题"><a href="#如何解决数字精度丢失的问题" class="headerlink" title="如何解决数字精度丢失的问题?"></a>如何解决数字精度丢失的问题?</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">理论上用有限的空间来存储无限的小数是不可能保证精确的，但我们可以处理一下得到我们期望的结果</span><br><span class="line"></span><br><span class="line">当你拿到 <span class="number">1.4000000000000001</span> 这样的数据要展示时，建议使用 toPrecision 凑整并 <span class="built_in">parseFloat</span> 转成数字后再显示，如下：</span><br><span class="line"></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="number">1.4000000000000001</span>.toPrecision(<span class="number">12</span>)) === <span class="number">1.4</span>  <span class="comment">// True</span></span><br><span class="line">封装成方法就是：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strip</span>(<span class="params">num, precision = <span class="number">12</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> +<span class="built_in">parseFloat</span>(num.toPrecision(precision));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">对于运算类操作，如 +-*/，就不能使用 toPrecision 了。正确的做法是把小数转成整数后再运算。</span><br><span class="line"></span><br><span class="line">主要思想是：将小数先转换成拆分两个字符串，然后计算小数部分的字符串的长度，然后利用这个长度将小数变成整数！</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 精确加法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> num1Digits = (num1.toString().split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">1</span>] || <span class="string">&#x27;&#x27;</span>).length;</span><br><span class="line">  <span class="keyword">const</span> num2Digits = (num2.toString().split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">1</span>] || <span class="string">&#x27;&#x27;</span>).length;</span><br><span class="line">  <span class="keyword">const</span> baseNum = <span class="built_in">Math</span>.pow(<span class="number">10</span>, <span class="built_in">Math</span>.max(num1Digits, num2Digits));</span><br><span class="line">  <span class="keyword">return</span> (num1 * baseNum + num2 * baseNum) / baseNum;</span><br><span class="line">&#125;</span><br><span class="line">最后还可以使用第三方库，如<span class="built_in">Math</span>.js、BigDecimal.js</span><br></pre></td></tr></table></figure>
<p>其他 +-*/ 详见   <a href="/2017/05/25/js/%E8%A7%A3%E5%86%B3%E6%95%B0%E5%AD%97%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/" title="解决数字精度丢失">解决数字精度丢失</a></p>
<h3 id="JavaScript-中内存泄漏的几种情况？"><a href="#JavaScript-中内存泄漏的几种情况？" class="headerlink" title="JavaScript 中内存泄漏的几种情况？"></a>JavaScript 中内存泄漏的几种情况？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>) 意外的全局变量：由于使用未声明的变量,而意外的创建了一个全局变量,而使这个变量一直留在内存中无法被回收</span><br><span class="line">(<span class="number">2</span>) 被遗忘的计时器或回调函数：设置了 <span class="built_in">setInterval</span> 定时器，而忘记取消它，如果循环函数有对外部变量的引用的话，那么这个变量会被一直留在内存中，而无法被回收。</span><br><span class="line">(<span class="number">3</span>) 脱离 DOM 的引用：获取一个 DOM 元素的引用，而后面这个元素被删除，由于一直保留了对这个元素的引用，所以它也无法被回收。</span><br><span class="line">(<span class="number">4</span>) 闭包：不合理的使用闭包，从而导致某些变量一直被留在内存当中</span><br></pre></td></tr></table></figure>
<h3 id="TypeScript-和JavaScript有什么区别"><a href="#TypeScript-和JavaScript有什么区别" class="headerlink" title="TypeScript 和JavaScript有什么区别"></a>TypeScript 和JavaScript有什么区别</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ts是js的超集，是js的扩展语言，结合ide可以让我们再开发过程中知道变量的类型并提供联想提示</span><br></pre></td></tr></table></figure>
<h3 id="JS中的三种事件模型是什么？"><a href="#JS中的三种事件模型是什么？" class="headerlink" title="JS中的三种事件模型是什么？"></a>JS中的三种事件模型是什么？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">原始模型(DOM0) </span><br><span class="line">    只支持冒泡，不支持捕获</span><br><span class="line">    同一类型的事件只能绑定一次</span><br><span class="line">        绑定监听函数</span><br><span class="line">        HTML代码中直接绑定</span><br><span class="line">        &lt;input type=<span class="string">&quot;button&quot;</span>  οnclick=<span class="string">&quot;fun()&quot;</span>&gt;</span><br><span class="line">        通过js代码绑定</span><br><span class="line">        <span class="keyword">var</span> btn  = <span class="built_in">document</span>.getElementById(<span class="string">&quot;.btn&quot;</span>);</span><br><span class="line">        btn.onclick = fun;</span><br><span class="line">IE模型(基本不用) </span><br><span class="line">    事件处理阶段</span><br><span class="line">    事件冒泡阶段</span><br><span class="line">        事件绑定监听函数</span><br><span class="line">        attachEvent()</span><br><span class="line">        detachEvent()</span><br><span class="line"></span><br><span class="line">标准模型(dom2模型)</span><br><span class="line">    事件捕获阶段</span><br><span class="line">    事件处理阶段</span><br><span class="line">    事件冒泡阶段</span><br><span class="line"></span><br><span class="line">        事件绑定监听函数</span><br><span class="line">        addEventListener()</span><br><span class="line">        removeEventListener()</span><br></pre></td></tr></table></figure>
<h3 id="ES6声明变量的六种方法-1"><a href="#ES6声明变量的六种方法-1" class="headerlink" title="ES6声明变量的六种方法"></a>ES6声明变量的六种方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ES5: <span class="keyword">var</span> <span class="function"><span class="keyword">function</span></span></span><br><span class="line"><span class="function"><span class="title">ES6</span>: <span class="title">let</span> <span class="title">const</span> <span class="title">import</span> <span class="title">class</span>(<span class="params"><span class="keyword">class</span>类</span>)</span></span><br></pre></td></tr></table></figure>
<h3 id="JS实现继承的方式有哪些？-1"><a href="#JS实现继承的方式有哪些？-1" class="headerlink" title="JS实现继承的方式有哪些？"></a>JS实现继承的方式有哪些？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">构造函数继承 原型链继承 组合继承 寄生组合继承 ES6类(<span class="class"><span class="keyword">class</span>类)继承</span></span><br></pre></td></tr></table></figure>
<h3 id="原型，原型链"><a href="#原型，原型链" class="headerlink" title="原型，原型链 ?"></a>原型，原型链 ?</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">先了解构造函数</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.job = job;</span><br><span class="line">        <span class="built_in">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; alert(<span class="built_in">this</span>.name) &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">&#x27;Zaxlct&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;Software Engineer&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">&#x27;Mick&#x27;</span>, <span class="number">23</span>, <span class="string">&#x27;Doctor&#x27;</span>);</span><br><span class="line"></span><br><span class="line">上面的例子中 person1 和 person2 都是 Person 的实例。这两个实例都有一个 <span class="title">constructor</span> （构造函数）属性，该属性（是一个指针）指向 <span class="title">Person</span>  即：</span><br><span class="line">  <span class="title">console</span>.<span class="title">log</span>(<span class="params">person1.constructor == Person</span>); <span class="comment">//true</span></span><br><span class="line">  <span class="built_in">console</span>.log(person2.constructor == Person); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">我们要记住两个概念（构造函数，实例）：</span><br><span class="line">person1 和 person2 都是 构造函数 Person 的实例</span><br><span class="line">一个公式： 实例的构造函数属性（<span class="title">constructor</span>）指向构造函数</span><br><span class="line"></span><br><span class="line">1、原型 <span class="title">prototype</span></span><br><span class="line">常规的数组 [ ] 和对象 &#123; &#125; 是没有原型的，原型是函数<span class="function"><span class="keyword">function</span>特有的；</span></span><br><span class="line"><span class="function">每一个函数都会有<span class="title">prototype</span>属性,被称为显式原型；</span></span><br><span class="line"><span class="function">每一个实例对象都会有<span class="title">__proto__</span>属性,其被称为隐式原型</span></span><br><span class="line"><span class="function">    <span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="function">		</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">    <span class="title">var</span> <span class="title">stu</span> = <span class="title">new</span> <span class="title">Student</span>(<span class="params"></span>)</span>;</span><br><span class="line">    Student.prototype.name = <span class="string">&#x27;Jerry&#x27;</span>;<span class="comment">/*如果prototype中  有这个属性，在这个语句后也会生成相应属性*/</span></span><br><span class="line">    <span class="built_in">console</span>.log(stu.name);<span class="comment">/*输出Jerry*/</span></span><br><span class="line">    <span class="built_in">console</span>.log(stu.__proto__ === Student.prototype) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">同样的，不仅仅是属性，方法也是可以继承的</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> stu = <span class="keyword">new</span> Student();</span><br><span class="line">    Student.prototype.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    stu.sayHello();<span class="comment">/*调用方法后输出hello*/</span></span><br><span class="line"></span><br><span class="line">但是如果当我们在构造函数中拥有和原型一样的属性或者方法的时候，会优先使用构造函数的属性和方法</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age, sex</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">        <span class="built_in">this</span>.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;hello I&#x27;m&quot;</span>, name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> stu = <span class="keyword">new</span> Student(<span class="string">&#x27;Tom&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;male&#x27;</span>);</span><br><span class="line">    Student.prototype.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    stu.sayHello();<span class="comment">/*调用sayHello方法*/</span></span><br><span class="line">    <span class="built_in">console</span>.log(stu.name);<span class="comment">/*输出名字*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出结果</span></span><br><span class="line">    <span class="comment">//hello I&#x27;m Tom</span></span><br><span class="line">    <span class="comment">//Tom</span></span><br><span class="line"></span><br><span class="line">利用原型的这个特征，我们就可以把一些对象的共有属性提取出来</span><br><span class="line"></span><br><span class="line">    Student.prototype = &#123;</span><br><span class="line">        <span class="attr">school</span> : <span class="string">&#x27;清华大学&#x27;</span>,</span><br><span class="line">        <span class="attr">country</span> : <span class="string">&#x27;中国&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age, sex</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> stu1 = <span class="keyword">new</span> Student(<span class="string">&#x27;Tom&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;male&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> stu2 = <span class="keyword">new</span> Student(<span class="string">&#x27;Jerry&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;female&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(stu1.school, stu1.country, stu1.name, stu1.age, stu1.sex);<span class="comment">//清华大学 中国 Tom 18 male</span></span><br><span class="line">    <span class="built_in">console</span>.log(stu2.school, stu2.country, stu2.name, stu2.age, stu2.sex);<span class="comment">//清华大学 中国 Jerry 20 female</span></span><br><span class="line"></span><br><span class="line"><span class="title">constructor</span></span><br><span class="line">  在原型的使用中，我们还会遇到一个属性，<span class="title">constructor</span>，它是用于查看对象的构造器的属性，并且这个属性也是系统自带的，我们也可以对其进行修改：</span><br><span class="line">    <span class="title">function</span> <span class="title">Student</span>(<span class="params"></span>)&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> stu = <span class="keyword">new</span> Student();</span><br><span class="line">    <span class="built_in">console</span>.log(stu.constructor); <span class="comment">//Student()&#123;&#125;</span></span><br><span class="line"></span><br><span class="line">修改</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> stu = <span class="keyword">new</span> Student();</span><br><span class="line">    stu.constructor = <span class="function"><span class="keyword">function</span> <span class="title">Teacher</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">    <span class="built_in">console</span>.log(stu.constructor);<span class="comment">//Teacher()&#123;&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、原型链</span><br><span class="line">原型链可以理解成一个构造器连接着上一层的实例，上一层的实例接着往上连接，以此类推，就形成了原型链，具体的示例如下</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Grand</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.getGrand = <span class="string">&#x27;grand&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> grand = <span class="keyword">new</span> Grand();</span><br><span class="line">    Father.prototype = grand;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.getFather = <span class="string">&#x27;father&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> father = <span class="keyword">new</span> Father();</span><br><span class="line">    Son.prototype = father;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.getSon = <span class="string">&#x27;son&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> son = <span class="keyword">new</span> Son();</span><br><span class="line">    <span class="comment">//console.log(son.getSon) //son</span></span><br><span class="line">    <span class="comment">//console.log(son.getFather) //father</span></span><br><span class="line">    <span class="comment">//console.log(son.getGrand) //grand</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//console.log(father.getSon) //undefined</span></span><br><span class="line">    <span class="comment">//console.log(father.getFather) //father</span></span><br><span class="line">    <span class="comment">//console.log(father.getGrand) //grand</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//console.log(grand.getSon) //undefined</span></span><br><span class="line">    <span class="comment">//console.log(grand.getFather) //undefined</span></span><br><span class="line">    <span class="comment">//console.log(grand.getGrand) //grand</span></span><br><span class="line">上述代码，就是形成了一条原型链，</span><br><span class="line">Son的原型是已经实例化的father对象，Father的原型是已经实例化的grand对象，</span><br><span class="line">那么实例化的son就可以调用Grand构造器和Father构造器中的属性，</span><br><span class="line">而相反地，实例化的father就无法调用Son构造器中的方法或属性，实例化的grand同理</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="说说你对作用域链的理解"><a href="#说说你对作用域链的理解" class="headerlink" title="说说你对作用域链的理解"></a>说说你对作用域链的理解</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、作用域就是变量与函数的可访问范围</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、一般情况下，变量取值到创建这个变量的函数的作用域中取值。 但是如果在当前作用域中没有查到值，就会向上级作用域去查，直到查到全局作用域，这么一个查找过程形成的链条就叫做作用域链</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="typeof-与-instanceof-区别"><a href="#typeof-与-instanceof-区别" class="headerlink" title="typeof 与 instanceof 区别"></a>typeof 与 instanceof 区别</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">typeof</span>与<span class="keyword">instanceof</span>都是判断数据类型的方法，区别如下：</span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span>会返回一个变量的基本类型，<span class="keyword">instanceof</span>返回的是一个布尔值</span><br><span class="line"><span class="keyword">instanceof</span> 可以准确地判断复杂引用数据类型，但是不能正确判断基础数据类型</span><br><span class="line">而<span class="keyword">typeof</span> 也存在弊端，它虽然可以判断基础数据类型（<span class="literal">null</span> 除外），但是引用数据类型中，除了<span class="function"><span class="keyword">function</span> 类型以外，其他的也无法判断</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>
<h3 id="ajax、axios、jsonp的理解"><a href="#ajax、axios、jsonp的理解" class="headerlink" title="ajax、axios、jsonp的理解"></a>ajax、axios、jsonp的理解</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、jsonp是一种可以解决跨域问题的方式，就是通过动态创建script标签用src引入外部文件实现跨域，script加载实际上就是一个get请求，并不能实现post请求。(其他实现跨域的方法有：iframe,<span class="built_in">window</span>.name,postMessage,CORS...)</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、ajax是一种技术，ajax技术包含了get和post请求的，但是它仅仅是一种获取数据的技术，不能直接实现跨域，只有后台服务器配置好Access-Control-Allow-Origin，才可以实现请求的跨域。</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、axios是通过promise实现对ajax技术的一种封装，axios是ajax，ajax不止axios。</span><br><span class="line"></span><br><span class="line">总结：</span><br><span class="line"></span><br><span class="line">juery的$.ajax实现get请求能跨域是因为jsonp或者因为原生ajax和服务器的配合，post请求能跨域就只能是因为原生ajax和服务器的配合</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="ajax的请求过程"><a href="#ajax的请求过程" class="headerlink" title="ajax的请求过程"></a>ajax的请求过程</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ajax 提交 post 请求的数据</span></span><br><span class="line"><span class="comment">// 1. 创建核心对象</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="comment">// 2. 准备建立连接</span></span><br><span class="line">xhr.open(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;register.php&quot;</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 3. 发送请求</span></span><br><span class="line"><span class="comment">// 如果要POST提交数据，则需要设置请求头</span></span><br><span class="line"><span class="comment">// 有的面试官会问为什么要设置请求头？ 知道请求正文是以什么格式</span></span><br><span class="line"><span class="comment">// Content-Type: application/x-www-form-urlencoded，请求正文是类似 get 请求 url 的请求参数</span></span><br><span class="line"><span class="comment">// Content-Type: application/json，请求正文是一个 json 格式的字符串</span></span><br><span class="line">xhr.setRequestHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line"><span class="comment">// 发送数据</span></span><br><span class="line">xhr.send(querystring);</span><br><span class="line"><span class="comment">// 4. 处理响应</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123; <span class="comment">// 请求处理完毕，响应就绪</span></span><br><span class="line">          <span class="keyword">if</span> (xhr.status === <span class="number">200</span>) &#123; <span class="comment">// 请求成功</span></span><br><span class="line">               <span class="keyword">var</span> data = xhr.responseText;</span><br><span class="line">               <span class="built_in">console</span>.log(data);</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="ajax请求的时候get-和post方式的区别"><a href="#ajax请求的时候get-和post方式的区别" class="headerlink" title="ajax请求的时候get 和post方式的区别"></a>ajax请求的时候get 和post方式的区别</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、get请求不安全，post安全 ；</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、get请求数据有大小限制，post无限制 ；</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、get请求参数会在url中显示，容易被他人窃取，post在请求体中，不会被窃取；</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、post需要设置请求头。</span><br></pre></td></tr></table></figure>
<h3 id="什么是事件委托以及优缺点"><a href="#什么是事件委托以及优缺点" class="headerlink" title="什么是事件委托以及优缺点"></a>什么是事件委托以及优缺点</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">js事件委托就是利用冒泡的原理，把本应该添加到某个元素上的事件委托给他的父级，从而减少DOM交互达到网页优化。</span><br><span class="line"></span><br><span class="line">优点：</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>可以大量节省内存占用，减少事件注册。比如ul上代理所有li的click事件就很不错。 <span class="number">2.</span>可以实现当新增子对象时，无需再对其进行事件绑定，对于动态内容部分尤为合适</span><br><span class="line"></span><br><span class="line">缺点：</span><br><span class="line"></span><br><span class="line">事件代理的常用应用应该仅限于上述需求，如果把所有事件都用事件代理，可能会出现事件误判。即本不该被触发的事件被绑定上了事件。</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="DOM操作与BOM操作"><a href="#DOM操作与BOM操作" class="headerlink" title="DOM操作与BOM操作"></a>DOM操作与BOM操作</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>) DOM操作</span><br><span class="line">例如：<span class="built_in">document</span>.getElementById 就是dom操作</span><br><span class="line">DOM事件模型和事件流</span><br><span class="line">DOM事件模型分为捕获和冒泡。一个事件发生后，会在子元素和父元素之间传播（propagation）。这种传播分成三个阶段。</span><br><span class="line">（<span class="number">1</span>）捕获阶段：事件从<span class="built_in">window</span>对象自上而下向目标节点传播的阶段；</span><br><span class="line">（<span class="number">2</span>）目标阶段：真正的目标节点正在处理事件的阶段；</span><br><span class="line">（<span class="number">3</span>）冒泡阶段：事件从目标节点自下而上向<span class="built_in">window</span>对象传播的阶段。</span><br><span class="line">如何阻止冒泡？</span><br><span class="line">通过 event.stopPropagation() 方法阻止事件冒泡到父元素，阻止任何父事件处理程序被执行。</span><br><span class="line"></span><br><span class="line">事件代理(事件委托)</span><br><span class="line">由于事件会在冒泡阶段向上传播到父节点，因此可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件。这种方法叫做事件的代理。</span><br><span class="line">事件代理优点：</span><br><span class="line">使代码简洁；减少浏览器的内存占用；</span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>) BOM操作</span><br><span class="line">BOM（浏览器对象模型）是浏览器本身的一些信息的设置和获取，例如获取浏览器的宽度、高度，设置让浏览器跳转到哪个地址。</span><br><span class="line">例如：<span class="built_in">window</span>.screen对象：包含有关用户屏幕的信息</span><br><span class="line"><span class="built_in">window</span>.location对象：用于获得当前页面的地址(URL)，并把浏览器重定向到新的页面</span><br><span class="line"><span class="built_in">window</span>.history对象：浏览历史的前进后退等</span><br><span class="line"><span class="built_in">window</span>.navigator对象：常常用来获取浏览器信息、是否移动端访问等等</span><br></pre></td></tr></table></figure>

<h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">什么是跨域？</span><br><span class="line">当协议、子域名、主域名、端口号中任意一个不相同时都算做不同域，不同域之间相互请求资源，就算作“跨域”。</span><br><span class="line"></span><br><span class="line">常见的几种跨域解决方案</span><br><span class="line">JSONP：利用同源策略对 script 标签不受限制,不过只支持GET请求</span><br><span class="line">    为什么jsonp只支持get请求?</span><br><span class="line">        如果看过 JSONP 库的源码就知道，常见的实现代码其实就是 <span class="built_in">document</span>.createElement(‘script’) 生成一个 script 标签，然后插 body 里而已。在这里根本没有设置请求格式的余地。</span><br><span class="line"></span><br><span class="line">        所以JSONP的实现原理就是创建一个script标签, 再把需要请求的api地址放到src里. 这个请求只能用GET方法, 不可能是POST</span><br><span class="line"></span><br><span class="line">CORS：实现 CORS 通信的关键是后端，服务端设置 Access-Control-Allow-Origin 就可以开启，备受推崇的跨域解决方案，比 JSONP 简单许多</span><br><span class="line"></span><br><span class="line">Node中间件代理或nginx反向代理：主要是通过同源策略对服务器不加限制</span><br><span class="line"></span><br><span class="line">vue-cli代理跨域：devServer</span><br></pre></td></tr></table></figure>

<h3 id="前端vue解决跨域"><a href="#前端vue解决跨域" class="headerlink" title="前端vue解决跨域"></a>前端vue解决跨域</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">VUE2<span class="number">.0</span>中常用proxy来解决跨域问题</span><br><span class="line">    步骤<span class="number">1</span>、在项目config目录下面有个index文件中设置如下代码片段</span><br><span class="line">    <span class="built_in">module</span>.exports = &#123;</span><br><span class="line">        <span class="attr">dev</span>: &#123;</span><br><span class="line">            <span class="comment">// Paths</span></span><br><span class="line">            <span class="attr">assetsSubDirectory</span>: <span class="string">&#x27;static&#x27;</span>,</span><br><span class="line">            <span class="attr">assetsPublicPath</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">            <span class="attr">proxyTable</span>: &#123; <span class="comment">// 配置跨域</span></span><br><span class="line">                <span class="string">&#x27;/api&#x27;</span>:&#123;</span><br><span class="line">                    <span class="attr">target</span>:<span class="string">`http://www.baidu.com`</span>, <span class="comment">//请求后台接口</span></span><br><span class="line">                    <span class="attr">changeOrigin</span>:<span class="literal">true</span>, <span class="comment">// 是否允许跨域</span></span><br><span class="line">                    <span class="attr">pathRewrite</span>:&#123;</span><br><span class="line">                        <span class="string">&#x27;^/api&#x27;</span> : <span class="string">&#x27;/api&#x27;</span> <span class="comment">// 重写请求，//重写路径 比如&#x27;/api/aaa/ccc&#x27;重写为&#x27;/aaa/ccc&#x27;</span></span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    步骤<span class="number">2</span>、创建axioss实例时，将baseUrl设置为 ‘/api’</span><br><span class="line">    <span class="keyword">const</span> http = axios.create(&#123;</span><br><span class="line">        <span class="attr">timeout</span>: <span class="number">1000</span> * <span class="number">1000000</span>,</span><br><span class="line">        <span class="attr">withCredentials</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">BASE_URL</span>: <span class="string">&#x27;/api&#x27;</span></span><br><span class="line">        <span class="attr">headers</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json; charset=utf-8&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Set-和-Map有什么区别"><a href="#Set-和-Map有什么区别" class="headerlink" title="Set 和 Map有什么区别"></a>Set 和 Map有什么区别</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>) <span class="built_in">Map</span>是键值对，<span class="built_in">Set</span>是值得合集，当然键和值可以是任何的值；</span><br><span class="line">(<span class="number">2</span>) <span class="built_in">Map</span>可以通过get方法获取，而set不能因为它只有值；</span><br><span class="line">(<span class="number">3</span>) 都能通过迭代器进行<span class="keyword">for</span>…<span class="keyword">of</span>遍历；</span><br><span class="line">(<span class="number">4</span>) <span class="built_in">Set</span>的值是唯一的可以做数组去重，而<span class="built_in">Map</span>由于没有格式限制，可以做数据存储</span><br><span class="line"></span><br><span class="line"><span class="built_in">Map</span> 和 <span class="built_in">Set</span> 数据结构它们都是以构造函数的形式出现的，所以我们通常使用 <span class="keyword">new</span> <span class="built_in">Set</span>()或者 <span class="keyword">new</span> <span class="built_in">Map</span>()的形式初始化的</span><br><span class="line"></span><br><span class="line"><span class="built_in">Map</span>（字典）</span><br><span class="line">    初始化 map 对象</span><br><span class="line">    <span class="keyword">let</span> myMap = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line">    初始化 map 时传入数据（默认接收一个二维数组）</span><br><span class="line">    <span class="keyword">let</span> defaultMap = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>], [<span class="string">&#x27;age&#x27;</span>, <span class="number">20</span>]]); <span class="comment">//打印 &#123;&#x27;name&#x27; =&gt; &#x27;张三&#x27;, &#x27;age&#x27; =&gt; 20&#125;</span></span><br><span class="line"></span><br><span class="line">    插入数据</span><br><span class="line">    myMap.set(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;小猪课堂&#x27;</span>); <span class="comment">// 字符串作为键</span></span><br><span class="line">    myMap.set(<span class="number">12</span>, <span class="string">&#x27;会飞的猪&#x27;</span>); <span class="comment">// number 类型作为键</span></span><br><span class="line">    myMap.set(&#123;&#125;, <span class="string">&#x27;知乎&#x27;</span>); <span class="comment">// 对象类型作为键</span></span><br><span class="line"></span><br><span class="line">    获取长度</span><br><span class="line">    <span class="keyword">let</span> myMapSize = myMap.size;</span><br><span class="line"></span><br><span class="line">    获取值</span><br><span class="line">    <span class="keyword">let</span> objKey = &#123;&#125;;</span><br><span class="line">    myMap.set(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;小猪课堂&#x27;</span>); <span class="comment">// 字符串作为键</span></span><br><span class="line">    myMap.set(<span class="number">12</span>, <span class="string">&#x27;会飞的猪&#x27;</span>); <span class="comment">// number 类型作为键</span></span><br><span class="line">    myMap.set(objKey, <span class="string">&#x27;知乎&#x27;</span>); <span class="comment">// 对象类型作为键</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> name = myMap.get(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> age = myMap.get(<span class="number">12</span>);</span><br><span class="line">    <span class="keyword">let</span> any = myMap.get(objKey);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(name, age, any); <span class="comment">// 小猪课堂 会飞的猪 知乎</span></span><br><span class="line">    上段代码中需要注意的是不能使用 myMap.get(&#123;&#125;)的形式获取数据，因为 objKey!==&#123;&#125;。</span><br><span class="line"></span><br><span class="line">    删除某个值</span><br><span class="line">    myMap.delete(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    判断某个值是否存在</span><br><span class="line">    myMap.has(<span class="string">&#x27;name&#x27;</span>); <span class="comment">// 返回 bool 值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Set</span>（集合）</span><br><span class="line"></span><br><span class="line">    初始化<span class="built_in">Set</span>对</span><br><span class="line">    <span class="keyword">let</span> mySet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line">    初始化<span class="built_in">Set</span>对象带有默认值：（和<span class="built_in">Map</span>类似，<span class="built_in">Set</span>初始化时也可以初始化默认数据。）</span><br><span class="line">    <span class="keyword">let</span> defaultSet = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;张三&#x27;</span>, <span class="number">12</span>, <span class="literal">true</span>]); <span class="comment">//打印 &#123;&#x27;张三&#x27;, 12, true&#125;</span></span><br><span class="line"></span><br><span class="line">    插入数据</span><br><span class="line">    mySet.add(<span class="number">1</span>);</span><br><span class="line">    mySet.add(<span class="string">&#x27;小猪课堂&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    获取长度</span><br><span class="line">    <span class="keyword">let</span> mySetSize = mySet.size;</span><br><span class="line"></span><br><span class="line">    获取值(由于<span class="built_in">Set</span>对象存储的不是键值对形式，所以未提供get方法获取值，我们通常遍历它获取值)</span><br><span class="line">    mySet.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(item)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    删除某个值</span><br><span class="line">    mySet.delete(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    判断某个值是否存在</span><br><span class="line">    mySet.has(<span class="number">1</span>); <span class="comment">// 返回Boolean值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Map与对象的互换</span></span><br><span class="line">    <span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line">    <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">        [<span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>],</span><br><span class="line">        [<span class="string">&#x27;b&#x27;</span>, <span class="number">3</span>]</span><br><span class="line">    ])</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">        obj[key] = value</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(obj)</span><br><span class="line">    <span class="comment">// &#123;a: 2, b: 3&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="常见的检测数据类型的几种方式"><a href="#常见的检测数据类型的几种方式" class="headerlink" title="常见的检测数据类型的几种方式"></a>常见的检测数据类型的几种方式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>) <span class="keyword">typeof</span> 其中数组、对象、<span class="literal">null</span>都会被判断为<span class="built_in">Object</span>，其他判断都正确</span><br><span class="line">(<span class="number">2</span>) <span class="keyword">instanceof</span> 只能判断引用数据类型,不能判断基本数据类型</span><br><span class="line">(<span class="number">3</span>) <span class="title">constructor</span> 它有2个作用 一是判断数据的类型，二是对象实例通过<span class="title">constructor</span>对象访问它的构造函数。需要注意的事情是如果创建一个对象来改变它的原型,<span class="title">constructor</span>就不能来判断数据类型了</span><br><span class="line">(<span class="params"><span class="number">4</span></span>) <span class="title">Object</span>.<span class="title">prototype</span>.<span class="title">toString</span>.<span class="title">call</span>(<span class="params"></span>) 使用 <span class="title">object</span> 对象的原型方法 <span class="title">tostring</span> 来判断数据类型</span><br><span class="line"></span><br><span class="line"><span class="title">instanceof</span>和<span class="title">typeof</span>的区别：</span><br><span class="line"></span><br><span class="line"><span class="title">instanceof</span>  返回值为布尔值。用于判断一个变量是否属于某个对象的实例。</span><br><span class="line"></span><br><span class="line"><span class="title">typeof</span>  返回值是一个字符串， 用来说明变量的数据类型。</span><br><span class="line"><span class="title">typeof</span> 一般只能返回如下几个结果： <span class="title">number</span>, <span class="title">boolean</span>, <span class="title">string</span>, <span class="title">function</span>, <span class="title">object</span>, <span class="title">undefined</span></span><br></pre></td></tr></table></figure>

<h3 id="怎么把类数组转换为数组"><a href="#怎么把类数组转换为数组" class="headerlink" title="怎么把类数组转换为数组"></a>怎么把类数组转换为数组</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过call调用数组的slice方法来实现转换</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.slice.call(arrayLike)</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过call调用数组的splice方法来实现转换</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.splice.call(arrayLike,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过apply调用数组的concat方法来实现转换</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.concat.apply([],arrayLike)</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过Array.from方法来实现转换</span></span><br><span class="line"><span class="built_in">Array</span>.from(arrayLike)</span><br></pre></td></tr></table></figure>
<h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>; <span class="keyword">let</span> b = <span class="number">2</span>;  如果在不声明第三个变量的前提下，使a=<span class="number">2</span>, b=<span class="number">1</span>？</span><br><span class="line"></span><br><span class="line">答案：[a, b] = [b, a]</span><br></pre></td></tr></table></figure>

<h3 id="如何利用es6快速的去重？"><a href="#如何利用es6快速的去重？" class="headerlink" title="如何利用es6快速的去重？"></a>如何利用es6快速的去重？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">23</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">33</span>, <span class="number">22</span>, <span class="number">12</span>, <span class="number">21</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> item = [...new <span class="built_in">Set</span>(arr)]</span><br></pre></td></tr></table></figure>

<h3 id="Promise-面试题-以下代码的执行结果是？"><a href="#Promise-面试题-以下代码的执行结果是？" class="headerlink" title="Promise 面试题 以下代码的执行结果是？"></a>Promise 面试题 以下代码的执行结果是？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        resolve()</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">答案：<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span></span><br><span class="line"></span><br><span class="line">解释：以上考察的是关于promise的原理，promise的构造函数是-同步执行-的，当<span class="keyword">new</span> <span class="built_in">Promise</span>的一瞬间，<span class="number">1</span>,<span class="number">2</span> 就立刻被执行，而 .then方法是-异步执行-的，当执行完<span class="number">1</span>和<span class="number">2</span>之后，会执行输出<span class="number">4</span>，最后执行输出<span class="number">3</span></span><br></pre></td></tr></table></figure>

<h3 id="-1"><a href="#-1" class="headerlink" title></a></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="-2"><a href="#-2" class="headerlink" title></a></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="-3"><a href="#-3" class="headerlink" title></a></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">...补充中</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试题-vue(补充中...)</title>
    <url>/2018/05/20/interview/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98vue/</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<h3 id="vue优点"><a href="#vue优点" class="headerlink" title="vue优点"></a>vue优点</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">轻量级框架: 只关注视图层，是一个构建数据的视图集合，大小只有几十kb；</span><br><span class="line"></span><br><span class="line">简单易学: 国人开发，中文文档，不存在语言障碍 ，易于理解和学习；</span><br><span class="line"></span><br><span class="line">双向数据绑定: 保留了angular的特点，在数据操作方面更为简单；</span><br><span class="line"></span><br><span class="line">组件化: 保留了react的优点，实现了html的封装和重用，在构建单页面应用方面有着独特的优势；</span><br><span class="line"></span><br><span class="line">视图，数据，结构分离: 使数据的更改更为简单，不需要进行逻辑代码的修改，只需要操作数据就能完成相关操作；</span><br><span class="line"></span><br><span class="line">虚拟DOM: dom操作是非常耗费性能的， 不再使用原生的dom操作节点，极大解放dom操作，但具体操作的还是dom不过是换了另一种方式；</span><br><span class="line"></span><br><span class="line">运行速度更快: 相比较与react而言，同样是操作虚拟dom，就性能而言，vue存在很大的优势。</span><br></pre></td></tr></table></figure>

<h3 id="单页面应用和多页面应用区别及优缺点"><a href="#单页面应用和多页面应用区别及优缺点" class="headerlink" title="单页面应用和多页面应用区别及优缺点"></a>单页面应用和多页面应用区别及优缺点</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">单页面应用（SPA），通俗一点说就是指只有一个主页面的应用，浏览器一开始要加载所有必须的 html, js, css。所有的页面内容都包含在这个所谓的主页面中。但在写的时候，还是会分开写（页面片段），然后在交互的时候由路由程序动态载入，单页面的页面跳转，仅刷新局部资源。多应用于pc端。</span><br><span class="line">多页面（MPA），就是指一个应用中有多个页面，页面跳转时是整页刷新</span><br><span class="line">单页面的优点：</span><br><span class="line">用户体验好，快，内容的改变不需要重新加载整个页面，基于这一点spa对服务器压力较小；前后端分离；页面效果会比较炫酷（比如切换页面内容时的专场动画）。</span><br><span class="line">单页面缺点：</span><br><span class="line">不利于seo；导航不可用，如果一定要导航需要自行实现前进、后退。（由于是单页面不能用浏览器的前进后退功能，所以需要自己建立堆栈管理）；初次加载时耗时多；页面复杂度提高很多</span><br></pre></td></tr></table></figure>

<h3 id="为什么说vue是一个渐进式的javascript框架，渐进式是什么意思？"><a href="#为什么说vue是一个渐进式的javascript框架，渐进式是什么意思？" class="headerlink" title="为什么说vue是一个渐进式的javascript框架，渐进式是什么意思？"></a>为什么说vue是一个渐进式的javascript框架，渐进式是什么意思？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">vue允许你将一个页面分割成可复用的组件，每个组件都包含属于自己的html、css、js用来渲染网页中相应的地方。</span><br><span class="line">对于vue的使用可大可小，它都会有相应的方式来整合到你的项目中。所以说它是一个渐进式的框架。</span><br><span class="line"></span><br><span class="line">vue是响应式的（reactive）这是vue最独特的特性，也就是说当我们的数据变更时，vue会帮你更新所有网页中用到它的地方。</span><br></pre></td></tr></table></figure>

<h3 id="vue的性能优化"><a href="#vue的性能优化" class="headerlink" title="vue的性能优化"></a>vue的性能优化</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">路由懒加载、图片懒加载、第三方组件库按需引入、keep-alive缓存页面、使用v-show复用DOM、避免v-<span class="keyword">if</span>与v-<span class="keyword">for</span>同时使用</span><br></pre></td></tr></table></figure>
<h3 id="为什么避免v-for和v-if同时使用？"><a href="#为什么避免v-for和v-if同时使用？" class="headerlink" title="为什么避免v-for和v-if同时使用？"></a>为什么避免v-for和v-if同时使用？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">v-<span class="keyword">for</span>比v-<span class="keyword">if</span>优先级高，使用的话每次v-<span class="keyword">for</span>都会v-<span class="keyword">if</span>判断，影响性能</span><br></pre></td></tr></table></figure>
<h3 id="vue的两个核心点"><a href="#vue的两个核心点" class="headerlink" title="vue的两个核心点"></a>vue的两个核心点</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">数据驱动、组件系统</span><br><span class="line"></span><br><span class="line">数据驱动：ViewModel，保证数据和视图的一致性。</span><br><span class="line">组件系统：应用类UI可以看作全部是由组件树构成的</span><br></pre></td></tr></table></figure>
<h3 id="为什么使用虚拟DOM"><a href="#为什么使用虚拟DOM" class="headerlink" title="为什么使用虚拟DOM"></a>为什么使用虚拟DOM</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">创建真实DOM的代价高，虚拟dom由于本质是一个js对象，因此天生具备跨平台的能力，可以实现在不同平台的准确显示。</span><br><span class="line"></span><br><span class="line">(<span class="number">1</span>) 虚拟dom是什么？</span><br><span class="line">    vue2.x才有的虚拟dom；本质是js对象；</span><br><span class="line">(<span class="number">2</span>) 虚拟dom在vue中做了什么？</span><br><span class="line">    [<span class="number">1</span>].将真实dom转化虚拟dom（js对象）;</span><br><span class="line">    [<span class="number">2</span>].更新的时候做对比；</span><br><span class="line">(<span class="number">3</span>) 虚拟dom是如何提升vue的渲染效率的？</span><br><span class="line">    [<span class="number">1</span>].局部更新(节点更新)；</span><br><span class="line">    [<span class="number">2</span>].将直接操作dom的地方拿到两个js对象之中去做比较</span><br><span class="line"></span><br><span class="line">虚拟 DOM 的实现原理主要包括以下 <span class="number">3</span> 部分：</span><br><span class="line"></span><br><span class="line">用 JavaScript 对象模拟真实 DOM 树，对真实 DOM 进行抽象；</span><br><span class="line"></span><br><span class="line">diff 算法 — 比较两棵虚拟 DOM 树的差异；</span><br><span class="line"></span><br><span class="line">pach 算法 — 将两个虚拟 DOM 对象的差异应用到真正的 DOM 树</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="vue组件销毁方法"><a href="#vue组件销毁方法" class="headerlink" title="vue组件销毁方法"></a>vue组件销毁方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、使用 v-<span class="keyword">if</span> 当v-<span class="keyword">if</span>为<span class="literal">true</span>时就会重新渲染组件 （手动销毁）</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">test</span> <span class="attr">v-if</span>=<span class="string">&quot;reCreate&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">test</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;close&quot;</span>&gt;</span>点击成功销毁<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;open&quot;</span>&gt;</span>点击成功创建<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">reCreate</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">menuTree</span>: []</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="function"><span class="title">open</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">this</span>.reCreate= <span class="literal">true</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="function"><span class="title">close</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">this</span>.reCreate = <span class="literal">false</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//或者监听</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">watch</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="function"><span class="title">menuTree</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">this</span>.reFresh= <span class="literal">false</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">this</span>.$nextTick(<span class="function">()=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">this</span>.reFresh = <span class="literal">true</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、绑定key值  改变key值  （手动销毁）</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">test</span> <span class="attr">:key</span>=<span class="string">&quot;key&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">test</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;reCreate&quot;</span>&gt;</span>点击重新创建<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">key</span>: <span class="number">0</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="function"><span class="title">reCreate</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">this</span>.key++</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//或者监听</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">watch</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      $route()&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        ++<span class="built_in">this</span>.menuKey</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">   &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、$destroy</span><br><span class="line">$destroy是组件内部销毁自已。和外部销毁(v-<span class="keyword">if</span>)的区别在于，内部销毁不会移除页面上已有的DOM的。所以一般需要加上移除DOM的代码</span><br><span class="line"><span class="function"><span class="title">destroyElement</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.$destroy();</span><br><span class="line">  <span class="built_in">this</span>.$el.parentNode.removeChild(<span class="built_in">this</span>.$el);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="MVC和MVVM"><a href="#MVC和MVVM" class="headerlink" title="MVC和MVVM"></a>MVC和MVVM</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">MVC包括view视图层、controller控制层、model数据层。各部分之间的通信都是单向的</span><br><span class="line"></span><br><span class="line">MVVM包括view视图层、model数据层、viewmodel层。各部分通信都是双向的</span><br></pre></td></tr></table></figure>

<h3 id="v-model的原理-双向数据绑定原理"><a href="#v-model的原理-双向数据绑定原理" class="headerlink" title="v-model的原理/双向数据绑定原理"></a>v-model的原理/双向数据绑定原理</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vue 双向数据绑定是通过 数据劫持 结合 发布订阅模式的方式来实现的， 也就是说数据和视图同步，数据发生变化，视图跟着变化，视图变化，数据也随之发生改变；</span><br><span class="line">核心：关于VUE双向数据绑定，其核心是 <span class="built_in">Object</span>.defineProperty()方法。</span><br><span class="line"></span><br><span class="line">v-model用于表单数据的双向绑定，其实它就是一个语法糖，这个背后就做了两个操作：</span><br><span class="line">v-bind绑定一个value属性；</span><br><span class="line">v-on指令给当前元素绑定input事件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">发布订阅模式 定义了一种一对多的依赖关系，让多个订阅者对象同时监听某一个主题对象。这个主题对象在自身状态变化时，会通知所有订阅者对象，使它们能够自动更新自己的状态</span><br></pre></td></tr></table></figure>


<h3 id="vue生命周期"><a href="#vue生命周期" class="headerlink" title="vue生命周期"></a>vue生命周期</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">什么是vue生命周期?</span><br><span class="line"></span><br><span class="line">    Vue实例从创建到销毁的过程，就是生命周期</span><br><span class="line"></span><br><span class="line">Vue声明周期的作用是什么？</span><br><span class="line">    它的生命周期中有多个事件钩子，让我们在控制整个Vue实例的过程时更容易形成好的逻辑</span><br><span class="line"></span><br><span class="line">Vue生命周期总共有几个阶段？(创建-&gt;加载-&gt;更新-&gt;销毁)</span><br><span class="line">  <span class="number">8</span>个阶段：</span><br><span class="line">    创建前 beforeCreate / 创建前后 created，</span><br><span class="line">    载入前 beforeMount  / 载入后   mounted，</span><br><span class="line">    更新前 beforeUpdate / 更新后   updated，</span><br><span class="line">    销毁前 beforeDestory/ 销毁后   destroyed。</span><br><span class="line"></span><br><span class="line">第一次页面加载会触发那几个钩子？</span><br><span class="line">    第一次页面加载时会触发 </span><br><span class="line">        beforeCreate,created,</span><br><span class="line">        beforeMount,mounted  这几个钩子</span><br><span class="line"></span><br><span class="line">每个生命周期适合那些场景？</span><br><span class="line"><span class="number">1</span>、beforeCreate（创建前） ：数据观测和初始化事件还未开始，此时 data 的响应式追踪、event/watcher 都还没有被设置，也就是说不能访问到data、computed、watch、methods上的方法和数据。</span><br><span class="line"><span class="number">2</span>、created（创建后） ：实例创建完成，实例上配置的 options 包括 data、computed、watch、methods 等都配置完成，但是此时渲染得节点还未挂载到 DOM，所以不能访问到 $el 属性。</span><br><span class="line"><span class="number">3</span>、beforeMount（挂载前） ：在挂载开始之前被调用，相关的render函数首次被调用。实例已完成以下的配置：编译模板，把data里面的数据和模板生成html。此时还没有挂载html到页面上。</span><br><span class="line"><span class="number">4</span>、mounted（挂载后） ：在el被新创建的 vm.$el 替换，并挂载到实例上去之后调用。实例已完成以下的配置：用上面编译好的html内容替换el属性指向的DOM对象。完成模板中的html渲染到html 页面中。此过程中进行ajax交互。</span><br><span class="line"><span class="number">5</span>、beforeUpdate（更新前） ：响应式数据更新时调用，此时虽然响应式数据更新了，但是对应的真实 DOM 还没有被渲染。</span><br><span class="line"><span class="number">6</span>、updated（更新后）：在由于数据更改导致的虚拟DOM重新渲染和打补丁之后调用。此时 DOM 已经根据响应式数据的变化更新了。调用时，组件 DOM已经更新，所以可以执行依赖于DOM的操作。然而在大多数情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。</span><br><span class="line"><span class="number">7</span>、beforeDestroy（销毁前） ：实例销毁之前调用。这一步，实例仍然完全可用，<span class="built_in">this</span> 仍能获取到实例。</span><br><span class="line"><span class="number">8</span>、destroyed（销毁后） ：实例销毁后调用，调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务端渲染期间不被调用。</span><br><span class="line">另外还有 keep-alive 独有的生命周期，分别为 activated 和 deactivated 。用 keep-alive 包裹的组件在切换时不会进行销毁，而是缓存到内存中并执行 deactivated 钩子函数，命中缓存渲染后会执行 activated 钩子函数    </span><br></pre></td></tr></table></figure>
<h3 id="第一次页面加载会触发哪几个钩子"><a href="#第一次页面加载会触发哪几个钩子" class="headerlink" title="第一次页面加载会触发哪几个钩子"></a>第一次页面加载会触发哪几个钩子</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">beforeCreate， created， beforeMount， mounted</span><br></pre></td></tr></table></figure>
<h3 id="vue获取数据在哪个周期函数"><a href="#vue获取数据在哪个周期函数" class="headerlink" title="vue获取数据在哪个周期函数"></a>vue获取数据在哪个周期函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">一般 created/beforeMount/mounted 皆可.</span><br><span class="line">比如如果你要操作 DOM , 那肯定 mounted 时候才能操作</span><br></pre></td></tr></table></figure>
<h3 id="Vue的父子组件生命周期钩子函数执行顺序"><a href="#Vue的父子组件生命周期钩子函数执行顺序" class="headerlink" title="Vue的父子组件生命周期钩子函数执行顺序"></a>Vue的父子组件生命周期钩子函数执行顺序</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 加载渲染过程 --&gt;</span><br><span class="line">&lt;!-- 父beforeCreate -&gt; 父created -&gt; 父beforeMount -&gt; 子beforeCreate -&gt; 子created -&gt; 子beforeMount -&gt; 子mounted -&gt; 父mounted --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 子组件更新过程 --&gt;</span><br><span class="line">&lt;!-- 父beforeUpdate -&gt; 子beforeUpdate -&gt; 子updaed -&gt; 父updated --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 父组件跟新过程 --&gt;</span><br><span class="line">&lt;!-- 父beforeUpdate -&gt; 父updated --&gt;</span><br><span class="line">&lt;!-- 销毁过程 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 父beforeDestroy -&gt; 子beforeDestroy -&gt; 子destroyed -&gt;父destroyed --&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Vue组件通信"><a href="#Vue组件通信" class="headerlink" title="Vue组件通信"></a>Vue组件通信</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">props/$emit、$refs、EventBus、$parent、vuex、provide / inject</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>）props、$emit</span><br><span class="line">父传子：</span><br><span class="line">在父组件中，用v-bind动态绑定一个自定义属性，给子组件传递数据。</span><br><span class="line">在子组件中，使用props接收父组件传过来的数据。</span><br><span class="line"></span><br><span class="line">子传父：</span><br><span class="line">子组件通过事件的方式，利用$emit给父组件传值。($emit的第一个参数是父组件自定义事件的方法名，后面的“value”是子组件要给父组件传递的数据）。</span><br><span class="line">在父组件中，绑定一个自定义事件，用来接收子组件传来的值。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>）ref</span><br><span class="line">父组件在使用子组件的时候设置ref</span><br><span class="line">父组件通过设置子组件ref来获取数据</span><br><span class="line">父组件</span><br><span class="line"><span class="comment">//&lt;Children ref =&quot;foo&quot;&gt;</span></span><br><span class="line">    <span class="built_in">this</span>.$refs.foo  <span class="comment">// 获取子组件实例，通过子组件实例我们就能拿到对应的数据</span></span><br><span class="line"></span><br><span class="line">$refs 可以用来获取子组件的数据（ref只在dom渲染完后才会有，可以在生命周期<span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;&#125;钩子中调用，或者在<span class="built_in">this</span>.$nextTick(<span class="function">()=&gt;</span>&#123;&#125;)中调用）。</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>)$parent <span class="comment">//可以用来从一个子组件访问父组件的实例</span></span><br><span class="line">    通过共同祖辈$parent或者$root搭建通信侨联</span><br><span class="line">    </span><br><span class="line">    兄弟组件</span><br><span class="line">    <span class="built_in">this</span>.$parent.on(<span class="string">&#x27;add&#x27;</span>,<span class="built_in">this</span>.add)</span><br><span class="line">    另一个兄弟组件</span><br><span class="line">    <span class="built_in">this</span>.$parent.emit(<span class="string">&#x27;add&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">provide / inject：</span><br><span class="line">在祖先组件定义provide属性，返回传递的值</span><br><span class="line">在后代组件通过inject接收组件传递过来的值</span><br><span class="line">传递的时候：以对象形式传递过去</span><br><span class="line"><span class="function"><span class="title">provide</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">sonDate</span>: <span class="string">&#x27;子组件数据&#x27;</span>,</span><br><span class="line">      <span class="attr">childDate</span>: <span class="string">&#x27;孙组件数据&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"> 接收的时候和props接收方式一样：</span><br><span class="line"> <span class="attr">inject</span>:[<span class="string">&#x27;参数&#x27;</span>] <span class="comment">// inject:[&#x27;sonDate&#x27;]</span></span><br><span class="line"></span><br><span class="line">EventBus <span class="comment">//兄弟组件传值</span></span><br><span class="line">bus.js</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> bus = <span class="keyword">new</span> Vue()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> bus </span><br><span class="line">使用：先引入bus文件</span><br><span class="line">传递：bus.$emit(<span class="string">&#x27;message&#x27;</span>,<span class="string">&#x27;传递的值&#x27;</span>)</span><br><span class="line">接收：bus.$on(<span class="string">&#x27;message&#x27;</span>,<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;e就是获取到的值&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue 组件间通信只要指以下 <span class="number">3</span> 类通信：父子组件通信、隔代组件通信、兄弟组件通信，下面我们分别介绍每种通信方式且会说明此种方法可适用于哪类组件间通信。</span><br><span class="line">（<span class="number">1</span>）props / $emit 适用 父子组件通信</span><br><span class="line"></span><br><span class="line">这种方法是 Vue 组件的基础，相信大部分同学耳闻能详，所以此处就不举例展开介绍。</span><br><span class="line">（<span class="number">2</span>）ref / $refs</span><br><span class="line"></span><br><span class="line">ref：如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例</span><br><span class="line">$parent / $children：访问父 / 子实例</span><br><span class="line">（<span class="number">3</span>）EventBus （$emit / $on）适用于 父子、隔代、兄弟组件通信</span><br><span class="line"></span><br><span class="line">这种方法通过一个空的 Vue 实例作为中央事件总线（事件中心），用它来触发事件和监听事件，从而实现任何组件间的通信，包括父子、隔代、兄弟组件。</span><br><span class="line">（<span class="number">4</span>）$attrs/$listeners适用于 隔代组件通信</span><br><span class="line"></span><br><span class="line">$attrs：包含了父作用域中不被 prop 所识别 (且获取) 的特性绑定 ( <span class="class"><span class="keyword">class</span> 和 <span class="title">style</span> 除外 )。当一个组件没有声明任何 <span class="title">prop</span> 时，这里会包含所有父作用域的绑定 ( <span class="title">class</span> 和 <span class="title">style</span> 除外 )，并且可以通过 <span class="title">v</span>-<span class="title">bind</span></span>=<span class="string">&quot;$attrs&quot;</span> 传入内部组件。通常配合 inheritAttrs 选项一起使用。</span><br><span class="line">$listeners：包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过 v-on=<span class="string">&quot;$listeners&quot;</span> 传入内部组件</span><br><span class="line">（<span class="number">5</span>）provide / inject适用于 隔代组件通信</span><br><span class="line"></span><br><span class="line">祖先组件中通过 provider 来提供变量，然后在子孙组件中通过 inject 来注入变量。provide / inject API 主要解决了跨级组件间的通信问题，不过它的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立了一种主动提供与依赖注入的关系。</span><br><span class="line">（<span class="number">6</span>）Vuex适用于 父子、隔代、兄弟组件通信</span><br><span class="line"></span><br><span class="line">Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 store（仓库）。“store” 基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。</span><br><span class="line">Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</span><br><span class="line">改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化。</span><br></pre></td></tr></table></figure>
<h3 id="EventBus-事件总线"><a href="#EventBus-事件总线" class="headerlink" title="EventBus 事件总线"></a>EventBus 事件总线</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">介绍</span><br><span class="line">通常作为多个模块间的通信机制，相当于一个事件管理中心，一个模块发送消息，其它模块接受消息，就达到了通信的作用。</span><br><span class="line"></span><br><span class="line">原理</span><br><span class="line">本质上是采用了发布-订阅的设计模式，比如多个模块 A、B、C 订阅了一个事件 EventX，然后某一个模块 X 在事件总线发布了这个事件，那么事件总线会负责通知所有订阅者 A、B、C，它们都能收到这个通知消息，同时还可以传递参数</span><br></pre></td></tr></table></figure>
<h3 id="vue单向数据流"><a href="#vue单向数据流" class="headerlink" title="vue单向数据流"></a>vue单向数据流</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> Vue 的单向数据流：指数据从父组件传递给子组件，子组件没有权利直接修改父组件传来的数据，即子组件从 props 中直接获取的数据，只能请求父组件修改数据再传给子组件。父级属性值的更新会下行流动到子组件中。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 为什么不能子组件直接修改父组件传来的值呢？父组件的值可能会不断发生变化，那么如果我们子组件对父组件传来的值比如说 props 有一个 number，子组件收到了 number=<span class="number">1</span>，在收到后，子组件直接改变number 的值为 <span class="number">5</span>，去做些事情，但还未做时父组件数据更新了，传过来一个值 <span class="number">3</span>，也就是说子组件刚将其变为 <span class="number">5</span>，父组件又把它变成了 <span class="number">3</span>，可能影响子组件的使用。说的官方一些，就是父组件的值更新时，子组件中 props 的值也会发生更新。</span><br><span class="line"></span><br><span class="line"><span class="comment">//父组件</span></span><br><span class="line">&lt;section id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">custom-component</span> <span class="attr">:count</span>=<span class="string">&quot;count&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">custom-component</span>&gt;</span></span></span><br><span class="line">&lt;/section&gt;</span><br><span class="line"><span class="comment">//子组件</span></span><br><span class="line">Vue.component(<span class="string">&quot;custom-component&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;count&#x27;</span>],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">          &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;h1&gt;一个自定义模版&lt;/h1&gt;</span></span><br><span class="line"><span class="string">            &lt;input type=&quot;button&quot;  @click=&quot;changeCount&quot; value=&quot;按钮&quot;/&gt;</span></span><br><span class="line"><span class="string">            &#123;&#123;count&#125;&#125;</span></span><br><span class="line"><span class="string">          &lt;/div&gt;`</span>,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">changeCount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.count++   <span class="comment">//直接修改是会报错的</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 在子组件中直接用 v-model 绑定父组件传过来的数据是不合理的，如果希望修改父组件传给子组件的值：</span><br><span class="line"></span><br><span class="line">（<span class="number">1</span>）在子组件 data 中创建一个变量获取 props 中的值，再改变这个 data 中的值。</span><br><span class="line">    <span class="comment">//子组件</span></span><br><span class="line">     Vue.component(<span class="string">&quot;custom-component&quot;</span>, &#123;</span><br><span class="line">            <span class="comment">//作为data中局部数据的初始值来过渡，必须以函数形式申明，</span></span><br><span class="line">            <span class="comment">//相当于子组件里操作的都是this.count的指针</span></span><br><span class="line">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    <span class="attr">initCount</span>: <span class="built_in">this</span>.count  <span class="comment">//建一个变量获取 props 中的值</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">props</span>: [<span class="string">&#x27;count&#x27;</span>],</span><br><span class="line">            <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;div&gt;</span></span><br><span class="line"><span class="string">                &lt;h1&gt;一个自定义模版&lt;/h1&gt;</span></span><br><span class="line"><span class="string">                &lt;input type=&quot;button&quot;  @click=&quot;changeCount&quot; value=&quot;按钮&quot;/&gt;</span></span><br><span class="line"><span class="string">                &lt;!--该处应该是使用initCount而不是count--&gt;</span></span><br><span class="line"><span class="string">                &#123;&#123;initCount&#125;&#125;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;`</span>,</span><br><span class="line">            <span class="attr">methods</span>: &#123;</span><br><span class="line">                <span class="function"><span class="title">changeCount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                  <span class="comment">//这里计算的也是initCount</span></span><br><span class="line">                    <span class="built_in">this</span>.initCount++</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>）子组件使用 $emit 发出一个事件，让父组件接收去修改这个值</span><br><span class="line">    <span class="comment">//父组件</span></span><br><span class="line">    &lt;section id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>父组件使用了count<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">        &lt;!--需要在自定义模版标签上添加一个自定义事件来接收count值--&gt;</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">custom-component</span> <span class="attr">:count</span>=<span class="string">&quot;count&quot;</span> @<span class="attr">increment-click</span>=<span class="string">&quot;countHandle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">custom-component</span>&gt;</span></span></span><br><span class="line">    &lt;/section&gt;</span><br><span class="line">    <span class="comment">//父组件方法</span></span><br><span class="line">    methods: &#123;</span><br><span class="line">        <span class="function"><span class="title">countHandle</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">//此处的this.count 属于父组件的count</span></span><br><span class="line">        <span class="built_in">this</span>.count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//子组件</span></span><br><span class="line">    Vue.component(<span class="string">&quot;custom-component&quot;</span>, &#123;</span><br><span class="line">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    <span class="attr">initCount</span>: <span class="built_in">this</span>.count</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//与直接使用data不同的是这里添加选项参数计算属性`computed`</span></span><br><span class="line">            <span class="attr">computed</span>: &#123;</span><br><span class="line">                <span class="function"><span class="title">initCount2</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">this</span>.initCount;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">props</span>: [<span class="string">&#x27;count&#x27;</span>],</span><br><span class="line">            <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;div&gt;</span></span><br><span class="line"><span class="string">                &lt;h1&gt;一个自定义模版&lt;/h1&gt;</span></span><br><span class="line"><span class="string">                &lt;input type=&quot;button&quot;  @click=&quot;changeCount&quot; value=&quot;按钮&quot;/&gt;</span></span><br><span class="line"><span class="string">                &lt;!--这里现在使用的是computed里的函数返回结果--&gt;</span></span><br><span class="line"><span class="string">                &#123;&#123;initCount2&#125;&#125;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;`</span>,</span><br><span class="line">            <span class="attr">methods</span>: &#123;</span><br><span class="line">                <span class="function"><span class="title">changeCount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                    <span class="built_in">this</span>.initCount++;</span><br><span class="line">                    <span class="comment">//触发一下&quot;increment-click&quot;事件， 通知父组件</span></span><br><span class="line">                    <span class="built_in">this</span>.$emit(<span class="string">&quot;increment-click&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>


<h3 id="v-if与v-show的区别？使用场景分别是什么？"><a href="#v-if与v-show的区别？使用场景分别是什么？" class="headerlink" title="v-if与v-show的区别？使用场景分别是什么？"></a>v-if与v-show的区别？使用场景分别是什么？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">v-<span class="keyword">if</span>：显示隐藏是将dom元素整个添加或删除；适用于运行时条件很少改变。</span><br><span class="line"></span><br><span class="line">v-show：隐藏则是为该元素添加css–display:none，dom元素依旧还在；适用于非常频繁地切换。（不能用于权限操作）</span><br></pre></td></tr></table></figure>

<h3 id="vue组件中的data-为什么是函数？"><a href="#vue组件中的data-为什么是函数？" class="headerlink" title="vue组件中的data()为什么是函数？"></a>vue组件中的data()为什么是函数？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">每一个组件都有自己的私有作用域，确保各组件数据不会被干扰。</span><br><span class="line"></span><br><span class="line">单纯的写成对象形式，就是所有的组件实例共用了一个data，这样改一个全都改了。</span><br></pre></td></tr></table></figure>

<h3 id="router和route的区别"><a href="#router和route的区别" class="headerlink" title="router和route的区别"></a>router和route的区别</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">route是当前正在跳转的路由对象，可以从route里面获取hash,name,path,query,mathsr等属性方法（接收参数时使用）</span><br><span class="line"></span><br><span class="line">router跳转连接就可以使用</span><br></pre></td></tr></table></figure>

<h3 id="computed-计算属性和watch监听区别"><a href="#computed-计算属性和watch监听区别" class="headerlink" title="computed 计算属性和watch监听区别?"></a>computed 计算属性和watch监听区别?</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">computed:</span><br><span class="line">　　　　当一个属性受多个属性影响的时候就需要用到computed</span><br><span class="line">　　　　最典型的栗子： 购物车商品结算的时候</span><br><span class="line"><span class="attr">watch</span>:</span><br><span class="line">　　　　当一条数据影响多条数据的时候就需要用watch</span><br><span class="line">　　　　栗子：搜索数据</span><br></pre></td></tr></table></figure>
<h3 id="vue实现打印"><a href="#vue实现打印" class="headerlink" title="vue实现打印"></a>vue实现打印</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">插件 vue-print-nb 、print.js</span><br><span class="line"></span><br><span class="line">导出： vue-json-excel</span><br></pre></td></tr></table></figure>

<h3 id="vue请求-axios-封装"><a href="#vue请求-axios-封装" class="headerlink" title="vue请求(axios)封装"></a>vue请求(axios)封装</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">在until文件夹下创建 request.js 文件</span><br><span class="line">创建 axios 以及封装</span><br><span class="line">    请求拦截(request,在发送请求之前 给每个接口添加token，或者添加公共参数之类的)和</span><br><span class="line">    相应拦截(response,根据 后端返回来的状态码判定执行不同业务，token是否过期，登录状态、授权)</span><br></pre></td></tr></table></figure>
<h3 id="封装过后的axios中加了拦截器heder中加token-有的接口需要token-有的接口不需要带token-的问题解决办法"><a href="#封装过后的axios中加了拦截器heder中加token-有的接口需要token-有的接口不需要带token-的问题解决办法" class="headerlink" title="封装过后的axios中加了拦截器heder中加token 有的接口需要token 有的接口不需要带token 的问题解决办法"></a>封装过后的axios中加了拦截器heder中加token 有的接口需要token 有的接口不需要带token 的问题解决办法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">第一种实现思路：</span><br><span class="line">在axios拦截器中获取当前的api，将不需要添加token的api存储到一个数组中，将其遍历比较</span><br><span class="line"><span class="comment">// request拦截器</span></span><br><span class="line"><span class="comment">// 不加token的api</span></span><br><span class="line"><span class="keyword">const</span> exceptUrls = [<span class="string">&#x27;xxx&#x27;</span>,<span class="string">&#x27;xxx&#x27;</span>,<span class="string">&#x27;xxx&#x27;</span>]</span><br><span class="line">service.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (getToken() &amp;&amp; !isToken &amp;&amp; exceptUrls.indexOf(config.url) ===-<span class="number">1</span>) &#123;</span><br><span class="line">    config.headers[<span class="string">&#x27;Authorization&#x27;</span>] = getToken() <span class="comment">// 让每个请求携带自定义token 请根据实际情况自行修改</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error)</span><br><span class="line">    <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">第二种实现思路：</span><br><span class="line">在api中添加一个参数，参数带着<span class="built_in">Boolean</span>类型的标识，然后在axios拦截器中获取进行判断</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">xxx</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;<span class="string">&#x27;isToken&#x27;</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">    data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">axios拦截器</span><br><span class="line"><span class="comment">// request拦截器</span></span><br><span class="line">service.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 是否需要设置 token</span></span><br><span class="line">  <span class="keyword">const</span> isToken = (config.headers || &#123;&#125;).isToken === <span class="literal">false</span></span><br><span class="line">  <span class="keyword">if</span> (getToken() &amp;&amp; !isToken ) &#123;</span><br><span class="line">    config.headers[<span class="string">&#x27;Authorization&#x27;</span>] = <span class="string">&#x27;Bearer &#x27;</span> + getToken() <span class="comment">// 让每个请求携带自定义token 请根据实际情况自行修改</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error)</span><br><span class="line">    <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="vue路由封装"><a href="#vue路由封装" class="headerlink" title="vue路由封装"></a>vue路由封装</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 创建路由文件</span><br><span class="line">新建 src/router/index.js</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 将路由实例，传入到 vue 实例</span><br><span class="line">在main.js中</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、设置路由守卫，对路由前置守卫进行了封装，实现了以下功能：</span><br><span class="line"></span><br><span class="line">判断用户是否已登录，如果未登录则重定向到登录页。</span><br><span class="line">判断用户是否有权限访问该页面，如果没有则重定向到 <span class="number">403</span> 页面。</span><br><span class="line">根据路由 meta 设置标题。</span><br><span class="line">错误处理：根据错误码重定向到对应的页面</span><br></pre></td></tr></table></figure>
<h3 id="vue权限是怎么弄的"><a href="#vue权限是怎么弄的" class="headerlink" title="vue权限是怎么弄的"></a>vue权限是怎么弄的</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">初始化的时候先挂载不需要权限控制的路由，比如登录页，<span class="number">404</span>等错误页。如果用户通过URL进行强制访问，则会直接进入<span class="number">404</span>，相当于从源头上做了控制。</span><br><span class="line"></span><br><span class="line">登录后，获取用户的权限信息，然后筛选有权限访问的路由，在全局路由守卫里进行调用addRoutes添加路由</span><br></pre></td></tr></table></figure>

<h3 id="怎么重定向页面？"><a href="#怎么重定向页面？" class="headerlink" title="怎么重定向页面？"></a>怎么重定向页面？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">	<span class="attr">routes</span>:[</span><br><span class="line">		&#123; <span class="attr">path</span>: <span class="string">&#x27;/a&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/b&#x27;</span> &#125;</span><br><span class="line">	]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">怎么配置<span class="number">404</span>页面？</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">	<span class="attr">routes</span>:[</span><br><span class="line">		&#123; </span><br><span class="line">			<span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>, <span class="attr">redirect</span>: &#123;<span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>&#125;</span><br><span class="line">		 &#125;</span><br><span class="line">	]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="vue-router-有哪几种导航守卫"><a href="#vue-router-有哪几种导航守卫" class="headerlink" title="vue-router 有哪几种导航守卫?"></a>vue-router 有哪几种导航守卫?</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">全局守卫、路由独享守卫、路由组件内的守卫</span><br><span class="line"></span><br><span class="line"><span class="comment">//路由的钩子函数总结有6个</span></span><br><span class="line"></span><br><span class="line">全局的路由钩子函数：</span><br><span class="line">    beforeEach 全局前置守卫，进入路由之前</span><br><span class="line">    afterEach  全局后置钩子，进入路由之后</span><br><span class="line"></span><br><span class="line">单个的路由钩子函数：</span><br><span class="line">    beforeEnter</span><br><span class="line"></span><br><span class="line">组件内的路由钩子函数：</span><br><span class="line">    beforeRouteEnter   进入路由前</span><br><span class="line">    beforeRouteLeave   离开当前路由时</span><br><span class="line">    beforeRouteUpdate  路由复用同一个组件时</span><br></pre></td></tr></table></figure>
<h3 id="Vue-如何获取dom"><a href="#Vue-如何获取dom" class="headerlink" title="Vue 如何获取dom?"></a>Vue 如何获取dom?</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ref=“domName” 用法：<span class="built_in">this</span>.$refs.domName</span><br></pre></td></tr></table></figure>
<h3 id="nextTick的使用？"><a href="#nextTick的使用？" class="headerlink" title="$ nextTick的使用？"></a>$ nextTick的使用？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">当你修改了data的值然后马上获取这个dom元素的值，是不能获取到更新后的值，</span><br><span class="line">你需要使用$nextTick这个回调，让修改后的data值渲染更新到dom元素之后在获取，才能成功</span><br></pre></td></tr></table></figure>
<h3 id="created-钩子函数中进行DOM操作时"><a href="#created-钩子函数中进行DOM操作时" class="headerlink" title="created()钩子函数中进行DOM操作时"></a>created()钩子函数中进行DOM操作时</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;HelloWorld&#x27;</span>,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">msg</span>: <span class="string">&#x27;HelloWorld&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">created</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> that=<span class="built_in">this</span>;</span><br><span class="line">    that.$refs.domName;  <span class="comment">//是报错的</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//在created()钩子函数执行的时候DOM 其实并未进行任何渲染，而此时进行DOM操作无异于徒劳，所以此处一定要将DOM操作的js代码放进Vue.nextTick()的回调函数中。与之对应的就是mounted钩子函数，因为该钩子函数执行时所有的DOM挂载已完成</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//正确写法</span></span><br><span class="line">    that.$nextTick(<span class="function">()=&gt;</span>&#123; <span class="comment">//不使用this.$nextTick()方法会报错</span></span><br><span class="line">        </span><br><span class="line">        that.$refs.domName</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Vue-强制更新数据的方法"><a href="#Vue-强制更新数据的方法" class="headerlink" title="Vue 强制更新数据的方法"></a>Vue 强制更新数据的方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">法一：</span><br><span class="line"><span class="built_in">this</span>.$forceUpdate(); <span class="comment">//使用forceUpdate强制渲染，更新视图和数据。注：全局强制刷新，性能消耗高</span></span><br><span class="line"></span><br><span class="line">法二:</span><br><span class="line"><span class="built_in">this</span>.$set(object,index,<span class="keyword">new</span>);</span><br><span class="line">Vue.set(object,index,<span class="keyword">new</span>);</span><br><span class="line"><span class="comment">// 参数一：要改变的数组或对象</span></span><br><span class="line"><span class="comment">// 参数二：下标，或者元素名称</span></span><br><span class="line"><span class="comment">// 参数三：得到的新的值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.$set()方法是Vue自带的可对数组和对象进行赋值，并触发监听的方法。注：指向性强制刷新，性能消耗低</span><br><span class="line"></span><br><span class="line">例如</span><br><span class="line">    下拉框不能实时更新(强制刷新下)</span><br><span class="line">    &lt;el-select v-model=<span class="string">&quot;form.workZoneIdsArr&quot;</span> placeholder=<span class="string">&quot;请选择所属工区&quot;</span> @change=<span class="string">&quot;$forceUpdate()&quot;</span>&gt;</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">el-option</span> <span class="attr">v-for</span>=<span class="string">&quot;dict in addTheirWorkAreaList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;dict.id&quot;</span> <span class="attr">:label</span>=<span class="string">&quot;dict.name&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;dict.id&quot;</span> /&gt;</span></span></span><br><span class="line">    &lt;/el-select&gt;</span><br></pre></td></tr></table></figure>
<h3 id="vue改变数据DOM不更新的解决方案"><a href="#vue改变数据DOM不更新的解决方案" class="headerlink" title="vue改变数据DOM不更新的解决方案"></a>vue改变数据DOM不更新的解决方案</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、数组</span><br><span class="line">由于 JavaScript 的限制，Vue 不能检测以下变动的数组：</span><br><span class="line">当你利用索引直接设置一个项时，例如：<span class="built_in">this</span>.items[indexOfItem] = newValue</span><br><span class="line">当你修改数组的长度时，例如：<span class="built_in">this</span>.items.length = newLength</span><br><span class="line"></span><br><span class="line">解决方案：</span><br><span class="line">Vue.set(<span class="built_in">this</span>.items, indexOfItem, newValue)</span><br><span class="line"><span class="built_in">this</span>.items.splice(indexOfItem, <span class="number">1</span>, newValue)</span><br><span class="line"><span class="built_in">this</span>.$set(<span class="built_in">this</span>.items, indexOfItem, newValue)  (<span class="built_in">this</span>.$set 实例方法是全局方法 Vue.set 的一个别名)</span><br><span class="line"><span class="built_in">this</span>.items.splice(newLength)</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、对象</span><br><span class="line">由于 JavaScript 的限制，Vue 不能检测对象属性的添加或删除</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">userInfo</span>: &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">方案一 利用Vue.set(object, key, value)</span><br><span class="line">Vue.set(vm.userInfo, <span class="string">&#x27;sex&#x27;</span>, <span class="string">&#x27;man&#x27;</span>)</span><br><span class="line"></span><br><span class="line">方案二 利用 <span class="built_in">this</span>.$set(<span class="built_in">this</span>.object, key, value),这只是全局Vue.set的别名</span><br><span class="line"><span class="built_in">this</span>.$set(<span class="built_in">this</span>.userInfo, <span class="string">&#x27;sex&#x27;</span>, <span class="string">&#x27;man&#x27;</span>)</span><br><span class="line"></span><br><span class="line">方案三 利用<span class="built_in">Object</span>.assign(&#123;&#125;, <span class="built_in">this</span>.obj,&#123;...&#125;)</span><br><span class="line"><span class="built_in">this</span>.userInfo = <span class="built_in">Object</span>.assign(&#123;&#125;, <span class="built_in">this</span>.userInfo, &#123;</span><br><span class="line">    <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;man&#x27;</span>,</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">删除对象属性的方法(前面对象名，后面具体属性名)</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.$delete(<span class="built_in">this</span>.userInfo, <span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="delete和Vue-delete删除数组的区别"><a href="#delete和Vue-delete删除数组的区别" class="headerlink" title="delete和Vue.delete删除数组的区别"></a>delete和Vue.delete删除数组的区别</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span>只是被删除的元素变成了 empty/<span class="literal">undefined</span> 其他的元素的键值还是不变。</span><br><span class="line"></span><br><span class="line">Vue.delete 直接删除了数组 改变了数组的键值</span><br></pre></td></tr></table></figure>

<h3 id="异步请求适合在哪个生命周期调用？"><a href="#异步请求适合在哪个生命周期调用？" class="headerlink" title="异步请求适合在哪个生命周期调用？"></a>异步请求适合在哪个生命周期调用？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">可以在钩子函数 created、beforeMount、mounted 中进行调用，因为在这三个钩子函数中，data 已经创建，可以将服务端端返回的数据进行赋值。</span><br><span class="line"></span><br><span class="line">我一般在 created 钩子函数中调用异步请求，能更快获取到服务端数据，减少页面 loading 时间；</span><br></pre></td></tr></table></figure>
<h3 id="过滤器的作用？如何实现一个过滤器？使用场景？"><a href="#过滤器的作用？如何实现一个过滤器？使用场景？" class="headerlink" title="过滤器的作用？如何实现一个过滤器？使用场景？"></a>过滤器的作用？如何实现一个过滤器？使用场景？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">过滤器是用来过滤数据的，在vue中使用filters来过滤数据；使用场景：例如(时间/日期 格式化)</span><br></pre></td></tr></table></figure>
<h3 id="Vue中key是用来做什么的？为什么不推介使用index作为key"><a href="#Vue中key是用来做什么的？为什么不推介使用index作为key" class="headerlink" title="Vue中key是用来做什么的？为什么不推介使用index作为key"></a>Vue中key是用来做什么的？为什么不推介使用index作为key</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、使用key来给每个节点做一个唯一标识，key的作用主要是为了高效的更新虚拟DOM</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、当以数组的下标index作为index值时，其中一个元素（如增删改查）发生了变化就有可能导致所有元素的key值发生变化</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vue中key值的作用可以分为两种情况来考虑，话不多说</span><br><span class="line"></span><br><span class="line">这第一种情况是在v-<span class="keyword">if</span>中使用key。由于vue会尽可能高效渲染元素，通常会复用已有元素而不是从头开始渲染。因此当使用v-<span class="keyword">if</span>来实现元素切换的时候，如果切换前后含有相同类型的元素，那么这个元素就会被复用。如果是相同的input元素，那么切换前后用户输入不会被清除掉，这样是不符合需求的。因此可以通过使用key来唯一的识别这个元素，这个情况下，使用key的元素就会被复用。这个时候key的作用是用来识别一个独立的元素。</span><br><span class="line"></span><br><span class="line">第二种情况是v-<span class="keyword">for</span>中使用key、用v-<span class="keyword">for</span>更新已渲染过的元素列表时，它默认使用“就地复用”的测略。如果数据项的顺序发生了改变，vue不会移动DOM元素来匹配数据的顺序，而是简单复用此处的每个元素。因此通过每个列表提供一个key值，来以便vue跟踪元素的身份，从而高效的实现复用。这个时候key的作用是为了高效的更新渲染虚拟DOM</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="vue-常用事件修饰符"><a href="#vue-常用事件修饰符" class="headerlink" title="vue 常用事件修饰符"></a>vue 常用事件修饰符</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.stop 阻止点击事件冒泡</span><br><span class="line"></span><br><span class="line">.prevent 阻止默认事件</span><br><span class="line"></span><br><span class="line">.once 只执行一次</span><br><span class="line"></span><br><span class="line">.self 只在元素本身触发</span><br></pre></td></tr></table></figure>
<h3 id="如何让CSS只在当前组件中起作用？"><a href="#如何让CSS只在当前组件中起作用？" class="headerlink" title="如何让CSS只在当前组件中起作用？"></a>如何让CSS只在当前组件中起作用？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">在组件中的style前面加上scoped</span><br></pre></td></tr></table></figure>
<h3 id="keep-alive的作用是什么"><a href="#keep-alive的作用是什么" class="headerlink" title="keep-alive的作用是什么?"></a>keep-alive的作用是什么?</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">keep-alive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，或避免重新渲染  (后台管理系统的 面包屑)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>keep-alive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，避免重新渲染 ，其有以下特性：</p>
<p>一般结合路由和动态组件一起使用，用于缓存组件；<br>提供 include 和 exclude 属性，两者都支持字符串或正则表达式， include 表示只有名称匹配的组件会被缓存，exclude 表示任何名称匹配的组件都不会被缓存 ，其中 exclude 的优先级比 include 高；<br>对应两个钩子函数 activated 和 deactivated ，当组件被激活时，触发钩子函数 activated，当组件被移除时，触发钩子函数 deactivated</p>
</blockquote>
<h3 id="说出几种vue当中的指令和它的用法？"><a href="#说出几种vue当中的指令和它的用法？" class="headerlink" title="说出几种vue当中的指令和它的用法？"></a>说出几种vue当中的指令和它的用法？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">v-model双向数据绑定；</span><br><span class="line">v-<span class="keyword">for</span>循环；</span><br><span class="line">v-<span class="keyword">if</span> v-show 显示与隐藏；</span><br><span class="line">v-on事件；v-once: 只绑定一次。</span><br></pre></td></tr></table></figure>
<h3 id="vue-loader是什么？使用它的用途有哪些？"><a href="#vue-loader是什么？使用它的用途有哪些？" class="headerlink" title="vue-loader是什么？使用它的用途有哪些？"></a>vue-loader是什么？使用它的用途有哪些？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vue文件的一个加载器，将template/js/style转换成js模块。</span><br><span class="line"></span><br><span class="line">用途：js可以写es6、style样式可以scss或less、template可以加jade等</span><br></pre></td></tr></table></figure>
<h3 id="请说出vue-cli项目中src目录每个文件夹和文件的用法？"><a href="#请说出vue-cli项目中src目录每个文件夹和文件的用法？" class="headerlink" title="请说出vue.cli项目中src目录每个文件夹和文件的用法？"></a>请说出vue.cli项目中src目录每个文件夹和文件的用法？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">assets文件夹是放静态资源；</span><br><span class="line">components是放组件；</span><br><span class="line">router是定义路由相关的配置; </span><br><span class="line">app.vue是一个应用主组件；</span><br><span class="line">main.js是入口文件。</span><br></pre></td></tr></table></figure>
<h3 id="assets和static的区别"><a href="#assets和static的区别" class="headerlink" title="*assets和static的区别"></a>*assets和static的区别</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">相同点：assets和<span class="keyword">static</span>两个都是存放静态资源文件。</span><br><span class="line"></span><br><span class="line">不相同点：assets中存放的静态资源文件在项目打包时，会将assets中放置的静态资源文件进行打包上传，而压缩后的静态资源文件最终也都会放置在<span class="keyword">static</span>文件中跟着index.html一同上传至服务器。<span class="keyword">static</span>中放置的静态资源文件就不会要走打包压缩格式化等流程，而是直接进入打包好的目录，直接上传至服务器。因为避免了压缩直接进行上传，在打包时会提高一定的效率，但是<span class="keyword">static</span>中的资源文件由于没有进行压缩等操作，所以文件的体积也就相对于assets中打包后的文件提交较大点。在服务器中就会占据更大的空间。</span><br><span class="line"></span><br><span class="line">建议：将项目中template需要的样式文件js文件等都可以放置在assets中，走打包这一流程。减少体积。而项目中引入的第三方的资源文件如iconfoont.css等文件可以放置在<span class="keyword">static</span>中，因为这些引入的第三方文件已经经过处理，我们不再需要处理，直接上传</span><br></pre></td></tr></table></figure>
<h3 id="vue-router-是什么-它有哪些组件"><a href="#vue-router-是什么-它有哪些组件" class="headerlink" title="vue-router 是什么?它有哪些组件"></a>vue-router 是什么?它有哪些组件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vue用来写路由一个插件。router-link、router-view</span><br></pre></td></tr></table></figure>
<h3 id="vue路由跳转方式有哪些"><a href="#vue路由跳转方式有哪些" class="headerlink" title="vue路由跳转方式有哪些"></a>vue路由跳转方式有哪些</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、用“&lt;router-link :to=<span class="string">&quot;&#123;..&#125;&quot;</span>&gt;”语句；</span><br><span class="line"></span><br><span class="line">    <span class="number">1</span>). 不带参数</span><br><span class="line">    &lt;router-link :to=<span class="string">&quot;&#123;name:&#x27;home&#x27;&#125;&quot;</span>&gt; </span><br><span class="line">    &lt;router-link :to=&quot;&#123;path:&#x27;/home&#x27;&#125;&quot;&gt; //name,path都行, 建议用name  </span><br><span class="line">    // 注意：router-link中链接如果是&#x27;/&#x27;开始就是从根路由开始，如果开始不带&#x27;/&#x27;，则从当前路由开始。</span><br><span class="line"></span><br><span class="line">    2).带参数</span><br><span class="line">    &lt;router-link :to=&quot;&#123;name:&#x27;home&#x27;, params: &#123;id:1&#125;&#125;&quot;&gt;  </span><br><span class="line">    // params传参数 (类似post)</span><br><span class="line">    // 路由配置 path: &quot;/home/:id&quot; 或者 path: &quot;/home:id&quot; </span><br><span class="line">    // 不配置path ,第一次可请求,刷新页面id会消失</span><br><span class="line">    // 配置path,刷新页面id会保留</span><br><span class="line">    // html 取参  $route.params.id</span><br><span class="line">    // script 取参  this.$route.params.id</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    &lt;router-link :to=&quot;&#123;name:&#x27;home&#x27;, query: &#123;id:1&#125;&#125;&quot;&gt; </span><br><span class="line">    // query传参数 (类似get,url后面会显示参数)</span><br><span class="line">    // 路由可不配置</span><br><span class="line">    // html 取参  $route.query.id</span><br><span class="line">    // script 取参  this.$route.query.id</span><br><span class="line"></span><br><span class="line">2、用“this.$router.push()”(函数里面调用)语句；</span><br><span class="line"></span><br><span class="line">    1).  不带参数</span><br><span class="line">    this.$router.push(&#x27;/home&#x27;)</span><br><span class="line">    this.$router.push(&#123;name:&#x27;home&#x27;&#125;)</span><br><span class="line">    this.$router.push(&#123;path:&#x27;/home&#x27;&#125;)</span><br><span class="line"></span><br><span class="line">    2). query传参 </span><br><span class="line">    this.$router.push(&#123;name:&#x27;home&#x27;,query: &#123;id:&#x27;1&#x27;&#125;&#125;)</span><br><span class="line">    this.$router.push(&#123;path:&#x27;/home&#x27;,query: &#123;id:&#x27;1&#x27;&#125;&#125;)</span><br><span class="line"></span><br><span class="line">    // html 取参  $route.query.id</span><br><span class="line">    // script 取参  this.$route.query.id</span><br><span class="line"></span><br><span class="line">    3). params传参</span><br><span class="line">    this.$router.push(&#123;name:&#x27;home&#x27;,params: &#123;id:&#x27;1&#x27;&#125;&#125;)  // 只能用 name</span><br><span class="line"></span><br><span class="line">    // 路由配置 path: &quot;/home/:id&quot; 或者 path: &quot;/home:id&quot; ,</span><br><span class="line">    // 不配置path ,第一次可请求,刷新页面id会消失</span><br><span class="line">    // 配置path,刷新页面id会保留</span><br><span class="line">    // html 取参  $route.params.id</span><br><span class="line">    // script 取参  this.$route.params.id </span><br><span class="line"></span><br><span class="line">    4). query和params区别</span><br><span class="line"></span><br><span class="line">    query类似 get, 跳转之后页面 url后面会拼接参数,类似?id=1, 非重要性的可以这样传, 密码之类还是用params刷新页面id还在</span><br><span class="line">    params类似 post, 跳转之后页面 url后面不会拼接参数 , 但是刷新页面id 会消失</span><br><span class="line"></span><br><span class="line">3、用“this.$router.replace()”(用法同上,push)语句；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4、用“this.$router.go(n)”语句</span><br><span class="line">    this.$router.go(n)</span><br><span class="line">    向前或者向后跳转n个页面，n可为正整数或负整数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ps : 区别</span><br><span class="line"></span><br><span class="line">this.$router.push</span><br><span class="line">跳转到指定url路径，并想history栈中添加一个记录，点击后退会返回到上一个页面</span><br><span class="line"></span><br><span class="line">this.$router.replace</span><br><span class="line">跳转到指定url路径，但是history栈中不会有记录，点击返回会跳转到上上个页面 (就是直接替换了当前页面)</span><br><span class="line"></span><br><span class="line">this.$router.go(n)</span><br><span class="line">向前或者向后跳转n个页面，n可为正整数或负整数</span><br></pre></td></tr></table></figure>
<h3 id="params和query的区别"><a href="#params和query的区别" class="headerlink" title="params和query的区别"></a>params和query的区别</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">用法：</span><br><span class="line">    query要用path来引入，</span><br><span class="line">    params要用name来引入，</span><br><span class="line"></span><br><span class="line">    接收参数都是类似的，分别是</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.$route.query.name 和</span><br><span class="line">    <span class="built_in">this</span>.$route.params.name。</span><br><span class="line"></span><br><span class="line">url地址显示：</span><br><span class="line">    query更加类似于我们ajax中get传参，</span><br><span class="line">    params则类似于post，说的再简单一点，前者在浏览器地址栏中显示参数，后者则不显示</span><br><span class="line"></span><br><span class="line">注意点： query刷新不会丢失query里面的数据</span><br><span class="line">        params刷新 会 丢失 params里面的数据</span><br></pre></td></tr></table></figure>
<h3 id="怎么定义-vue-router-的动态路由-怎么获取传过来的值？"><a href="#怎么定义-vue-router-的动态路由-怎么获取传过来的值？" class="headerlink" title="怎么定义 vue-router 的动态路由? 怎么获取传过来的值？"></a>怎么定义 vue-router 的动态路由? 怎么获取传过来的值？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">在router目录下的index.js文件中，对path属性加上/:id。 使用router对象的params.id</span><br></pre></td></tr></table></figure>
<h3 id="active-class-是哪个组件的属性？"><a href="#active-class-是哪个组件的属性？" class="headerlink" title="active-class 是哪个组件的属性？"></a>active-class 是哪个组件的属性？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vue-router模块的router-link组件。当routerlink标签被点击时将会应用这个样式</span><br><span class="line"></span><br><span class="line">在使用时会有一个Bug</span><br><span class="line">首页的active会一直被应用</span><br><span class="line">解决办法</span><br><span class="line">为了解决上面的问题，还需加入一个属性exact,类似也有两种方式：</span><br><span class="line">在router-link中写入exact</span><br><span class="line"></span><br><span class="line">&lt;router-link to=<span class="string">&#x27;/&#x27;</span> active-<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;active&quot;</span> exact&gt;首页&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>
<h3 id="vue-router的两种模式"><a href="#vue-router的两种模式" class="headerlink" title="vue-router的两种模式"></a>vue-router的两种模式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hash模式： 即地址栏 URL 中的 # 符号；</span><br><span class="line">history模式</span><br></pre></td></tr></table></figure>
<h3 id="vue-router实现路由懒加载（-动态加载路由-）"><a href="#vue-router实现路由懒加载（-动态加载路由-）" class="headerlink" title="vue-router实现路由懒加载（ 动态加载路由 ）"></a>vue-router实现路由懒加载（ 动态加载路由 ）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">三种方式</span><br><span class="line">第一种：vue异步组件技术 ==== 异步加载，vue-router配置路由 , 使用vue的异步组件技术 , 可以实现按需加载 .但是,这种情况下一个组件生成一个js文件。</span><br><span class="line"></span><br><span class="line">第二种：路由懒加载(使用<span class="keyword">import</span>)。</span><br><span class="line"></span><br><span class="line">第三种：webpack提供的<span class="built_in">require</span>.ensure()，vue-router配置路由，使用webpack的<span class="built_in">require</span>.ensure技术，也可以实现按需加载。这种情况下，多个路由指定相同的chunkName，会合并打包成一个js文件</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="引进组件的步骤"><a href="#引进组件的步骤" class="headerlink" title="引进组件的步骤"></a>引进组件的步骤</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">在template中引入组件；</span><br><span class="line">在script的第一行用<span class="keyword">import</span>引入路径；</span><br><span class="line">用component中写上组件名称</span><br></pre></td></tr></table></figure>

<h3 id="SPA首屏加载慢如何解决"><a href="#SPA首屏加载慢如何解决" class="headerlink" title="SPA首屏加载慢如何解决"></a>SPA首屏加载慢如何解决</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、路由懒加载</span><br><span class="line"><span class="number">2</span>、组件库局部引用</span><br><span class="line"><span class="number">3</span>、节流防抖</span><br><span class="line"><span class="number">4</span>、提升代码复用，封装自定义组件</span><br><span class="line"><span class="number">5</span>、预处理器，预加载</span><br><span class="line"><span class="number">6</span>、图片不放本地，放服务器存储，后端返回网址访问</span><br><span class="line"><span class="number">7</span>、使用CDN资源</span><br></pre></td></tr></table></figure>
<h3 id="vue-slot"><a href="#vue-slot" class="headerlink" title="vue slot"></a>vue slot</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">简单来说，假如父组件需要在子组件内放一些DOM，那么这些DOM是显示、不显示、在哪个地方显示、如何显示，就是slot分发负责的活</span><br></pre></td></tr></table></figure>
<h3 id="你们vue项目是打包了一个js文件，一个css文件，还是有多个文件"><a href="#你们vue项目是打包了一个js文件，一个css文件，还是有多个文件" class="headerlink" title="你们vue项目是打包了一个js文件，一个css文件，还是有多个文件"></a>你们vue项目是打包了一个js文件，一个css文件，还是有多个文件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">根据vue-cli脚手架规范，一个js文件，一个CSS文件</span><br></pre></td></tr></table></figure>
<h3 id="Vue里面router-link在电脑上有用，在安卓上没反应怎么解决"><a href="#Vue里面router-link在电脑上有用，在安卓上没反应怎么解决" class="headerlink" title="Vue里面router-link在电脑上有用，在安卓上没反应怎么解决"></a>Vue里面router-link在电脑上有用，在安卓上没反应怎么解决</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue路由在Android机上有问题，babel问题，安装babel polypill插件解决</span><br></pre></td></tr></table></figure>
<h3 id="Vue2中注册在router-link上事件无效解决方法"><a href="#Vue2中注册在router-link上事件无效解决方法" class="headerlink" title="Vue2中注册在router-link上事件无效解决方法"></a>Vue2中注册在router-link上事件无效解决方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">使用@click.native。原因：router-link会阻止click事件，.native指直接监听一个原生事件</span><br></pre></td></tr></table></figure>
<h3 id="RouterLink在IE和Firefox中不起作用（路由不跳转）的问题"><a href="#RouterLink在IE和Firefox中不起作用（路由不跳转）的问题" class="headerlink" title="RouterLink在IE和Firefox中不起作用（路由不跳转）的问题"></a>RouterLink在IE和Firefox中不起作用（路由不跳转）的问题</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">方法一：只用a标签，不适用button标签；</span><br><span class="line">方法二：使用button标签和Router.navigate方法</span><br></pre></td></tr></table></figure>
<h3 id="请说下封装-vue-组件的过程"><a href="#请说下封装-vue-组件的过程" class="headerlink" title="请说下封装 vue 组件的过程"></a>请说下封装 vue 组件的过程</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 建立组件的模板，先把架子搭起来，写写样式，考虑好组件的基本逻辑。(os：思考<span class="number">1</span>小时，码码<span class="number">10</span>分钟，程序猿的准则。)</span><br><span class="line"><span class="number">2.</span> 准备好组件的数据输入。即分析好逻辑，定好 props 里面的数据、类型。</span><br><span class="line"><span class="number">3.</span> 准备好组件的数据输出。即根据组件逻辑，做好要暴露出来的方法。</span><br><span class="line"><span class="number">4.</span> 封装完毕了，直接调用即可</span><br></pre></td></tr></table></figure>

<h3 id="vue初始化页面闪动问题"><a href="#vue初始化页面闪动问题" class="headerlink" title="vue初始化页面闪动问题"></a>vue初始化页面闪动问题</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">使用vue开发时，在vue初始化之前，由于div是不归vue管的，所以我们写的代码在还没有解析的情况下会容易出现花屏现象，看到类似于&#123;&#123;message&#125;&#125;的字样，虽然一般情况下这个时间很短暂，但是我们还是有必要让解决这个问题的。</span><br><span class="line">首先：</span><br><span class="line"></span><br><span class="line">在css里加上[v-cloak] &#123;<span class="attr">display</span>: none;&#125;。 <span class="comment">//用于 防止闪屏，防止页面出现&#123;&#123; &#125;&#125;</span></span><br><span class="line"></span><br><span class="line">如果没有彻底解决问题，则在根元素加上style=<span class="string">&quot;display: none;&quot;</span> :style=<span class="string">&quot;&#123;display: &#x27;block&#x27;&#125;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="vue修改打包后静态资源路径的修改"><a href="#vue修改打包后静态资源路径的修改" class="headerlink" title="vue修改打包后静态资源路径的修改"></a>vue修改打包后静态资源路径的修改</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cli2版本：将 config/index.js 里的 assetsPublicPath 的值改为 <span class="string">&#x27;./&#x27;</span> 。</span><br><span class="line"><span class="attr">build</span>: &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">assetsPublicPath</span>: <span class="string">&#x27;./&#x27;</span>,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cli3版本：在根目录下新建vue.config.js 文件，然后加上以下内容：（如果已经有此文件就直接修改）</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 相对于 HTML 页面（目录相同） </span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="vue项目中用v-for循环本地图片，图片不显示，解决办法"><a href="#vue项目中用v-for循环本地图片，图片不显示，解决办法" class="headerlink" title="vue项目中用v-for循环本地图片，图片不显示，解决办法"></a>vue项目中用v-for循环本地图片，图片不显示，解决办法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">使用<span class="built_in">require</span>动态引入图片，或者将图片放入<span class="keyword">static</span>文件夹里面</span><br><span class="line">&lt;img v-bind:src=<span class="string">&#x27;require(item.imgurl())&#x27;</span> &gt;</span><br></pre></td></tr></table></figure>

<h3 id="v-on可以监听多个方法吗？"><a href="#v-on可以监听多个方法吗？" class="headerlink" title="v-on可以监听多个方法吗？"></a>v-on可以监听多个方法吗？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">可以</span><br><span class="line">栗子：&lt;input type=<span class="string">&quot;text&quot;</span> v-on=<span class="string">&quot;&#123; input:onInput,focus:onFocus,blur:onBlur, &#125;&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<h3 id="vue中-async与await的使用"><a href="#vue中-async与await的使用" class="headerlink" title="vue中 async与await的使用"></a>vue中 async与await的使用</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">VUE中，我们时常会遇到一种实际应用情况：B处的渲染需要依赖A处的接口返回，但是由于种种原因，不能将B直接放在A接口返回后的代码处理里面。这时候我们就需要使用<span class="keyword">async</span>/<span class="keyword">await</span>阻塞进程，告诉B，等A有返回后你再执行</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="async和await是如何处理异步任务的"><a href="#async和await是如何处理异步任务的" class="headerlink" title="async和await是如何处理异步任务的"></a>async和await是如何处理异步任务的</h3><p>简单说，async是通过Promise包装异步任务</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//比如有如下代码</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> async2()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;async1 end&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;async2 end&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">async1()</span><br><span class="line"></span><br><span class="line"><span class="comment">//改为ES5的写法</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// console.log(&#x27;async2 end&#x27;)</span></span><br><span class="line">  async2() </span><br><span class="line">  ...</span><br><span class="line">&#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"> <span class="comment">// 执行async1()函数await之后的语句</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;async1 end&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="prominse的三种状态分别是什么"><a href="#prominse的三种状态分别是什么" class="headerlink" title="prominse的三种状态分别是什么"></a>prominse的三种状态分别是什么</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  pedding 等待</span><br><span class="line">  resolve 成功  成功执行.then回调</span><br><span class="line">  reject  失败  失败执行.catch回调  </span><br><span class="line">  </span><br><span class="line">  .finall无论成功或者失败都执行回调</span><br><span class="line">  两个常用方法  prominse.all()   同时拿到几个请求数据 进行对应操作</span><br><span class="line">               prominse.race()  赛跑机制，取得一个最先拿到的数据</span><br><span class="line">[场景](https:<span class="comment">//blog.csdn.net/web2022050901/article/details/125182909)               </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="父组件可以监听到子组件的生命周期吗？"><a href="#父组件可以监听到子组件的生命周期吗？" class="headerlink" title="父组件可以监听到子组件的生命周期吗？"></a>父组件可以监听到子组件的生命周期吗？</h3><blockquote>
<p>比如有父组件 Parent 和子组件 Child，如果父组件监听到子组件挂载 mounted 就做一些逻辑处理，可以通过以下写法实现：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Parent.vue</span></span><br><span class="line">&lt;Child @mounted=<span class="string">&quot;doSomething&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Child.vue</span></span><br><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.$emit(<span class="string">&quot;mounted&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>以上需要手动通过 $emit 触发父组件的事件，更简单的方式可以在父组件引用子组件时通过 @hook 来监听即可，如下所示：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  Parent.vue</span></span><br><span class="line">&lt;Child @hook:mounted=<span class="string">&quot;doSomething&quot;</span> &gt;&lt;/Child&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">doSomething</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;父组件监听到 mounted 钩子函数 ...&#x27;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">//  Child.vue</span></span><br><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;子组件触发 mounted 钩子函数 ...&#x27;</span>);</span><br><span class="line">&#125;,    </span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上输出顺序为：</span></span><br><span class="line"><span class="comment">// 子组件触发 mounted 钩子函数 ...</span></span><br><span class="line"><span class="comment">// 父组件监听到 mounted 钩子函数 ...</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>当然 @hook 方法不仅仅是可以监听 mounted，其它的生命周期事件，例如：created，updated 等都可以监听。</p>
</blockquote>
<h3 id="混入-mixin"><a href="#混入-mixin" class="headerlink" title="混入 (mixin)"></a>混入 (mixin)</h3><p>将组件的公共逻辑或者配置提取出来，哪个组件需要用到时，直接将提取的这部分混入到组件内部即可。这样既可以减少代码冗余度，也可以让后期维护起来更加容易。</p>
<p>这里需要注意的是：提取的是逻辑或配置，而不是HTML代码和CSS代码。其实大家也可以换一种想法，mixin就是组件中的组件，Vue组件化让我们的代码复用性更高，那么组件与组件之间还有重复部分，我们使用Mixin在抽离一遍</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//局部混入</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//mixin.js文件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;mixin&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">created</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.hello()</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;我是mixin里面的created!&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="attr">hello</span>: <span class="function">() =&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;hello from mixin!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> mixin <span class="keyword">from</span> <span class="string">&#x27;@/views/common/mixin&#x27;</span>  <span class="comment">//导入混入（mixin）</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">mixins</span>: [mixin] <span class="comment">//使用混入（mixin）</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//全局混入</span></span><br><span class="line">混入也可以进行全局注册。使用时格外小心！一旦使用全局混入，它将影响每一个之后创建的 Vue 实例。使用恰当时，这可以用来为自定义选项注入处理逻辑</span><br><span class="line"></span><br><span class="line">在main.js中通过Vue.mixin()引入混入对象即可全局使用（作用于该Vue实例下的所有组件）</span><br><span class="line"><span class="keyword">import</span> mixin <span class="keyword">from</span> <span class="string">&#x27;./mixins&#x27;</span>;</span><br><span class="line">Vue.mixin(mixin)</span><br></pre></td></tr></table></figure>
<h3 id="Mixin和Vuex的区别"><a href="#Mixin和Vuex的区别" class="headerlink" title="Mixin和Vuex的区别"></a>Mixin和Vuex的区别</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">上面一点说Mixin就是一个抽离公共部分的作用。在Vue中，Vuex状态管理似乎也是做的这一件事，它也是将组件之间可能共享的数据抽离出来。两者看似一样，实则还是有细微的区别，区别如下：</span><br><span class="line"></span><br><span class="line">    Vuex公共状态管理，如果在一个组件中更改了Vuex中的某个数据，那么其它所有引用了Vuex中该数据的组件也会跟着变化。</span><br><span class="line">    </span><br><span class="line">    Mixin中的数据和方法都是独立的，组件之间使用后是互相不影响的</span><br></pre></td></tr></table></figure>

<h3 id="使用过-Vue-SSR-吗？说说-SSR"><a href="#使用过-Vue-SSR-吗？说说-SSR" class="headerlink" title="使用过 Vue SSR 吗？说说 SSR ?"></a>使用过 Vue SSR 吗？说说 <a href="https://blog.csdn.net/gaojinbo0531/article/details/129376458">SSR</a> ?</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">客户端渲染vs服务端渲染</span><br><span class="line">客户端渲染我们叫做CSR渲染方式，服务端渲染我们叫做SSR渲染</span><br><span class="line"></span><br><span class="line">什么是服务器端渲染？</span><br><span class="line">server side render 前端页面的产生是由服务器端生成的，我们就称之为服务端渲染。</span><br><span class="line"></span><br><span class="line">什么是客户端渲染？</span><br><span class="line">client side render 服务端只提供json格式的数据，渲染成什么样子由客户端通过js控制</span><br><span class="line"></span><br><span class="line">运行架构对比：</span><br><span class="line">CSR执行流程：浏览器加载html文件 -&gt; 浏览器下载js文件 -&gt; 浏览器运行vue代码 -&gt; 渲染页面</span><br><span class="line">SSR执行流程：浏览器加载html文件 -&gt; 服务端装填好内容 -&gt; 返回浏览器渲染</span><br><span class="line"></span><br><span class="line">开发模式对比</span><br><span class="line">CSR：前后端通过接口<span class="built_in">JSON</span>数据进行通信，各自开发互不影响</span><br><span class="line">SSR：前后端分工搭配复杂，前端需要写好html模板交给后端，后端装填模板内容返给浏览器</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">What?SSR是什么？</span><br><span class="line">SSR全拼是Server-Side Rendering，服务端渲染。</span><br><span class="line">所谓服务端渲染，指的是把vue组件在服务器端渲染为组装好的HTML字符串，然后将它们直接发送到浏览器，最后需要将这些静态标记混合在客户端上完全可交互的应用程序。</span><br><span class="line"></span><br><span class="line">Why?为什么选择SSR?</span><br><span class="line">①满足seo需求，传统的spa数据都是异步加载的，爬虫引擎无法加载，需要利用ssr将数据直出渲染在页面源代码中。</span><br><span class="line">②更宽的内容达到时间（首屏加载更快），当请求页面的时候，服务端渲染完数据之后，把渲染好的页面直接发送给浏览器，并进行渲染。浏览器只需要解析html不需要去解析js。</span><br><span class="line"></span><br><span class="line">详解：</span><br><span class="line">对SEO有利：其实爬虫爬你的页面是件好事，因为有些页面爬虫不支持执行JavaScript的，这不支持实现JavaScript并不是说SSR我的页面会是空的HTML页面，而有了SSR以后，这些抓取工具就可以得到完整的HTML结构化数据，然后被纳入搜索引擎。</span><br><span class="line">更短的白屏时间：相对于客户端渲染，服务器渲染是在浏览器URL中请求的，之后我们得到了一个HTML文本，浏览器只需要解析HTML，构建...直接DOM只是一棵树。而客户端渲染，需要得到一个空的一个第一个HTML页面，此时页面已经进入白屏，之后需要加载并执行JavaScript、请求后端服务器获取数据、JavaScript渲染页面几次才能看到最后一页。特别是在复杂的应用程序中，由于需要加载JavaScript脚本，应用程序越复杂，需要加载JavaScript的脚本越多，它就越大，这导致应用程序的首屏加载时间很长，并且降低了体验感。</span><br><span class="line"></span><br><span class="line">在vue2和vue3里使用ssr有什么区别？</span><br><span class="line">vue2时代做ssr一般使用vue2+vue-server-renderer可以实现SSR功能，但是vue3中会报错；</span><br><span class="line"></span><br><span class="line">vue3可以不使用插件就实现SSR，就是原生支持</span><br><span class="line"></span><br><span class="line">Vue SSR服务端渲染的使用场景有哪些？</span><br><span class="line"><span class="number">1.</span>SEO需求</span><br><span class="line">SEO（Search Engine Optimization，搜索引擎优化），是一种利用搜索引擎规则，提高网站在搜索引擎内自然排名的技术。通常这需要页面内容在页面加载完成时便已经存在。</span><br><span class="line"></span><br><span class="line">前后端分离的纯前端项目，由于这类项目需要页面加载完成后再异步获取数据渲染，因此大部分搜索引擎无法获取到这类项目的内容。Vue SSR正是基于此类需求而给出的一种技术方案。利用nodejs搭建页面渲染服务，在服务端完成之前需要在客户端完成的页面渲染工作，输出给SEO更友好的页面。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>首屏渲染速度</span><br><span class="line">目前对于首屏渲染速度的提升有许多方案，在ssr之外还有龙骨，墓碑，数据直出。相比于这些方案ssr方案实现是最复杂的，但效果也是最好的。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SSR怎么做：开箱即用的SSR脚手架</span><br><span class="line"></span><br><span class="line">目前前端流行的三种技术栈 React, Vue 和 Angula ，已经孵化出对应的服务端渲染框架，开箱即用</span><br><span class="line"></span><br><span class="line"><span class="attr">React</span>: Next.js</span><br><span class="line"></span><br><span class="line"><span class="attr">Vue</span>: Nuxt.js</span><br><span class="line"></span><br><span class="line"><span class="attr">Angula</span>: Nest.js</span><br></pre></td></tr></table></figure>

<h3 id="vue-微信小程序-uni-app属性的绑定"><a href="#vue-微信小程序-uni-app属性的绑定" class="headerlink" title="vue , 微信小程序 , uni-app属性的绑定"></a>vue , 微信小程序 , uni-app属性的绑定</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vue和uni-app动态绑定一个变量的值为元素的某个属性的时候，会在属性前面加上冒号<span class="string">&quot;:&quot;</span>;</span><br><span class="line"></span><br><span class="line">小程序 绑定某个变量的值为元素属性时，会用两个大括号&#123;&#123;&#125;&#125;括起来，如果不加括号，为被认为是字符串。</span><br></pre></td></tr></table></figure>
<h3 id="vue-微信小程序-uni-app的页面生命周期函数"><a href="#vue-微信小程序-uni-app的页面生命周期函数" class="headerlink" title="vue , 微信小程序 , uni-app的页面生命周期函数"></a>vue , 微信小程序 , uni-app的页面生命周期函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vue：</span><br><span class="line">	beforeCreate（创建前）</span><br><span class="line">	created（创建后）</span><br><span class="line">	beforeMount(载入前，挂载）</span><br><span class="line">	mounted（载入后）</span><br><span class="line">	beforeUpdate（更新前）</span><br><span class="line">	updated（更新后）</span><br><span class="line">	beforeDestroy（销毁前）</span><br><span class="line">	destroyed（销毁后）</span><br><span class="line">小程序/uni-app： </span><br><span class="line">	<span class="number">1.</span> onLoad：首次进入页面加载时触发，可以在 onLoad 的参数中获取打开当前页面路径中的参数。</span><br><span class="line">	<span class="number">2.</span> onShow：加载完成后、后台切到前台或重新进入页面时触发</span><br><span class="line">	<span class="number">3.</span> onReady：页面首次渲染完成时触发</span><br><span class="line">	<span class="number">4.</span> onHide：从前台切到后台或进入其他页面触发</span><br><span class="line">	<span class="number">5.</span> onUnload：页面卸载时触发</span><br><span class="line">	<span class="number">6.</span> onPullDownRefresh：监听用户下拉动作</span><br><span class="line">	<span class="number">7.</span> onReachBottom：页面上拉触底事件的处理函数</span><br><span class="line">	<span class="number">8.</span> onShareAppMessage：用户点击右上角转发</span><br></pre></td></tr></table></figure>
<h3 id="vue、小程序、uni-app中的本地数据存储和接收"><a href="#vue、小程序、uni-app中的本地数据存储和接收" class="headerlink" title="vue、小程序、uni-app中的本地数据存储和接收"></a>vue、小程序、uni-app中的本地数据存储和接收</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vue：</span><br><span class="line">	存储：localstorage.setItem（‘key’，‘value’）</span><br><span class="line">	接收：localstorage.getItem（‘key’）</span><br><span class="line"></span><br><span class="line">微信小程序：</span><br><span class="line">	存储：通过wx.setStorage/wx.setStorageSync写数据到缓存</span><br><span class="line">	接收：通过wx.getStorage/wx.getStorageSync读取本地缓存，</span><br><span class="line"></span><br><span class="line">uni-app：</span><br><span class="line">	存储：uni.setStorage(&#123;<span class="attr">key</span>:“属性名”，data:“值”&#125;) <span class="comment">//异步 </span></span><br><span class="line">		uni.setStorageSync(KEY,DATA) <span class="comment">//同步</span></span><br><span class="line">	接收：uni.getStorage(&#123;<span class="attr">key</span>:“属性名”,<span class="function"><span class="title">success</span>(<span class="params">res</span>)</span>&#123;res.data&#125;&#125;) <span class="comment">//异步</span></span><br><span class="line">		uni.getStorageSync(KEY) <span class="comment">//同步</span></span><br></pre></td></tr></table></figure>
<h3 id="移动端性能优化？"><a href="#移动端性能优化？" class="headerlink" title="移动端性能优化？"></a>移动端性能优化？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">尽量使用css3动画，开启硬件加速</span><br><span class="line">适当使用touch时间代替click时间</span><br><span class="line">避免使用css3渐变阴影效果</span><br><span class="line">可以用transform: translateZ(<span class="number">0</span>) 来开启硬件加速</span><br><span class="line">不滥用float。float在渲染时计算量比较大，尽量减少使用</span><br><span class="line">不滥用web字体。web字体需要下载，解析，重绘当前页面</span><br><span class="line">合理使用requestAnimationFrame动画代替<span class="built_in">setTimeout</span></span><br><span class="line">css中的属性（css3 transitions、css3 3D transforms、opacity、webGL、video）会触发GUP渲染，耗电</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="uni-app开发中遇到的问题"><a href="#uni-app开发中遇到的问题" class="headerlink" title="uni-app开发中遇到的问题"></a>uni-app开发中遇到的问题</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、跳转底部四个tabbar页面，是不能使用uni.navigateTo()的，这样无法跳转，必须使用uni.switchTab()</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、我一开始是游客模式进的主页，然后在触发登录进行登录操作后，再次使用uni.switchTab()跳转到了主页，这个时候，如果我们有些操作是写在created()生命周期里面的，比如网络请求这些，就不会触发，可能会导致一些问题。那如果我想再次进入主页后，还想进行页面的网络数据刷新，该怎么操作呢？这时候就可以使用<span class="built_in">window</span>.location.href()，<span class="built_in">window</span>.location.href = 主页地址，这时候就会发出相应的生命周期函数</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、判断手机系统</span><br><span class="line">    <span class="keyword">let</span> osName = plus.os.name.toLowerCase();  <span class="comment">// ios或android</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、页面通信</span><br><span class="line"><span class="comment">// 跳转页面并发送数据</span></span><br><span class="line">uni.navigateTo(&#123;</span><br><span class="line">	<span class="attr">url</span>:<span class="string">&quot;/pages/chat/customerService&quot;</span>,</span><br><span class="line">	<span class="function"><span class="title">success</span>(<span class="params">res</span>)</span> &#123;</span><br><span class="line">		res.eventChannel.emit(<span class="string">&quot;RoomToCustomerService&quot;</span>,&#123;</span><br><span class="line">			<span class="attr">roomNumber</span>: that.roomAllInfo.roomNumber,</span><br><span class="line">			<span class="attr">roomId</span>: that.roomID</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在被跳转的页面 接收传递来的数据</span></span><br><span class="line"><span class="keyword">let</span> eventChannel = that.getOpenerEventChannel();</span><br><span class="line">eventChannel.on(<span class="string">&quot;RoomToCustomerService&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">	that.gameRoomInfo = res;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> <span class="number">5</span>、调用子组件方法</span><br><span class="line"> 首先给组件定义一个ref属性(ref=”msgInput”),然后使用 <span class="built_in">this</span>.$refs.msgInput.function();</span><br><span class="line"> &lt;!-- 定义 --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">chatInput</span> <span class="attr">ref</span>=<span class="string">&quot;msgInput&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">chatInput</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="built_in">this</span>.$refs.msgInput.closeFunction();</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>、日期格式问题，Data.parse()时间转化为时间戳出现<span class="literal">NaN</span>,但在PC正常</span><br><span class="line">你需要将-替换为/</span><br><span class="line"></span><br><span class="line"><span class="number">7</span>、列表页获取数据的时候，页面会闪一下</span><br><span class="line">可能是页面里面存在图片，图片只定义了宽度，没有定义高度</span><br><span class="line">解决：给图片定义高度</span><br><span class="line"></span><br><span class="line"><span class="number">8</span>、在页面调用uni.scanCode识别普通二维码再进来小程序该页面，会再执行一次onShow，也就是onShow会执行两次</span><br><span class="line">记得有需要数据回显的页面，请求数据的时候一定不要放在onShow，否则很有可能会导致新更改的数据，被回显的数据覆盖</span><br><span class="line"></span><br><span class="line"><span class="number">9</span>、H5与原生app交互遇到的坑</span><br><span class="line">    H5采用前后端分离的模式开发，H5调用接口为http协议，而原生app打开H5使用的是https协议，这样的情况，会造成H5无法进行API请求，简单理解就是https协议下，加载http协议资源会被拦截</span><br><span class="line">    </span><br><span class="line">    H5请求接口，始终要注意跨域问题。最简单的处理方式，就是api端使用Access-Control-Allow-Origin:*(或者指定域名),API端开放特定域名使用资源</span><br><span class="line">    </span><br><span class="line">    分享过程中，如果使用到了app的原生微信分享功能，需要特别注意字段的限制，其中最常见的就是图片的限制，二进制大小32k以内</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">10</span>、uniapp开发安卓和ios一些不一样的地方</span><br><span class="line">    <span class="comment">//底部距离不一样</span></span><br><span class="line">    比如购物车全选按钮的操作栏，他是跟下面的tabbar挨着的，没有间距。</span><br><span class="line">假设我下面abbar的高度为100rpx,如果我把全选按钮操作栏的固定定位距离底部的距离写成bottom:100rpx,这样的话，在安卓端显示是可以达到我们的预期效果，但是在ios上，全选按钮操作栏就会有部分内容被tabbar遮盖，所以我们遇到这种情况的时候，要判断设备类型，然后加上对应样式</span><br><span class="line"></span><br><span class="line">    <span class="comment">//复制操作</span></span><br><span class="line">    uni.setClipboardData()，uniapp提供的一种复制操作，很方便，但是安卓可以，ios不行，所以最好还是使用vue的v-clipboard指令</span><br><span class="line"></span><br><span class="line">    <span class="comment">//微信JSSDK的自定义页面分享</span></span><br><span class="line">    也是一样的，安卓可以成功，IOS不行</span><br><span class="line"></span><br><span class="line"><span class="number">11</span>、App平台IOS端软键盘上方横条去除方案（禁用键盘上的^）</span><br><span class="line"></span><br><span class="line">在 pages.json 中配置 style配置</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;app-plus&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;softinputNavBar&quot;</span>: <span class="string">&quot;none&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">12</span>、navigateTo, redirectTo 只能打开非 tabBar 页面,switchTab 只能打开 tabBar 页面</span><br><span class="line"></span><br><span class="line"><span class="number">13</span>、页面结构复杂，css样式太多的情况，使用 image 可能导致样式生效较慢，出现 “闪一下” 的情况，此时设置 image&#123;will-change: transform&#125; ,可优化此问题</span><br><span class="line"></span><br><span class="line"><span class="number">14</span>、在字体或高度中使用了 rpx ，那么需注意这样的写法意味着随着屏幕变宽，字体会变大、高度会变大。如果你需要固定高度，则应该使用 px </span><br><span class="line"></span><br><span class="line"><span class="number">15</span>、H5端页面刷新之后页面栈会消失，此时navigateBack不能返回，如果一定要返回可以使用history.back()导航到浏览器的其他历史记录</span><br><span class="line"></span><br><span class="line"><span class="number">16</span>、tabbar 的页面展现过一次后就保留在内存中，再次切换 tabbar 页面，只会触发每个页面的onShow，不会再触发onLoad</span><br><span class="line"></span><br><span class="line"><span class="number">17</span>、如需调节checkbox,radio⼤⼩，可通过css的scale⽅法调节，如缩⼩到<span class="number">70</span>%style=<span class="string">&quot;transform:scale(0.7)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="number">18</span>、在小程序端 font-weight：bold ，要写bold，数值苹果不支持，还有就是文字颜色不能写rgba小程序苹果不支持会不显示</span><br><span class="line"></span><br><span class="line"><span class="number">19</span>、小程序真机调试包太大，无法上传，分包处理</span><br><span class="line">    <span class="number">1</span> 将所有静态资源都存放到远程服务器上</span><br><span class="line">    <span class="number">2</span> 采用分包的方式，将主包的体积降下来</span><br><span class="line">  </span><br><span class="line"><span class="number">20</span>、小程序分享配置</span><br><span class="line">微信小程序的分享不支持API调用，只能用户主动点击触发分享。可通过右上角的胶囊和 button 按钮分享给微信好友。开启右上角胶囊分享功能需在页面中加入 onShareAppMessage 生命周期函数，在onShareAppMessage 中还可监听到是哪种方式触发的分享</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="title">onShareAppMessage</span>(<span class="params">res</span>)</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (res.from === <span class="string">&#x27;button&#x27;</span>) &#123;<span class="comment">// 来自页面内分享按钮</span></span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">&quot;按钮分享&quot;</span>)</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.from === <span class="string">&#x27;menu&#x27;</span>) &#123;<span class="comment">// 来自页面右上角胶囊</span></span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">&quot;胶囊分享&quot;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    分享携带的参数可通过以下方式获取</span><br><span class="line">    在 App onShow中</span><br><span class="line">    在App.vue 中的 onShow 中也能获取到分享携带的参数</span><br><span class="line">    无论是以何种方式进入小程序，都会进入 App.vue 中的 onShow，所以在这里是一定可以获取到分享携带的参数的</span><br><span class="line">    扫码进入同点击分享链接进入一样，都可在对应的生命周期中获取</span><br><span class="line">	<span class="attr">onShow</span>: <span class="function"><span class="keyword">function</span>(<span class="params">option</span>) </span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&#x27;====App onShow====&#x27;</span>)</span><br><span class="line">		<span class="built_in">console</span>.log(option)</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&#x27;====App onShow====&#x27;</span>)</span><br><span class="line">	&#125;,</span><br><span class="line"><span class="number">21</span>、</span><br></pre></td></tr></table></figure>

<h2 id="Vuex类"><a href="#Vuex类" class="headerlink" title="Vuex类"></a>Vuex类</h2><h3 id="vuex是什么？怎么使用？哪种功能场景使用它？"><a href="#vuex是什么？怎么使用？哪种功能场景使用它？" class="headerlink" title="vuex是什么？怎么使用？哪种功能场景使用它？"></a>vuex是什么？怎么使用？哪种功能场景使用它？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vuex 是Vue框架开发的状态管理库，它使得在应用程序中管理共享状态变得更加容易和可维护</span><br><span class="line"></span><br><span class="line">在main.js引入store，注入。新建了一个目录store.js，…… <span class="keyword">export</span></span><br><span class="line"></span><br><span class="line">场景有：单页应用中，组件之间的状态。音乐播放、登录状态、加入购物车</span><br></pre></td></tr></table></figure>

<h3 id="vuex有哪几种属性？"><a href="#vuex有哪几种属性？" class="headerlink" title="vuex有哪几种属性？"></a>vuex有哪几种属性？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">state：基本数据(数据源存放地)</span><br><span class="line">    <span class="built_in">this</span>.$store.state.count</span><br><span class="line">getter：从基本数据派生出来的数据</span><br><span class="line">    <span class="built_in">this</span>.$store.getters.show</span><br><span class="line">mutations：唯一修改state的方法，修改过程是同步的</span><br><span class="line">    <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;inc&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">action：像一个装饰器，包裹mutations，使之可以异步</span><br><span class="line">    <span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;&#x27;</span>,arg)</span><br><span class="line">Module：模块化Vuex，可以让每一个模块拥有自己的state、mutation、action、getters,使得结构非常清晰，方便管理</span><br></pre></td></tr></table></figure>
<h3 id="你有使用过vuex的module吗？主要是在什么场景下使用？"><a href="#你有使用过vuex的module吗？主要是在什么场景下使用？" class="headerlink" title="你有使用过vuex的module吗？主要是在什么场景下使用？"></a>你有使用过vuex的module吗？主要是在什么场景下使用？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">把状态全部集中在状态树上，非常难以维护。按模块分成多个<span class="built_in">module</span>，状态树延伸多个分支，模块的状态内聚，主枝干放全局共享状态</span><br></pre></td></tr></table></figure>

<h3 id="在组件中怎么访问Vuex模块中的getter和state-怎么提交mutation和action？"><a href="#在组件中怎么访问Vuex模块中的getter和state-怎么提交mutation和action？" class="headerlink" title="在组件中怎么访问Vuex模块中的getter和state,怎么提交mutation和action？"></a>在组件中怎么访问Vuex模块中的getter和state,怎么提交mutation和action？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">通过 <span class="built_in">this</span>.$store.getters / <span class="built_in">this</span>.$store.state 来访问模块中的getter和state。</span><br><span class="line"></span><br><span class="line">通过(同步操作) <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;mutations方法名&#x27;</span>,值)提交模块中的mutation。</span><br><span class="line"></span><br><span class="line">通过(异步操作) <span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;actions方法名,值&#x27;</span>)提交模块中的action。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="vue-js中ajax请求代码应该写在组件的methods中还是vuex的actions中？"><a href="#vue-js中ajax请求代码应该写在组件的methods中还是vuex的actions中？" class="headerlink" title="vue.js中ajax请求代码应该写在组件的methods中还是vuex的actions中？"></a>vue.js中ajax请求代码应该写在组件的methods中还是vuex的actions中？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">如果请求来的数据是不是要被其他组件公用，仅仅在请求的组件内使用，就不需要放入vuex 的state里。</span><br><span class="line"></span><br><span class="line">如果被其他地方复用，这个很大几率上是需要的，如果需要，请将请求放入action里，方便复用</span><br></pre></td></tr></table></figure>
<h3 id="Vuex-是通过什么方式提供响应式数据的？"><a href="#Vuex-是通过什么方式提供响应式数据的？" class="headerlink" title="Vuex 是通过什么方式提供响应式数据的？"></a>Vuex 是通过什么方式提供响应式数据的？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">在 Store 构造函数中通过 <span class="keyword">new</span> Vue(&#123;&#125;) 实现的。</span><br><span class="line">利用 Vue 来监听 state 下的数据变化，</span><br><span class="line">给状态(数据)添加 getter、setter可以监听数据改变</span><br></pre></td></tr></table></figure>
<h3 id="Vuex-如何区分-state-是外部直接修改，还是通过-mutation-方法修改的？"><a href="#Vuex-如何区分-state-是外部直接修改，还是通过-mutation-方法修改的？" class="headerlink" title="Vuex 如何区分 state 是外部直接修改，还是通过 mutation 方法修改的？"></a>Vuex 如何区分 state 是外部直接修改，还是通过 mutation 方法修改的？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">在vuex底层会有一个committing变量，初始值<span class="literal">false</span>；当通过mutation方法修改数据时</span><br><span class="line">把committing变量变成<span class="literal">true</span>；如果是直接改变的变量则不改变committing变量</span><br></pre></td></tr></table></figure>
<h3 id="页面刷新后vuex的state数据丢失怎么解决"><a href="#页面刷新后vuex的state数据丢失怎么解决" class="headerlink" title="页面刷新后vuex的state数据丢失怎么解决"></a>页面刷新后vuex的state数据丢失怎么解决</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">放在<span class="built_in">localStorage</span> 或者sessionStorage中 ，或者借用辅助插vuex-persistedstate。</span><br><span class="line"></span><br><span class="line">vuex-persistedstate的createPersistedState()方法</span><br></pre></td></tr></table></figure>
<h3 id="怎么在组件中批量使用Vuex的state状态？"><a href="#怎么在组件中批量使用Vuex的state状态？" class="headerlink" title="怎么在组件中批量使用Vuex的state状态？"></a>怎么在组件中批量使用Vuex的state状态？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用mapState辅助函数, 利用对象展开运算符将state混入computed对象中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123; </span><br><span class="line">    <span class="attr">computed</span>:&#123; </span><br><span class="line">        ...mapState([<span class="string">&#x27;price&#x27;</span>,<span class="string">&#x27;number&#x27;</span>]) </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="怎么监听vuex数据的变化"><a href="#怎么监听vuex数据的变化" class="headerlink" title="怎么监听vuex数据的变化"></a>怎么监听vuex数据的变化</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">第一种方案 使用computed和watch监听vuex数据变化，可以在组件中通过组件的 watch方法来做, 因为组件可以将state数据映射到 组件的计算属性上,</span><br><span class="line"></span><br><span class="line">然后 监听 映射的计算属性即可 代码如下</span><br><span class="line"></span><br><span class="line"><span class="comment">// vuex中的state数据</span></span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">     </span><br><span class="line"><span class="comment">//  A组件中映射 state数据到计算属性</span></span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">   <span class="comment">//  this.$store.state.count</span></span><br><span class="line">  <span class="comment">// mapState       把全局  count 变成 可以直接使用的 数据</span></span><br><span class="line">    ...mapState([<span class="string">&#x27;count&#x27;</span>])</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// A组件监听 count计算属性的变化</span></span><br><span class="line">   <span class="attr">watch</span>: &#123;</span><br><span class="line">     <span class="comment">// watch 可以监听 data 数据 也可以监听 全局 vuex数据</span></span><br><span class="line">    count () &#123;</span><br><span class="line">      <span class="comment">// 用本身的数据进行一下计数</span></span><br><span class="line">      <span class="built_in">this</span>.changeCount++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第二种方案 vuex中store对象本身提供了watch函数 ,可以利用该函数进行监听</span><br><span class="line">watch(fn: <span class="built_in">Function</span>, <span class="attr">callback</span>: <span class="built_in">Function</span>, options?: <span class="built_in">Object</span>): <span class="built_in">Function</span></span><br><span class="line">响应式地侦听 fn 的返回值，当值改变时调用回调函数。fn 接收 store 的 state 作为第一个参数，其 getter 作为第二个参数。最后接收一个可选的对象参数表示 Vue 的 vm.$watch 方法的参数</span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="built_in">this</span>.$store.watch(<span class="function">(<span class="params">state, getters</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.count</span><br><span class="line">    &#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.changeCount++</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="在v-model上怎么用Vuex中state的值？"><a href="#在v-model上怎么用Vuex中state的值？" class="headerlink" title="在v-model上怎么用Vuex中state的值？"></a>在v-model上怎么用Vuex中state的值？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需要通过computed计算属性来转换</span></span><br><span class="line">&lt;input v-model=<span class="string">&quot;message&quot;</span>&gt;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">computed: &#123;</span><br><span class="line">    <span class="attr">message</span>: &#123;</span><br><span class="line">        get () &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.$store.state.message</span><br><span class="line">        &#125;,</span><br><span class="line">        set (value) &#123;</span><br><span class="line">            <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;updateMessage&#x27;</span>, value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h2><h3 id="Vue3-比-vue2-优势"><a href="#Vue3-比-vue2-优势" class="headerlink" title="Vue3 比 vue2 优势"></a>Vue3 比 vue2 优势</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 性能更好</span><br><span class="line"><span class="number">2.</span> 体积更小</span><br><span class="line"><span class="number">3.</span> 更好的ts支持</span><br><span class="line"><span class="number">4.</span> 更好的代码组织</span><br><span class="line"><span class="number">5.</span> 更好的逻辑抽离</span><br><span class="line"><span class="number">6.</span> 更多新的功能</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="Vue3-升级了哪些重要的功能？"><a href="#Vue3-升级了哪些重要的功能？" class="headerlink" title="Vue3 升级了哪些重要的功能？"></a>Vue3 升级了哪些重要的功能？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> createApp：创建vue实例的方式</span><br><span class="line"><span class="number">2.</span> emits属性，组件中的事件要先使用emits进行声明，然后在setup的形参引入</span><br><span class="line"><span class="number">3.</span> 生命周期</span><br><span class="line"><span class="number">4.</span> 多事件</span><br><span class="line"><span class="number">5.</span> fragment：不再限制唯一根节点</span><br><span class="line"><span class="number">6.</span> 移除.sync：</span><br><span class="line"><span class="number">7.</span> 异步组件的写法：Vue2 直接<span class="keyword">import</span>进来，Vue3需要使用defineAsyncComponent包裹一层</span><br><span class="line"><span class="number">8.</span> 移除filter</span><br><span class="line"><span class="number">9.</span> teleport：把组件直接to到某个dom</span><br><span class="line"><span class="number">10.</span> suspense：fallback，就是一个具名插槽</span><br><span class="line"><span class="number">11.</span> composition API (组合API)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Vue3-生命周期"><a href="#Vue3-生命周期" class="headerlink" title="Vue3 生命周期"></a>Vue3 生命周期</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> Options API生命周期</span><br><span class="line">	beforeCreate =&gt; <span class="function"><span class="params">created</span> =&gt;</span> <span class="function"><span class="params">beforeMount</span> =&gt;</span> <span class="function"><span class="params">mounted</span> =&gt;</span> <span class="function"><span class="params">beforeUpdate</span> =&gt;</span> <span class="function"><span class="params">updated</span> =&gt;</span> <span class="function"><span class="params">beforeUnmount</span> =&gt;</span> unmounted</span><br><span class="line"><span class="number">2.</span> Composition  API生命周期</span><br><span class="line">    setup() =&gt; setup() =&gt; <span class="function"><span class="params">onBeforeMount</span> =&gt;</span> <span class="function"><span class="params">onMounted</span> =&gt;</span> <span class="function"><span class="params">onBeforeUpdate</span> =&gt;</span> <span class="function"><span class="params">onUpdated</span> =&gt;</span> <span class="function"><span class="params">onBeforeUnmount</span> =&gt;</span> onUnmounted</span><br></pre></td></tr></table></figure>
<h3 id="如何看待composition-API-组合API-和options-API-选项API"><a href="#如何看待composition-API-组合API-和options-API-选项API" class="headerlink" title="如何看待composition API(组合API) 和options API(选项API)"></a>如何看待composition API(组合API) 和options API(选项API)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> Composition API 更好的代码组织，更好的逻辑复用，更好的类型推到</span><br><span class="line"><span class="number">2.</span> 小型项目，业务逻辑简单，用Options API</span><br><span class="line"><span class="number">3.</span> 中大型项目，业务逻辑复杂的，用Composition API</span><br><span class="line"><span class="number">4.</span> Composition API 是为了解决复杂业务逻辑而设计的</span><br><span class="line"><span class="number">5.</span> 类似React Hooks</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Options-API-存在的问题是什么？Composition-API-的优势有哪些？"><a href="#Options-API-存在的问题是什么？Composition-API-的优势有哪些？" class="headerlink" title="Options API 存在的问题是什么？Composition API 的优势有哪些？"></a>Options API 存在的问题是什么？Composition API 的优势有哪些？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>Options API 存在的问题</span><br><span class="line">使用传统OptionsAPI中，新增或者修改一个需求，就需要分别在data，methods，computed里修改 。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>Composition API 的优势</span><br><span class="line">我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。</span><br></pre></td></tr></table></figure>

<h3 id="如何理解ref-toRef和toRefs？"><a href="#如何理解ref-toRef和toRefs？" class="headerlink" title="如何理解ref toRef和toRefs？"></a>如何理解ref toRef和toRefs？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> ref</span><br><span class="line">    <span class="number">1.</span> 生成值类型的响应式数据</span><br><span class="line">    <span class="number">2.</span> 可用于模板和reactive</span><br><span class="line">    <span class="number">3.</span> 通过.value修改值</span><br><span class="line"><span class="number">2.</span> toRef</span><br><span class="line">    <span class="number">1.</span> 针对一个响应式对象（reactive封装）的prop</span><br><span class="line">    <span class="number">2.</span> 创建一个ref，具有响应式</span><br><span class="line">    <span class="number">3.</span> 两者保持引用关系</span><br><span class="line"><span class="number">3.</span> toRefs，避免模板中导出都是state</span><br><span class="line">    <span class="number">1.</span> 将响应式对象（reactive封装）转换成普通对象</span><br><span class="line">    <span class="number">2.</span> 对象的每个prop都是对应的ref</span><br><span class="line">    <span class="number">3.</span> 两者保持引用关系</span><br><span class="line"><span class="number">4.</span> 最佳使用方式</span><br><span class="line">    <span class="number">1.</span> 用reactive做对象的响应式，用ref做值类型的响应式</span><br><span class="line">    <span class="number">2.</span> setup中返回toRefs(state)，或者toRef(state, <span class="string">&#x27;prop&#x27;</span>)</span><br><span class="line">    <span class="number">3.</span> ref的变量命名都用xxxRef</span><br><span class="line">    <span class="number">4.</span> 合成函数返回响应式对象时，用toRefs</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="ref-toRef-toRefs进阶，深入理解"><a href="#ref-toRef-toRefs进阶，深入理解" class="headerlink" title="ref toRef toRefs进阶，深入理解"></a>ref toRef toRefs进阶，深入理解</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 为何需要ref？</span><br><span class="line">    <span class="number">1.</span> 返回值类型，会丢失响应式</span><br><span class="line">    <span class="number">2.</span> setup、computed、合成函数，都有可能返回值类型</span><br><span class="line">    <span class="number">3.</span> Vue如果不定义ref，用户将自定义ref，反而混乱</span><br><span class="line"><span class="number">2.</span> 为何需要.value？</span><br><span class="line">    <span class="number">1.</span> ref是一个对象（不丢失响应式），value存储值</span><br><span class="line">    <span class="number">2.</span> 通过.value属性的get和set实现响应式</span><br><span class="line">    <span class="number">3.</span> 用于模板、reactive时，不需要.value，其他情况都需要</span><br><span class="line"><span class="number">3.</span> 为何需要toRef toRefs</span><br><span class="line">    <span class="number">1.</span> 初衷：不丢失响应式的情况下，把对象数据进行分解和扩散</span><br><span class="line">    <span class="number">2.</span> 前提：针对的事响应式对象，不是普通对象</span><br><span class="line">    <span class="number">3.</span> 注意：不创造响应式，而是延续响应式</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Composition-API如何实现代码逻辑复用？"><a href="#Composition-API如何实现代码逻辑复用？" class="headerlink" title="Composition API如何实现代码逻辑复用？"></a>Composition API如何实现代码逻辑复用？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 抽离逻辑代码到一个函数</span><br><span class="line"><span class="number">2.</span> 函数命名约定为useXXX格式（React Hooks也是）</span><br><span class="line"><span class="number">3.</span> 在setup中引用useXXX函数</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="watch和watchEffect的区别是什么？"><a href="#watch和watchEffect的区别是什么？" class="headerlink" title="watch和watchEffect的区别是什么？"></a>watch和watchEffect的区别是什么？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 二者都可以监听属性变化</span><br><span class="line"><span class="number">2.</span> watch需要明确监听哪个属性</span><br><span class="line"><span class="number">3.</span> watchEffect会根据其中的属性，自动监听其变化</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="setup中如何获取组件实例？"><a href="#setup中如何获取组件实例？" class="headerlink" title="setup中如何获取组件实例？"></a>setup中如何获取组件实例？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> setup和其他Composition API中都没有<span class="built_in">this</span></span><br><span class="line"><span class="number">2.</span> 在Options API中仍然可以使用<span class="built_in">this</span></span><br><span class="line"><span class="number">3.</span> Composition API中可以使用getCurrentInstance方法获取</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Vite是什么？"><a href="#Vite是什么？" class="headerlink" title="Vite是什么？"></a>Vite是什么？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 前端打包工具</span><br><span class="line"><span class="number">2.</span> 在开发环境下，使用ES6 Module，不打包，启动快</span><br><span class="line"><span class="number">3.</span> 生产环境打包使用rollup</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Composition-API和React-Hooks的对比"><a href="#Composition-API和React-Hooks的对比" class="headerlink" title="Composition API和React Hooks的对比"></a>Composition API和React Hooks的对比</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 前者setup(生命周期create)只会被调用一次，后者函数会被多次调用</span><br><span class="line"><span class="number">2.</span> 前者无需useMemo，useCallback，因为setup只调用一次</span><br><span class="line"><span class="number">3.</span> 前者无需考虑调用顺序，后者需要保证hooks的顺序一致</span><br><span class="line"><span class="number">4.</span> 前者reactive + ref 比后者的useState，要难理解</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Vue3为何比Vue2快？"><a href="#Vue3为何比Vue2快？" class="headerlink" title="Vue3为何比Vue2快？"></a>Vue3为何比Vue2快？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="built_in">Proxy</span>实现响应式</span><br><span class="line"><span class="number">2.</span> patchFlag https:<span class="comment">//vue-next-template-explorer.netlify.app/</span></span><br><span class="line">    <span class="number">1.</span> 编译模板时，动态节点做标记</span><br><span class="line">    <span class="number">2.</span> 标记，分为不同的类型，如TEXT，PROPS</span><br><span class="line">    <span class="number">3.</span> diff时，区分静态节点和不同类型的动态节点</span><br><span class="line"><span class="number">3.</span> hoistStatic</span><br><span class="line">    <span class="number">1.</span> 将静态节点的定义，提升到父作用域，缓存起来，空间换时间</span><br><span class="line">    <span class="number">2.</span> 多个相邻的静态节点，会被合并起来，编译优化</span><br><span class="line"><span class="number">4.</span> cacheHandler</span><br><span class="line">    缓存事件</span><br><span class="line"><span class="number">5.</span> SSR优化</span><br><span class="line">    静态节点直接输出为dom，绕过vdom</span><br><span class="line"><span class="number">6.</span> tree-shaking</span><br><span class="line">    编译时，按需引入API</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="vue3为什么要用proxy实现双向绑定？"><a href="#vue3为什么要用proxy实现双向绑定？" class="headerlink" title="vue3为什么要用proxy实现双向绑定？"></a>vue3为什么要用proxy实现双向绑定？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">object.defineProperty的缺点：</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>因为es5的object.defineProperty无法监听对象属性的删除和添加</span><br><span class="line"><span class="number">2.</span>不能监听数组的变化，除了push/pop/shift/unshift/splice/spObject.definert/reverse，其他都不行</span><br><span class="line"><span class="number">3.</span><span class="built_in">Object</span>.defineProperty只能遍历对象属性直接修改(需要深拷贝进行修改)</span><br><span class="line"></span><br><span class="line">proxy的优点：</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>直接监听对象而非属性</span><br><span class="line"><span class="number">2.</span>直接监听数组的变化</span><br><span class="line"><span class="number">3.</span>拦截的方式有很多种(有<span class="number">13</span>种，set,get,has)</span><br><span class="line"><span class="number">4.</span><span class="built_in">Proxy</span>返回一个新对象，可以操作新对象达到目的</span><br></pre></td></tr></table></figure>
<h3 id="vue2与vue3的区别"><a href="#vue2与vue3的区别" class="headerlink" title="vue2与vue3的区别"></a>vue2与vue3的区别</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、 vue2和vue3响应式原理发生了改变</span><br><span class="line">vue2 的响应式原理是利⽤es5 的⼀个 API ，<span class="built_in">Object</span>.defineProperty()对数据进⾏劫持结合发布订阅模式的⽅式来实现的。</span><br><span class="line"></span><br><span class="line">vue3 中使⽤了 es6 的 proxy API 对数据代理，通过 reactive() 函数给每⼀个对象都包⼀层 <span class="built_in">Proxy</span>，通过 <span class="built_in">Proxy</span> 监听属性的变化，从⽽ 实现对数据的监控</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、Vue2使⽤的是选项API（Options API），Vue3使⽤的是组合API（Composition API）</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、实例化不同</span><br><span class="line">vue2中<span class="keyword">new</span>出的实例对象，所有的东西都在这个vue对象上，这样其实⽆论你⽤到还是没⽤到，都会跑⼀遍，这样不仅提⾼了性能消耗，也⽆疑增加了⽤户加载时间。</span><br><span class="line"></span><br><span class="line">vue3中可以⽤ES <span class="built_in">module</span> imports按需引⼊，如：keep-alive内置组件、v-model指令，等等，不仅我们开发起来更加的便捷，减少 了内存消耗，也同时减少了⽤户加载时间，优化⽤户体验</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、生命周期对比</span><br><span class="line">前者为vue2        后者为vue3</span><br><span class="line">beforeCreate   -&gt; 使用 setup()</span><br><span class="line">created            -&gt; 使用 setup()</span><br><span class="line">beforeMount    -&gt; onBeforeMount</span><br><span class="line">mounted          -&gt; onMounted</span><br><span class="line">beforeUpdate  -&gt; onBeforeUpdate</span><br><span class="line">updated           -&gt; onUpdated</span><br><span class="line">beforeDestroy -&gt; onBeforeUnmount</span><br><span class="line">destroyed        -&gt; onUnmounted</span><br><span class="line">errorCaptured -&gt; onErrorCaptured</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Object-defineProperty-和-Proxy-的区别"><a href="#Object-defineProperty-和-Proxy-的区别" class="headerlink" title="Object.defineProperty 和 Proxy 的区别"></a>Object.defineProperty 和 Proxy 的区别</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span><span class="built_in">Proxy</span> 可以直接监听对象而非属性；</span><br><span class="line"><span class="number">2.</span><span class="built_in">Proxy</span> 可以直接监听数组的变化；</span><br><span class="line"><span class="number">3.</span><span class="built_in">Proxy</span> 有多达 <span class="number">13</span> 种拦截方法,不限于 apply、ownKeys、deleteProperty、has 等等是 <span class="built_in">Object</span>.defineProperty 不具备的</span><br><span class="line"><span class="number">4.</span><span class="built_in">Proxy</span> 返回的是一个新对象,我们可以只操作新的对象达到目的,而<span class="built_in">Object</span>.defineProperty 只能遍历对象属性直接修改</span><br><span class="line"><span class="number">5.</span><span class="built_in">Proxy</span> 作为新标准将受到浏览器厂商重点持续的性能优化，也就是传说中的新标准的性能红利</span><br><span class="line"><span class="number">6.</span><span class="built_in">Object</span>.defineProperty 兼容性好，支持 IE9，而 <span class="built_in">Proxy</span> 的存在浏览器兼容性问题,而且无法用 polyfill 磨平，因此 Vue 的作者才声明需要等到下个大版本( <span class="number">3.0</span> )才能用 <span class="built_in">Proxy</span> 重写</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="怎么在-watch-监听开始之后立即被调用？"><a href="#怎么在-watch-监听开始之后立即被调用？" class="headerlink" title="怎么在 watch 监听开始之后立即被调用？"></a>怎么在 watch 监听开始之后立即被调用？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">在选项参数中指定 immediate: <span class="literal">true</span> 将立即以表达式的当前值触发回调</span><br></pre></td></tr></table></figure>
<h3 id="为什么vue3需要对引入的组件使用markRaw？"><a href="#为什么vue3需要对引入的组件使用markRaw？" class="headerlink" title="为什么vue3需要对引入的组件使用markRaw？"></a>为什么vue3需要对引入的组件使用markRaw？</h3><p>vue2中 is是通过组件名称切换的，vue3中setup是通过组件实例切换的。直接把组件实例放到reactive中代理，vue会发出警告。告知我们可以通过shallowRef 或者 markRaw 跳过proxy 代理。对组件实例进行响应式代理毫无意义，且浪费性能</p>
<p>markRaw：标记一个对象，使其不能成为一个响应式对象。<br>toRaw：将响应式对象（由 reactive定义的响应式）转换为普通对象。<br>shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。<br>shallowReactive：只处理对象最外层属性的响应式（浅响应式）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	<span class="xml"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;currentComponent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import A from &#x27;../components/A.vue&#x27;</span><br><span class="line">import B from &#x27;../components/B.vue&#x27;</span><br><span class="line">let tabList = reactive([</span><br><span class="line">	&#123;name:&#x27;组件A&#x27;,com:markRaw(A)&#125;,</span><br><span class="line">	&#123;name:&#x27;组件B&#x27;,com:markRaw(B)&#125;,</span><br><span class="line">]);</span><br><span class="line">&lt;script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="前端项目中环境变量怎么处理，怎么配置？"><a href="#前端项目中环境变量怎么处理，怎么配置？" class="headerlink" title="前端项目中环境变量怎么处理，怎么配置？"></a>前端项目中环境变量怎么处理，怎么配置？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>）为什么要配置环境变量</span><br><span class="line"></span><br><span class="line">在公司，一个项目一般会有开发版本、测试版本、灰度版本和线上版本，每个版本会对应相同或不同的数据库、API地址。为了方便管理，我们通常做成配置文件的形式，根据不同的环境，加载不同的文件。如果手动修改代码中加载配置文件的路径也可以，但是太麻烦，最重要的是很low</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>）实现原理</span><br><span class="line"></span><br><span class="line">采用nodejs顶层对象中的process.env（进程环境，返回一个包含用户环境信息的对象。）属性，根据各个环境的配置文件区分和切换环境</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>）具体操作（以vue项目为例）</span><br><span class="line">    <span class="number">1</span>、安装依赖：npm install process</span><br><span class="line">    <span class="number">2</span>、在根目录新增五个文件(根据自身情况增减)， </span><br><span class="line">        .env(默认配置)</span><br><span class="line">            VUE_APP_TITLE=<span class="string">&#x27;dev&#x27;</span></span><br><span class="line"></span><br><span class="line">        .env.development(本地开发环境配置)</span><br><span class="line">            ENV = <span class="string">&#x27;development&#x27;</span></span><br><span class="line"> </span><br><span class="line">            <span class="comment">/*ase api*/</span></span><br><span class="line">            VUE_APP_BASE_API=<span class="string">&quot;https://xxx&quot;</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//在要使用的位置获取：</span></span><br><span class="line">            process.env.VUE_APP_BASE_API</span><br><span class="line"></span><br><span class="line">        .env.pre(灰度配置)</span><br><span class="line"></span><br><span class="line">        .env.production(生产配置)</span><br><span class="line">            ENV = production</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/*ase api*/</span></span><br><span class="line">            VUE_APP_BASE_API=<span class="string">&quot;https://xxx&quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//在要使用的位置获取：</span></span><br><span class="line">            process.env.VUE_APP_BASE_API</span><br><span class="line"></span><br><span class="line">        .env.sit(测试配置<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        .env.uat(测试配置<span class="number">2</span>) </span><br><span class="line"></span><br><span class="line">        (ps: VUE_APP是统一标志，后面的拓展名可以任取)</span><br><span class="line"></span><br><span class="line">    <span class="number">3</span>、设置项目启动时默认的环境</span><br><span class="line"></span><br><span class="line">    只需要在项目启动命令后面修改需要的环境就行，例如我这是npm run dev，把–mode dev改成–mode uat就行了</span><br><span class="line">    <span class="comment">//package.json</span></span><br><span class="line">    <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;vue-cli-service serve --mode dev&quot;</span>,</span><br><span class="line">        <span class="string">&quot;build&quot;</span>: <span class="string">&quot;vue-cli-service build --mode dev&quot;</span>,</span><br><span class="line">        <span class="string">&quot;lint&quot;</span>: <span class="string">&quot;vue-cli-service lint&quot;</span>,</span><br><span class="line">        <span class="string">&quot;build-sit&quot;</span>: <span class="string">&quot;vue-cli-service build --mode sit&quot;</span>,</span><br><span class="line">        <span class="string">&quot;build-uat&quot;</span>: <span class="string">&quot;vue-cli-service build --mode uat&quot;</span>,</span><br><span class="line">        <span class="string">&quot;build-pre&quot;</span>: <span class="string">&quot;vue-cli-service build --mode pre&quot;</span>,</span><br><span class="line">        <span class="string">&quot;build-prod&quot;</span>: <span class="string">&quot;vue-cli-service build --mode prod&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="number">4</span>、查看环境是否配置成功</span><br><span class="line">    在main.js里打印当前环境，输出就成功了</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(process.env.NODE_NEV)</span><br></pre></td></tr></table></figure>



<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">...补充中</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>面试题</tag>
      </tags>
  </entry>
</search>
